input_boolean:
  timer_schlafzimmer_aktiv:
    name: Sleeptimer aktiv    
    icon: mdi:timer-off

  schlafen_einschalten_aktiv:
    name: "Schlafen einschalten aktiv"

  schlafen_aktiv:
    name: Schlafen    

  aufstehen_aktiviert:
    name: Aufstehen aktiviert
    
  schlafen_fernseher_einschalten:
    name: Fernseher einschalten    
    icon: mdi:television

input_datetime:
  schlafen_uhrzeit:
    name: Schlafen Uhrzeit   
    has_time: true
    has_date: true
    
input_number:
  timer_schlafzimmer:
    name: Timer Schlafzimmer
    min: 0
    max: 120
    step: 10

timer:
  sleeptimer:
    name: Sleeptimer
    icon: mdi:filmstrip-off
    duration: 4200

  schlafen_einschalten:
    name: "Schlafen einschalten"
    duration: 8

binary_sensor:
  - platform: template
    sensors:
      im_bett:
        friendly_name: "Im Bett"
        value_template: "{{not is_state('binary_sensor.bett', 'on')}}"
        device_class: vibration
        delay_off: 2
        icon_template: mdi:bed-king    
            
      schlafen_aktiv:
        friendly_name: Schlafen aktiv
        value_template: "{{ is_state('input_boolean.schlafen_aktiv', 'on') }}"
        icon_template: mdi:sleep
        availability_template: "{{ states('input_boolean.schlafen_aktiv') not in ['unknown', 'unavailable'] }}"
        
sensor:
  - platform: template
    sensors:
      schlafen_letzte_uhrzeit:
        friendly_name: Schlafen Letzte Uhrzeit       
        value_template: "{{ '%02d' % (state_attr('input_datetime.schlafen_uhrzeit', 'hour') | int(0)) ~ ':' ~ '%02d' % (state_attr('input_datetime.schlafen_uhrzeit', 'minute') | int(0)) }}"
        icon_template: mdi:av-timer

script:
  schlafen_gehen:
    alias: Schlafen gehen
    sequence:         
      - service: !secret tts_service
        data:
          echo: "wohnzimmer"
          message: >-
            {% set text = [
                "Gute Nacht", 
                "Schlaft gut", 
                "Schöne Träume", 
                "Bis morgen früh"
                ] | random 
            %}
            
            {{ "Alle Geräte werden jetzt ausgeschaltet. " ~ text ~ "." }}
      - delay: '00:00:02'
      - service: input_boolean.turn_on
        entity_id: input_boolean.schlafen_einschalten_aktiv
      - service: script.radios_ausschalten
        data:
          badezimmerEingeschaltetLassen: True
      - service: switch.turn_off
        entity_id: switch.watchtv_wohnzimmer, switch.computer
      - service: light.turn_off
        entity_id: light.balkon_licht, light.weihnachtsstern, light.lichterkette
      - choose:
          - conditions:
              - condition: or
                conditions:
                  - "{{ is_state('binary_sensor.fenster_schlafzimmer', 'on') }}"
                  - "{{ is_state('binary_sensor.allein_zu_hause', 'off') }}"
            sequence:
              - service: light.turn_on
                entity_id: light.bett
        default:
          - service: light.turn_on
            entity_id: light.bett, light.kleiderschrank
      - choose:
          - conditions:
              - "{{ is_state('input_boolean.schlafen_fernseher_einschalten', 'on') }}"
              - "{{ is_state('binary_sensor.allein_zu_hause', 'on') }}"
            sequence:
              - service: switch.turn_on
                entity_id: switch.watchtv_schlafzimmer   
              - service: timer.start
                entity_id: timer.sleeptimer
                data:
                  duration: "{{ states('input_number.timer_schlafzimmer') | int(0) * 60 }}"
              - service: input_boolean.turn_on
                entity_id: input_boolean.timer_schlafzimmer_aktiv    
      - wait_for_trigger:
        - platform: state
          entity_id: binary_sensor.bewegungsmelder_wohnzimmer
          to: 'off'                       
          for:
            minutes: 10
      - service: light.turn_off
        entity_id: light.wohnzimmer_couch, light.wohnzimmer_schrank

automation:
  - alias: "Schlafen einschalten"
    id: "schlafen_einschalten"
    trigger:
      - platform: state
        entity_id: binary_sensor.im_bett
        to: 'on'      
      - platform: event    
        event_type: zha_event
        event_data:
          device_ieee: 00:15:8d:00:01:83:77:4a
          command: click
          args:
            click_type: single                
    condition:      
      - "{{ is_state('input_boolean.schlafen_einschalten_aktiv', 'on') }}"
    action:
      - service: input_boolean.turn_off
        entity_id: input_boolean.schlafen_einschalten_aktiv            
      - service: input_boolean.turn_on
        entity_id: input_boolean.schlafen_aktiv      
      - service: input_datetime.set_datetime
        entity_id: input_datetime.schlafen_uhrzeit
        data:
          datetime: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"   
      - service: switch.turn_off
        entity_id: switch.badezimmer_radio          
      - service: alarmo.arm
        data:
          entity_id: alarm_control_panel.alarmo
          mode: night
      - if: "{{ is_state('input_boolean.bewegungsmelder_schlafzimmer_deaktiviert', 'on') }}"
        then:
          - service: input_boolean.turn_off
            entity_id: input_boolean.bewegungsmelder_schlafzimmer_deaktiviert              
          
  - alias: "Schlafen - Wecker richtig gestellt"
    id: "schlafen_wecker_richtig_gestellt"
    trigger:
      - platform: state
        entity_id: binary_sensor.schlafen_aktiv
        to: 'on'      
    variables:       
      vorMitternacht: "{{ now().strftime('%H') | int(0) <= 23 and now().strftime('%H') | int(0) > 6 }}"
      weckerZeit: "{{ as_timestamp(states('sensor.tablet_schlafzimmer_next_alarm'), None) | timestamp_custom('%H:%M:%S', True, 0) }}"      
      tagWecker: "{{ as_timestamp(states('sensor.tablet_schlafzimmer_next_alarm'), None) | timestamp_custom('%d', True, 0) | int(0) }}"
      tagHeute: "{{ as_timestamp(now()) | timestamp_custom('%d', True) | int(0) }}"
      arbeitstagHeute: "{{ is_state('binary_sensor.arbeitstag', 'on') }}"
      arbeitstagMorgen: "{{ is_state('binary_sensor.arbeitstag_morgen', 'on') }}"
      urlaubHeute: "{{ state_attr('sensor.naechster_urlaub', 'tage') | int(0) <= 0 }}"
      urlaubMorgen: "{{ state_attr('sensor.naechster_urlaub', 'tage') | int(0) < 0 or is_state_attr('sensor.naechster_urlaub', 'tage', 1) }}"         
      krankHeute: "{{ is_state('calendar.arbeit_krank', 'on') }}"
      krankMorgen: "{{ is_state('binary_sensor.krank_morgen', 'on') }}"
    condition:
      - condition: or
        conditions:
          - "{{ vorMitternacht and arbeitstagMorgen and not urlaubMorgen and not krankMorgen }}"
          - "{{ not vorMitternacht and arbeitstagHeute and not urlaubHeute and not krankHeute }}"    
    action:
      - choose:
          - conditions:
              - "{{ vorMitternacht }}"
              - "{{ arbeitstagMorgen }}"
            sequence:
              - choose:
                  - conditions:
                      - "{{ not weckerZeit }}"
                    sequence:
                      - service: !secret tts_service
                        data:
                          echo: "schlafzimmer"
                          override: true
                          message: "Der Wecker ist noch nicht gestellt."                     
              - choose:
                  - conditions:
                      - "{{ weckerZeit is defined }}"
                      - "{{ tagWecker != tagHeute + 1 }}"
                    sequence:
                      - service: !secret tts_service
                        data:
                          echo: "schlafzimmer"
                          override: true
                          message: "Der Wecker ist noch nicht für morgen gestellt."                                                           
      - choose:
          - conditions:
              - "{{ not vorMitternacht }}"
              - "{{ arbeitstagHeute }}"
            sequence:
              - choose:
                  - conditions:
                      - "{{ not weckerZeit }}"
                    sequence:
                      - service: !secret tts_service
                        data:
                          echo: "schlafzimmer"
                          override: true
                          message: "Der Wecker ist noch nicht gestellt."
              - choose:
                  - conditions:
                      - "{{ weckerZeit is defined }}"
                      - "{{ tagWecker != tagHeute }}"
                    sequence:
                      - service: !secret tts_service
                        data:
                          echo: "schlafzimmer"
                          override: true
                          message: "Der Wecker ist noch nicht für heute gestellt."  

  - alias: "Schlafen gehen"
    id: "schlafen_gehen"
    trigger:
      - id: schalter_wohnzimmer
        platform: event
        event_type: zha_event
        event_data:
          device_ieee: 00:12:4b:00:29:2b:72:4b
          command: toggle   
    condition:
      - "{{ is_state('binary_sensor.schlafen_aktiv', 'off') }}"
      - "{{ is_state('binary_sensor.nachts', 'on') }}"
    action:
      - service: script.schlafen_gehen   
       
  - alias: 'Sleeptimer - Starten'
    id: 'sleeptimer_starten'
    trigger:
      - platform: state
        entity_id: input_boolean.timer_schlafzimmer_aktiv
        to: 'on'
      - platform: state
        entity_id: input_number.timer_schlafzimmer
    condition:
      - condition: state
        entity_id: binary_sensor.schlafen_aktiv
        state: 'on'        
    action:
      - service: timer.start
        entity_id: timer.sleeptimer
        data:
          duration: "{{ states('input_number.timer_schlafzimmer') | int(0) * 60 }}"
      - service: input_boolean.turn_on
        entity_id: input_boolean.timer_schlafzimmer_aktiv

  - alias: 'Sleeptimer - Endet'
    id: 'sleeptimer_endet'
    trigger:
      - platform: event
        event_type: timer.finished
        event_data:
          entity_id: timer.sleeptimer
    condition:
      - condition: state
        entity_id: input_boolean.timer_schlafzimmer_aktiv
        state: 'on'                    
    action:      
      - service: switch.turn_off
        entity_id: switch.watchtv_schlafzimmer
      - service: script.licht_wohnung_ausschalten

  - alias: 'Sleeptimer - Abbrechen'
    id: 'sleeptimer_abbrechen'
    trigger:
      - platform: state
        entity_id: input_boolean.timer_schlafzimmer_aktiv
        to: 'off'
      - platform: event
        event_type: timer.cancelled
        event_data:
          entity_id: timer.sleeptimer     
    condition:
      - condition: state
        entity_id: timer.sleeptimer
        state: 'active'                  
    action:
      - service: timer.cancel
        entity_id: timer.sleeptimer
      - service: input_boolean.turn_off
        entity_id: input_boolean.timer_schlafzimmer_aktiv