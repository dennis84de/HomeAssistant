input_boolean:
  timer_schlafzimmer_aktiv:
    name: Sleeptimer aktiv    
    icon: mdi:timer-off

  schlafen_einschalten_aktiv:
    name: "Schlafen einschalten aktiv"

  schlafen_aktiv:
    name: Schlafen    

  schlafen_fernseher_einschalten:
    name: Fernseher einschalten    
    icon: mdi:television

input_datetime:
  schlafen_uhrzeit:
    name: Schlafen Uhrzeit   
    has_time: true
    has_date: true
    
input_select:
  timer_schlafzimmer_dauer:
    name: Timer Schlafzimmer
    options:
      - 10
      - 30
      - 60
      - 70
      - 90
      - 120    
    icon: mdi:clock-end

timer:
  sleeptimer:
    name: Sleeptimer
    icon: mdi:filmstrip-off
    duration: 4200

  schlafen_einschalten:
    name: "Schlafen einschalten"
    duration: 7

binary_sensor:
  - platform: template
    sensors:
      im_bett:
        friendly_name: "Im Bett"
        value_template: >-
          {{not is_state("binary_sensor.bett",'on')}}
        device_class: vibration
        delay_off: 2
        icon_template: >-
            mdi:bed-king    
            
      schlafen_aktiv:
        friendly_name: Schlafen aktiv
        value_template: "{{ is_state('input_boolean.schlafen_aktiv', 'on') }}"
        icon_template: mdi:sleep
        availability_template: "{{ states('input_boolean.schlafen_aktiv') not in ['unknown', 'unavailable'] }}"
          
      schlafen_inaktiv:
        friendly_name: Schlafen inaktiv
        value_template: "{{ is_state('binary_sensor.schlafen_aktiv', 'off') }}"

sensor:
  - platform: template
    sensors:
      timer_schlafzimmer_zeit:
        friendly_name: Fernseher ausschalten
        icon_template: mdi:filmstrip-off
        unit_of_measurement: 'Minuten'
        value_template: >-
          {%- if is_state('input_boolean.timer_schlafzimmer_aktiv', 'on') %}
            {% set time = states('sensor.time') %}
            {% set now = as_timestamp(now()) | int %}
            {% set last = as_timestamp(state_attr('automation.sleeptimer_starten', 'last_triggered')) | int %}              
            {% set duration = states('input_select.timer_schlafzimmer_dauer') | int %}
            {% set diff = (duration - ((now - last) / 60)) | int %}

            {% if diff < 0 %}
              {{ duration }}
            {% else %}
              {{ diff }}
            {% endif %}
          {% else %}
              -
          {%- endif %}

      schlafen_letzte_uhrzeit:
        friendly_name: Schlafen Letzte Uhrzeit       
        value_template: "{{ '%02d' % (state_attr('input_datetime.schlafen_uhrzeit', 'hour') | int) ~ ':' ~ '%02d' % (state_attr('input_datetime.schlafen_uhrzeit', 'minute') | int) }}"
        icon_template: mdi:av-timer
        unit_of_measurement: 'Uhr'

script:
  schlafen_gehen:
    alias: Schlafen gehen
    sequence:
      - service: input_boolean.turn_on
        entity_id: input_boolean.schlafen_aktiv
      - service: input_datetime.set_datetime
        entity_id: input_datetime.schlafen_uhrzeit
        data:
          datetime: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"
      - service: switch.turn_off
        entity_id: switch.wohnzimmer_radio, switch.balkon_radio, switch.flur_radio, switch.kuche_radio, switch.schlafzimmer_radio, switch.arbeitszimmer_radio
      - service: switch.turn_off
        entity_id: switch.watchtv_wohnzimmer, switch.monitor
      - service: light.turn_off
        entity_id: light.strahler, light.balkon_licht
      - service: light.turn_on
        entity_id: light.bett, light.kleiderschrank
      - choose:
          - conditions:
              - condition: state
                entity_id: input_boolean.computer_ausschalten
                state: 'on'
            sequence:
              - service: switch.turn_off
                entity_id: switch.pc    
      - choose:
          - conditions:
              - condition: state
                entity_id: input_boolean.schlafen_fernseher_einschalten
                state: 'on'
            sequence:
              - service: switch.turn_on
                entity_id: switch.watchtv_schlafzimmer   
              - service: input_boolean.turn_on
                entity_id: input_boolean.timer_schlafzimmer_aktiv        

  sleeptimer_turn_off_tv:
    alias: Sleeptimer aktivieren
    sequence:
      - condition: state
        entity_id: input_boolean.timer_schlafzimmer_aktiv
        state: 'on'
      - service: script.watchtv_schlafzimmer_off

automation:
  - alias: "Schlafen gehen - Countdown starten"
    trigger:
      - platform: state
        entity_id: sensor.schalter_wohnzimmer
        to: '2'      
    condition:
      - condition: state
        entity_id: binary_sensor.schlafen_aktiv
        state: 'off'
      - condition: state
        entity_id: timer.schlafen_einschalten
        state: 'idle'
      - condition: time
        after: '20:00'
        before: '06:00'  
    action:
      - service: !secret tts_service
        data_template:
          echo: "wohnzimmer"
          message: "Alle Geräte werden gleich ausgeschaltet."
      - delay: '00:00:02'
      - service: timer.start
        entity_id: timer.schlafen_einschalten
      - service: media_player.play_media
        data_template:
          entity_id: media_player.benachrichtigungen
          media_content_id: http://192.168.2.75:8123/local/countdown/countdown_5.mp3
          media_content_type: music

  - alias: "Schlafen gehen - Countdown abbrechen"
    trigger:
      - platform: state
        entity_id: binary_sensor.schalter_wohnzimmer
        to: 'off'
    condition:
      - condition: state
        entity_id: timer.schlafen_einschalten
        state: 'active'
    action:
      - service: media_player.media_pause
        entity_id: media_player.benachrichtigungen
      - service: !secret tts_service
        data_template:
          echo: "wohnzimmer"
          message: "Der Vorgang wurde abgebrochen."
      - service: timer.cancel
        entity_id: timer.schlafen_einschalten

  - alias: "Schlafen gehen - Starten"
    trigger:
      - platform: event
        event_type: timer.finished
        event_data:
          entity_id: timer.schlafen_einschalten
    action:
      - service: !secret tts_service
        data_template:
          echo: "wohnzimmer"
          message: "Alle Geräte werden jetzt ausgeschaltet. Gute Nacht."
      - service: script.schlafen_gehen

  - alias: "Schlafen gehen - Wecker Arbeit"
    trigger:
      - platform: state
        entity_id: binary_sensor.im_bett
        to: 'on'
    condition:
      - condition: state
        entity_id: input_boolean.schlafen_aktiv
        state: 'on'
      - condition: state
        entity_id: input_boolean.wecker_erinnerung_morgen
        state: 'off'    
    action:
      - service: input_boolean.turn_on
        entity_id: input_boolean.wecker_erinnerung_morgen
      - choose:                      
          - conditions:
              - condition: time
                before: '00:00:00'
              - condition: state
                entity_id: binary_sensor.arbeitstag_morgen
                state: 'on'         
              - condition: state
                entity_id: binary_sensor.urlaub_morgen
                state: 'off'
              - condition: template
                value_template: "{{ state_attr('input_datetime.wecker', 'timestamp') <= 1 }}"         
            sequence:
              - service: !secret tts_service
                data_template:
                  echo: "schlafzimmer"
                  message: "Morgen ist ein Arbeitstag und der Wecker ist noch nicht gestellt."
                  
          - conditions:                  
              - condition: time
                before: '00:00:00'
              - condition: state
                entity_id: binary_sensor.arbeitstag_morgen
                state: 'on'         
              - condition: state
                entity_id: binary_sensor.urlaub_morgen
                state: 'off'
              - condition: template
                value_template: >-
                  {% set wecker_zeit = '%02d' % (state_attr('input_datetime.wecker', 'hour') | int) ~ ':' ~ '%02d' % (state_attr('input_datetime.wecker', 'minute') | int) %}
                  {% set wecker_standard_office = states('input_text.alarm_standard_office') %}
                  {% set wecker_standard_homeoffice = states('input_text.alarm_standard_homeoffice') %}                  
                  {% set morgen_office = states('binary_sensor.office_morgen') %}
                  
                  {% if morgen_office == 'on' and wecker_zeit != wecker_standard_office %}
                    True
                  {% elif morgen_office == 'off' and wecker_zeit != wecker_standard_homeoffice %}
                    True                    
                  {% else %}                            
                    False
                  {% endif %}   
            sequence:
              - service: !secret tts_service
                data_template:
                  echo: "schlafzimmer"
                  message: "Morgen ist ein Arbeitstag und der Wecker ist nicht richtig gestellt."
                
          - conditions:
              - condition: time
                after: '00:00:00'
              - condition: state
                entity_id: binary_sensor.arbeitstag_heute
                state: 'on'         
              - condition: state
                entity_id: calendar.urlaub
                state: 'off'
              - condition: template
                value_template: "{{ state_attr('input_datetime.wecker', 'timestamp') <= 1 }}"   
            sequence:
              - service: !secret tts_service
                data_template:
                  echo: "schlafzimmer"
                  message: "Heute ist ein Arbeitstag und der Wecker ist noch nicht gestellt."                  
                  
          - conditions:
              - condition: time
                after: '00:00:00'
              - condition: state
                entity_id: binary_sensor.arbeitstag_heute
                state: 'on'         
              - condition: state
                entity_id: calendar.urlaub
                state: 'off'
              - condition: template
                value_template: >-
                  {% set wecker_zeit = '%02d' % (state_attr('input_datetime.wecker', 'hour') | int) ~ ':' ~ '%02d' % (state_attr('input_datetime.wecker', 'minute') | int) %}
                  {% set wecker_standard_office = states('input_text.alarm_standard_office') %}
                  {% set wecker_standard_homeoffice = states('input_text.alarm_standard_homeoffice') %}                  
                  {% set heute_office = states('calendar.arbeit_buero') %}
                  
                  {% if heute_office == 'on' and wecker_zeit != wecker_standard_office %}
                    True
                  {% elif heute_office == 'off' and wecker_zeit != wecker_standard_homeoffice %}
                    True                    
                  {% else %}                            
                    False
                  {% endif %}   
            sequence:
              - service: !secret tts_service
                data_template:
                  echo: "schlafzimmer"
                  message: "Heute ist ein Arbeitstag und der Wecker ist nicht richtig gestellt."
                  
  - alias: 'Sleeptimer starten'
    trigger:
      platform: state
      entity_id: input_boolean.timer_schlafzimmer_aktiv
      to: 'on'
    action:
      - service: timer.start
        entity_id: timer.sleeptimer
        data_template:
          duration: >
            {{ states('input_select.timer_schlafzimmer_dauer')  | int * 60 | int }}

  - alias: 'Sleeptimer geändert'
    trigger:
      platform: state
      entity_id: input_select.timer_schlafzimmer_dauer
    action:
      - service: timer.start
        entity_id: timer.sleeptimer
        data_template:
          duration: >
            {{ states('input_select.timer_schlafzimmer_dauer') | int * 60 | int }}
      - service: input_boolean.turn_on
        entity_id: input_boolean.timer_schlafzimmer_aktiv

  - alias: 'Sleeptimer endet'
    trigger:
      platform: event
      event_type: timer.finished
      event_data:
        entity_id: timer.sleeptimer
    action:
      - service: script.sleeptimer_turn_off_tv
      - service: light.turn_off
        entity_id: light.bett

  - alias: 'Sleeptimer abbrechen'
    trigger:
      platform: state
      entity_id: input_boolean.timer_schlafzimmer_aktiv
      to: 'off'
    action:
      - service: timer.cancel
        entity_id: timer.sleeptimer
        
  - alias: "Schlafzimmer Tablet - Wiedergabe"
    trigger:
      - platform: state        
        entity_id: binary_sensor.schalter_schlafzimmer
        to: 'on'
      - platform: state        
        entity_id: sensor.schalter_schlafzimmer
        to: '2'   
      - platform: state        
        entity_id: binary_sensor.im_bett
        to: 'on'   
        for:
          seconds: 2
    condition:
      - condition: state        
        entity_id: binary_sensor.im_bett
        state: 'on'   
        for:
          seconds: 2      
      - condition: state
        entity_id: binary_sensor.schlafen_aktiv
        state: 'on'      
      - condition: or
        conditions:
        - condition: state
          entity_id: media_player.tablet_schlafzimmer
          state: 'playing'
        - condition: state
          entity_id: media_player.tablet_schlafzimmer
          state: 'paused'
    action:
      - service: media_player.media_play_pause
        entity_id: media_player.tablet_schlafzimmer  
        
  - alias: "Schlafzimmer - Tablet - Wiedergabe gestartet"
    trigger:
      - platform: state
        entity_id: media_player.tablet_schlafzimmer
        to: 'playing'      
    condition:
      - condition: state
        entity_id: binary_sensor.schlafen_aktiv
        state: 'on'  
    action:
      - service: light.turn_off
        entity_id: light.bett, light.kleiderschrank, light.flur_vorne, light.flur_hinten, light.badezimmerschrank, light.schreibtisch, light.kuche_regal, light.arbeitszimmer_lampe, light.sportzimmer_regal, light.strahler, light.couch

  - alias: "Schlafzimmer - Tablet - Wiedergabe pausiert"
    trigger:
      platform: state
      entity_id: binary_sensor.bewegungsmelder_schlafzimmer
      to: 'on'
    condition:
      - condition: state
        entity_id: media_player.tablet_schlafzimmer
        state: 'playing'
      - condition: state
        entity_id: binary_sensor.schlafen_aktiv
        state: 'on'   
    action:
      - service: media_player.media_pause
        entity_id: media_player.tablet_schlafzimmer        

  - alias: "Aufstehen - Schlafen ausschalten"
    trigger:
      - platform: state
        entity_id: binary_sensor.bewegungsmelder_kueche
        to: 'on'
      - platform: state
        entity_id: binary_sensor.bewegungsmelder_flur_vorne
        to: 'on'
      - platform: state
        entity_id: binary_sensor.bewegungsmelder_wohnzimmer
        to: 'on'
    condition:
      - condition: and
        conditions:
          - condition: state
            entity_id: binary_sensor.schlafen_aktiv
            state: 'on'
          - condition: or
            conditions:
              - condition: state
                entity_id: binary_sensor.alarm_aktiv
                state: 'on'
              - condition: and
                conditions:
                  - condition: time
                    after: '06:00'
                    before: '20:00'
                  - condition: template
                    value_template: "{{ False if is_state_attr('input_datetime.wecker', 'day', now().today().day) else True }}"
    action:
      - service: input_boolean.turn_off
        entity_id: input_boolean.schlafen_aktiv, input_boolean.alarm_aktiv, input_boolean.wecker_erinnerung_morgen, input_boolean.wecker_zeit_geaendert
      - service: input_boolean.turn_on
        entity_id: input_boolean.computer_ausschalten, input_boolean.schlafen_fernseher_einschalten
      - service: light.turn_off
        entity_id: light.bett

  - alias: "Aufstehen - Geräte einschalten"
    trigger:
      - platform: state
        entity_id: binary_sensor.schlafen_aktiv
        to: 'off'
    action:      
      - service: switch.turn_on
        entity_id: switch.computer
      - service: script.wohnung_radios_einschalten
      - service: !secret tts_service
        data_template:                  
          message: >-
            {%- set word_for_and = 'und' %}
            {%- set up_time = as_timestamp(now()) - state_attr('input_datetime.schlafen_uhrzeit', 'timestamp') | int %}

            {%- macro phrase(name, plural_name, divisor, mod=None) %}
              {%- set value = ((up_time // divisor) % (mod if mod else divisor)) | int %}
              {%- set name = plural_name if value > 1 else name %}
              {{- '{} {}'.format(value, name) if value | int > 0 else '' }}
            {%- endmacro %}

            {%- set values = [ 
                       phrase('Woche', 'Wochen', 60*60*24*7), 
                       phrase('Tag', 'Tage', 60*60*24, 7),
                       phrase('Stunde', 'Stunden', 60*60, 24),
                       phrase('Minute', 'Minuten', 60)
                   ] | select('!=','') | list %}

            {% set schlafenSatz = values[:-1] | join(', ') ~ ' ' ~ word_for_and ~ ' ' ~ values[-1] if values | length > 1 else values | first %}
            {% set uhrzeitSatz = as_timestamp(now()) | timestamp_custom('%H:%M') %}         
             
            {{ 'Guten Morgen. Es ist ' ~ uhrzeitSatz ~ ' Uhr. Du hast ' ~ schlafenSatz ~ ' geschlafen.' }}             
      - choose:
          - conditions:
              - condition: state
                entity_id: calendar.arbeit_buero
                state: 'on'
              - condition: or
                conditions:
                  - condition: numeric_state
                    entity_id: input_text.corona_dortmund_gestern
                    above: input_number.corona_grenzwert       
                  - condition: numeric_state
                    entity_id: input_text.corona_mulheim_gestern
                    above: input_number.corona_grenzwert                        
            sequence:
              - service: !secret tts_service
                data_template:                  
                  message: >-
                    {% set coronaDortmundGestern = states('input_text.corona_dortmund_gestern') | float %}
                    {% set coronaMuelheimGestern = states('input_text.corona_mulheim_gestern') | float %}
                    {% set coronaGrenzwert = states('input_number.corona_grenzwert') | float %}
                    
                    {% if coronaDortmundGestern >= coronaGrenzwert and coronaMuelheimGestern >= coronaGrenzwert %}
                      Die Corona-Werte in Dortmund und Mülheim waren gestern zu hoch.
                    {% elif coronaMuelheimGestern >= coronaGrenzwert %}          
                      Der Corona-Wert in Mülheim war gestern zu hoch.
                    {% elif coronaDortmundGestern >= coronaGrenzwert  %}
                      Der Corona-Wert in Dortmund war gestern zu hoch.
                    {% else %}
                      Die Corona-Werte waren gestern unter dem Grenzwert.
                    {% endif %}
                    
homeassistant:
  customize:
    script.schlafen_gehen:
      icon: mdi:power-sleep
      can_cancel: false      