binary_sensor:
  - platform: template
    sensors:             
      bewegungsmelder_inaktiv_unterwegs:
        friendly_name: "Bewegungmelder inaktiv - Unterwegs"
        device_class: occupancy
        value_template: "{{ is_state('person.dennis', 'not_home') }}"

automation:
  - alias: "Alles ausschalten"
    id: alles_ausschalten
    trigger:
      - platform: tag
        tag_id: alles_ausschalten
    condition: 
      - condition: state
        entity_id: person.dennis
        state: 'home'
    action:           
      - service: script.alles_ausschalten   
  
  - alias: "Unterwegs - Geräte eingeschaltet"
    id: "unterwegs_geraete_eingeschaltet"
    trigger:
      - platform: state
        entity_id: person.dennis
        to: 'not_home'
        for:
          minutes: 60
    condition:
      - condition: template
        value_template: >-
          {% set ns = namespace(found=0) -%}
          {% set computerEingeschaltet = is_state('switch.pc', 'on') %}
          {% set computerEingeschaltetLassen = is_state('input_select.computer_ausschalten', 'Nichts unternehmen') %}

          {% for entity_id in state_attr('group.alles_ausschalten', 'entity_id') -%}
            {% set parts = entity_id.split('.') -%}
            {% if (states(entity_id) == 'on') -%}
              {% set ns.found = ns.found + 1 -%}
            {% endif -%}
          {% endfor -%}
          
          {% if ns.found > 1 %}
            True
          {% elif ns.found == 0 or (ns.found == 1 and computerEingeschaltet == True and computerEingeschaltetLassen == True) %}
            False
          {% else %}
            True
          {% endif %}  
          
    action:
      - service: notify.telegram
        data:
          title: "Es sind noch Geräte eingeschaltet"
          message: >-
            {%- set comma = joiner(",") -%}
            {%- set deviceFound = false -%}

            {% for entity_id in state_attr('group.alles_ausschalten', 'entity_id') -%}              
              {%- if states(entity_id) == 'on' -%}
                {%- set deviceFound = true -%}
                {{ comma() }} {{ state_attr(entity_id, 'friendly_name') }}
              {%- endif -%}
            {%- endfor -%}

            {%- if deviceFound == true -%}
              Alle Geräte sind ausgeschaltet.
            {%- endif -%}
          data:
            inline_keyboard:
              - 'Alles Ausschalten:/alles_ausschalten'

  - alias: "Telegram - Unterwegs Status"
    id: "telegram_unterwegs_status"
    trigger:
      platform: event
      event_type: telegram_command
      event_data:
        command: '/status'
    action:
      - service: notify.telegram
        data:
          title: "Status Home Assistant"
          message: >-
            Das System ist seit {{ states('sensor.laufzeit_stunden') }} Stunden online.
            {%- if is_state('group.alles_ausschalten', 'off') %}
            Alle Geräte sind ausgeschaltet.
            {% endif %}
      - condition: state
        entity_id: group.alles_ausschalten
        state: 'on'
      - service: notify.telegram
        data:
          message: "Es sind noch Geräte eingeschaltet."
          data:
            inline_keyboard:
              - 'Geräte anzeigen:/geraete'

  - alias: "Telegram - Eingeschaltete Geräte"
    id: "telegram_eingeschaltete_geraete"
    trigger:
      platform: event
      event_type: telegram_callback
      event_data:
        data: '/geraete'
    action:
      - service: telegram_bot.edit_replymarkup
        data:
          message_id: '{{ trigger.event.data.message.message_id }}'
          chat_id: '{{ trigger.event.data.user_id }}'
          inline_keyboard: []
      - service: telegram_bot.send_message
        data:
          target: '{{ trigger.event.data.chat_id }}'
          message: >-
            {%- set comma = joiner(",") -%}
            {%- set deviceFound = false -%}

            {% for entity_id in state_attr('group.alles_ausschalten', 'entity_id') -%}
              {%- if states(entity_id) == 'on' -%}
                {%- set deviceFound = true -%}
                {{ comma() }} {{ state_attr(entity_id, 'friendly_name') }}
              {%- endif -%}
            {%- endfor -%}

            {%- if deviceFound == true -%}
              Alle Geräte sind ausgeschaltet.
            {%- endif -%}
          inline_keyboard:
            - 'Alles Ausschalten:/alles_ausschalten'

  - alias: "Telegram - Alles ausschalten"
    id: "telegram_alles_ausschalten"
    trigger:
      - platform: event
        event_type: telegram_callback
        event_data:
          data: '/alles_ausschalten'
    action:
      - service: script.alles_ausschalten
      - service: telegram_bot.edit_replymarkup
        data:
          message_id: '{{ trigger.event.data.message.message_id }}'
          chat_id: '{{ trigger.event.data.user_id }}'
          inline_keyboard: []
      - service: telegram_bot.send_message
        data:
          target: '{{ trigger.event.data.chat_id }}'
          message: "Alle Geräte werden ausgeschaltet."              
          
  - alias: "Telegram - Aufenthaltsort"
    id: "telegram_aufenthaltsort"
    trigger:
      - platform: event
        event_type: telegram_command
        event_data:
          command: '/ort'
    action:
      - service: notify.telegram
        data:
          title: "Aufenthaltsort"
          message: "{{ states('sensor.aufenthaltsort_handy') }} {% if states('proximity.home') | int(0) > 0 %}({{ states('proximity.home') }}km von zu Hause.){% endif %}"                   
              
  - alias: "Urlaub - Lichtsimulation einschalten"
    id: "urlaub_lichtsimulation_einschalten"
    trigger:
      - platform: state
        entity_id: person.dennis
        to: 'not_home'
    condition:
      - condition: state
        entity_id: calendar.urlaub
        state: 'on'        
    action:
      - service: presence_simulation.start
      - service: notify.telegram
        data:
          message: "Die Lichtsimulation wurde eingeschaltet."    
               
  - alias: "Telegram - Lichtsimulation einschalten"
    id: "telegram_lichsimulation_einschalten"
    trigger:
      - platform: event
        event_type: telegram_command
        event_data:
          command: '/licht_ein'
    action:
      - service: presence_simulation.start
      - service: telegram_bot.send_message
        data:
          target: '{{ trigger.event.data.chat_id }}'
          message: "Die Lichtsimulation wird eingeschaltet."
               
  - alias: "Telegram - Lichtsimulation ausschalten"
    id: "telegram_lichsimulation_ausschalten"
    trigger:
      - platform: event
        event_type: telegram_command
        event_data:
          command: '/licht_aus'
    action:
      - service: presence_simulation.stop    
      - service: telegram_bot.send_message
        data:
          target: '{{ trigger.event.data.chat_id }}'
          message: "Die Lichtsimulation wird ausgeschaltet."
          
script:      
  alles_ausschalten:
    alias: "Alles ausschalten"
    sequence:
      - service: script.radios_pausieren
      - service: !secret tts_service
        data:
          echo: "flur"          
          message: >-
            {% if is_state('binary_sensor.staubsauger_reinigung_heute', 'on') and is_state('input_boolean.staubsauger_automatische_reinigung', 'on') %}
              {% set vacuumMessage = 'Die Wohnung wird heute gesaugt.' %}
            {% else %}
              {% set vacuumMessage = '' %}
            {% endif %}

            {% set openWindows = expand('group.fenster')
              | selectattr('state','eq','on') 
              | map(attribute='name')
              | list %}
              
            {% set qty = openWindows | length %}  
            {% set p1 = 'Das folgende' if qty == 1 else 'Die folgenden' %}
            {% set p2 = 'ist' if qty == 1 else 'sind' %}
            {% set windowMessage = '' if qty == 0 else '{} Fenster {} geöffnet: {}.'.format(p1, p2, openWindows | join(', ')) %}
            
            {{ vacuumMessage }} {{ windowMessage }} Alle Geräte werden ausgeschaltet. Auf Wiedersehen.
      - service: mqtt.publish
        data:
           topic: 'handy/tracker'
           payload: not_home
           retain: true            
      - service: homeassistant.turn_off
        entity_id: group.alles_ausschalten