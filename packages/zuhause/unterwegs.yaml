binary_sensor:
  - platform: template
    sensors:             
      bewegungsmelder_inaktiv_unterwegs:
        friendly_name: "Bewegungmelder inaktiv - Unterwegs"
        device_class: occupancy
        value_template: "{{ is_state('binary_sensor.erwachsene_zu_hause', 'off') }}"
          
script:      
  alles_ausschalten:
    alias: "Alles ausschalten"
    sequence:
      - service: script.radios_pausieren
      - service: !secret tts_service
        data:
          echo: "flur"          
          message: >-
            {% if is_state('binary_sensor.staubsauger_reinigung_heute', 'on') and is_state('input_boolean.staubsauger_automatische_reinigung', 'on') %}
              {% set vacuumMessage = 'Die Wohnung wird heute gesaugt.' %}
            {% else %}
              {% set vacuumMessage = '' %}
            {% endif %}

            {% set openWindows = expand('group.fenster')
              | selectattr('state','eq','on') 
              | map(attribute='name')
              | list %}
              
            {% set qty = openWindows | length %}  
            {% set p1 = 'Das folgende' if qty == 1 else 'Die folgenden' %}
            {% set p2 = 'ist' if qty == 1 else 'sind' %}
            {% set windowMessage = '' if qty == 0 else '{} Fenster {} geöffnet: {}.'.format(p1, p2, openWindows | join(', ')) %}
            
            {% set goodbyeMessage = [
                "Auf Wiedersehen", 
                "Bis später Peter",
                "Tschau Kakao", 
                "Ich wünsche euch einen schönen Tag"
                ] | random 
            %}
                       
            {{ vacuumMessage }} {{ windowMessage }} Alle Geräte werden ausgeschaltet. {{ goodbyeMessage }}.
      - parallel:          
          - service: homeassistant.turn_off
            entity_id: group.alles_ausschalten      
          - service: input_boolean.turn_on
            entity_id: input_boolean.geraete_einschalten
          - service: mqtt.publish
            data:
               topic: 'handy/location'
               payload: not_home
               retain: true              
          - service: device_tracker.see
            data:
              dev_id: 'handy_gps'
              location_name: not_home
              source_type: gps
              gps_accuracy: 20
              battery: "{{ states('sensor.handy_battery_level') | int(0) }}"
              gps: 
                - !secret home_latitude
                - !secret home_longitude        
          - if: "{{ is_state('media_player.uberall', 'playing') }}"
            then:
              - service: media_player.media_pause
                entity_id: media_player.uberall                                   
          - service: alarmo.arm
            data:
              entity_id: alarm_control_panel.alarmo
          - choose:
              - conditions:          
                  - "{{ is_state('calendar.urlaub', 'on') }}"                    
                  - condition: template
                    value_template: >-
                      {% set urlaubStart = (as_timestamp(state_attr('calendar.urlaub', 'start_time'), None) | timestamp_custom('%d', True)) | int(0) %}
                      {% set urlaubEnde = (as_timestamp(state_attr('calendar.urlaub', 'end_time'), None) | timestamp_custom('%d', True)) | int(0) %}

                      {{ urlaubStart != urlaubEnde }}      
                sequence:
                  - service: switch.turn_on
                    entity_id: switch.abwesenheit_urlaub
                  
automation:
  - alias: "Alles ausschalten"
    id: alles_ausschalten
    trigger:
      - platform: tag
        tag_id: tag_flur
      - id: schalter_flur
        platform: event
        event_type: zha_event
        event_data:
          device_ieee: 00:15:8d:00:01:c3:08:67
          command: click
          args:
            click_type: double           
    condition: 
      - condition: state
        entity_id: person.dennis
        state: 'home'
    action:           
      - service: script.alles_ausschalten   
  
  - alias: "Unterwegs - Alarm nicht eingeschaltet"
    id: "unterwegs_alarm_nicht_eingeschaltet"
    trigger:
      - platform: state
        entity_id: person.dennis
        to: 'not_home'
        for:
          minutes: 15
      - platform: state
        entity_id: person.natalie
        to: 'not_home'
        for:
          minutes: 15          
    condition:
      - "{{ not is_state('alarm_control_panel.alarmo', 'armed_away') }}"   
      - "{{ is_state('binary_sensor.erwachsene_zu_hause', 'off') }}"
    action:
      - service: notify.telegram
        data:
          title: "Alarm nicht eingeschaltet"
          message: "Es ist keiner zu Hause und der Alarm ist nicht eingeschaltet."
          data:
            inline_keyboard:
              - 'Alarm einschalten:/alarm_einschalten'
              
  - alias: "Unterwegs - Geräte eingeschaltet"
    id: "unterwegs_geraete_eingeschaltet"
    trigger:
      - platform: state
        entity_id: person.dennis
        to: 'not_home'
        for:
          minutes: 30
    condition:
      - "{{ is_state('binary_sensor.erwachsene_zu_hause', 'off') }}"     
      - condition: template
        value_template: >-
          {% set ns = namespace(found=0) -%}
          {% set computerEingeschaltet = is_state('switch.computer', 'on') %}
          {% set computerEingeschaltetLassen = is_state('input_select.computer_ausschalten', 'Nichts unternehmen') %}
          {% set computerArbeitEingeschaltet = is_state('switch.computer_arbeit', 'on') %}
          {% set computerArbeitEingeschaltetLassen = is_state('input_select.computer_arbeit_ausschalten', 'Nichts unternehmen') %}

          {% for entity_id in state_attr('group.alles_ausschalten', 'entity_id') -%}
            {% set parts = entity_id.split('.') -%}
            {% if (states(entity_id) == 'on') -%}
              {% set ns.found = ns.found + 1 -%}
            {% endif -%}
          {% endfor -%}
          
          {% if ns.found > 2 %}
            True
          {% elif ns.found == 0 %}            
            False
          {% elif ns.found == 1 
            and computerEingeschaltet == True 
            and computerEingeschaltetLassen == True
          %}
            False
          {% elif ns.found == 1 
            and computerArbeitEingeschaltet == True 
            and computerArbeitEingeschaltetLassen == True
          %}
            False   
          {% elif ns.found == 2 
            and computerEingeschaltet == True 
            and computerEingeschaltetLassen == True 
            and computerArbeitEingeschaltet == True 
            and computerArbeitEingeschaltetLassen == True
          %}
            False                
          {% else %}
            True
          {% endif %}            
    action:
      - service: notify.telegram
        data:
          title: "Es sind noch Geräte eingeschaltet"
          message: >-
            {%- set comma = joiner(",") -%}
            {%- set deviceFound = false -%}

            {% for entity_id in state_attr('group.alles_ausschalten', 'entity_id') -%}              
              {%- if states(entity_id) == 'on' -%}
                {%- set deviceFound = true -%}
                {{ comma() }} {{ state_attr(entity_id, 'friendly_name') }}
              {%- endif -%}
            {%- endfor -%}

            {%- if deviceFound == true -%}
              Alle Geräte sind ausgeschaltet.
            {%- endif -%}
          data:
            inline_keyboard:
              - 'Alles Ausschalten:/alles_ausschalten'

  - alias: "Telegram - Unterwegs Status"
    id: "telegram_unterwegs_status"
    trigger:
      platform: event
      event_type: telegram_command
      event_data:
        command: '/status'
    action:
      - service: notify.telegram
        data:
          title: "Status Home Assistant"
          message: >-
            {% if states('sensor.laufzeit_stunden') %}
              Das System ist seit {{ states('sensor.laufzeit_stunden') }} Stunden online.
            {% endif %}

            {% if is_state('group.alles_ausschalten', 'off') -%}
              {{ 'Alle Geräte sind ausgeschaltet.' }}
            {% endif %}

            {%- if is_state('alarm_control_panel.alarmo', 'armed_away') -%}
              {{ 'Der Alarm ist eingeschaltet.' }}
            {%- elif not is_state('vacuum.staubsauger', 'docked') -%}
              {{ 'Die Wohnung wird gerade gesaugt. Der Alarm wird danach wieder eingeschaltet.' }}
            {% endif %}                             
      - choose:
          - conditions:
              - "{{ is_state('group.alles_ausschalten', 'on') }}"
              - "{{ is_state('person.dennis', 'not_home') }}"
            sequence:                       
              - service: notify.telegram
                data:
                  message: "Es sind noch Geräte eingeschaltet."
                  data:
                    inline_keyboard:
                      - 'Geräte anzeigen:/geraete'
      - choose:
          - conditions:
              - "{{ not is_state('alarm_control_panel.alarmo', 'armed_away') }}"
              - "{{ is_state('binary_sensor.erwachsene_zu_hause', 'off') }}"
              - "{{ is_state('vacuum.staubsauger', 'docked') }}"
            sequence:                       
              - service: notify.telegram
                data:
                  message: "Der Alarm ist nicht eingeschaltet."
                  data:
                    inline_keyboard:
                      - 'Alarm einschalten:/alarm_einschalten'
          
  - alias: "Telegram - Eingeschaltete Geräte"
    id: "telegram_eingeschaltete_geraete"
    trigger:
      platform: event
      event_type: telegram_callback
      event_data:
        data: '/geraete'
    action:
      - service: telegram_bot.edit_replymarkup
        data:
          message_id: 'last'
          chat_id: '{{ trigger.event.data.user_id }}'
          inline_keyboard: []
      - service: telegram_bot.send_message
        data:
          target: '{{ trigger.event.data.chat_id }}'
          message: >-
            {% set eingeschalteteGeraete = expand('group.alles_ausschalten')
              | selectattr('state','eq','on') 
              | map(attribute='name')
              | list %}

            {% set qty = eingeschalteteGeraete | length %}  
            {% set p1 = 'Das folgende' if qty == 1 else 'Die folgenden' %}
            {% set p2 = 'Gerät' if qty == 1 else 'Geräte' %}
            {% set p3 = 'ist' if qty == 1 else 'sind' %}
            {% set geraeteMessage = '' if qty == 0 else '{} {} {} eingeschaltet: {}.'.format(p1, p2, p3, eingeschalteteGeraete | join(', ')) %}

            {%- if qty == 0 -%}
              Alle Geräte sind ausgeschaltet.
            {%- else -%}
              {{ geraeteMessage }}
            {%- endif -%}
          inline_keyboard:
            - 'Alles Ausschalten:/alles_ausschalten'
          
  - alias: "Telegram - Alles ausschalten"
    id: "telegram_alles_ausschalten"
    trigger:
      - platform: event
        event_type: telegram_callback
        event_data:
          data: '/alles_ausschalten'
    action:
      - service: script.alles_ausschalten
      - service: telegram_bot.edit_replymarkup
        data:
          message_id: 'last'
          chat_id: '{{ trigger.event.data.user_id }}'
          inline_keyboard: []
      - service: telegram_bot.send_message
        data:
          target: '{{ trigger.event.data.chat_id }}'
          message: "Alle Geräte werden ausgeschaltet."

  - alias: "Telegram - Alarm einschalten"
    id: "telegram_alarm_einschalten"
    trigger:
      platform: event
      event_type: telegram_callback
      event_data:
        data: '/alarm_einschalten'
    action:
      - service: telegram_bot.edit_replymarkup
        data:
          message_id: 'last'
          chat_id: '{{ trigger.event.data.user_id }}'
          inline_keyboard: []
      - service: telegram_bot.send_message
        data:
          target: '{{ trigger.event.data.chat_id }}'
          message: 'Der Alarm wird eingeschaltet'
      - service: alarmo.arm
        data:
          entity_id: alarm_control_panel.alarmo
          skip_delay: true
          force: true
          
  - alias: "Telegram - Aufenthaltsort"
    id: "telegram_aufenthaltsort"
    trigger:
      - platform: event
        event_type: telegram_command
        event_data:
          command: '/ort'
    action:
      - service: notify.telegram
        data:
          title: "Aufenthaltsort"
          message: >-
            {% if is_state('sensor.aufenthaltsort', 'Home') %}
              Zu Hause
            {% else %}
              {{ state_attr('sensor.aufenthaltsort', 'street') ~ ' ' ~ state_attr('sensor.aufenthaltsort', 'street_number') -}}
              {{ ', ' ~ state_attr('sensor.aufenthaltsort', 'city') }}
              {%- if states('sensor.zu_hause_nachste_entfernung') | int(0) > 0 -%} 
                {{ ' (' ~ (states('sensor.zu_hause_nachste_entfernung') | int(0) / 1000) | round ~ 'km von zu Hause)' }}
              {% endif %}              
            {% endif %}          
               
  - alias: "Telegram - Lichtsimulation einschalten"
    id: "telegram_lichsimulation_einschalten"
    trigger:
      - platform: event
        event_type: telegram_command
        event_data:
          command: '/licht_ein'
    action:
      - service: switch.turn_on
        entity_id: switch.abwesenheit_urlaub
      - service: telegram_bot.send_message
        data:
          target: '{{ trigger.event.data.chat_id }}'
          message: "Die Lichtsimulation wird eingeschaltet."
               
  - alias: "Telegram - Lichtsimulation ausschalten"
    id: "telegram_lichsimulation_ausschalten"
    trigger:
      - platform: event
        event_type: telegram_command
        event_data:
          command: '/licht_aus'
    action:
      - service: switch.turn_off
        entity_id: switch.abwesenheit_urlaub
      - service: telegram_bot.send_message
        data:
          target: '{{ trigger.event.data.chat_id }}'
          message: "Die Lichtsimulation wird ausgeschaltet."         