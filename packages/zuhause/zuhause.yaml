input_boolean:
  zu_hause_aktiviert:
    name: "Zu Hause aktiviert"

input_select:
  zu_hause_begruessung:
    name: Begrüßung
    options:
      - Deaktiviert
      - Tür
      - Handy
      
shell_command:
  send_position: "curl -X POST '{{ url }}?lat={{ state_attr('zone.home', 'latitude') }}&lon={{ state_attr('zone.home', 'longitude') }}&timestamp={{ as_timestamp(now(), None) | int }}'"

binary_sensor:
  - platform: template
    sensors:
      zu_hause:
        friendly_name: "zu Hause"
        device_class: presence
        value_template: >-
          {% if is_state('device_tracker.handyping', 'home') or is_state('device_tracker.handymqtt', 'home') %}
            true
          {% else %}
            false
          {% endif %}
script:
  zu_hause:
    alias: "Zu Hause"
    sequence:
      - service: switch.turn_on
        entity_id: switch.computer, switch.watchtv_wohnzimmer              
      - choose:
          - conditions:
              - condition: state
                entity_id: binary_sensor.sonne_tagsueber
                state: 'off'
            sequence:
              - service: light.turn_on
                entity_id: light.wohnzimmer_schrank           
      - service: script.wohnung_radios_einschalten               

  zu_hause_home_office:
    alias: "Zu Hause - Home Office"
    sequence:      
      - service: switch.turn_on
        entity_id: switch.arbeitszimmer_radio, switch.pc_arbeit, switch.arbeitszimmer_monitore
      - choose:
          - conditions:
              - condition: or
                conditions:
                  - condition: state
                    entity_id: binary_sensor.arbeitstag_morgen
                    state: 'off'
                  - condition: state
                    entity_id: binary_sensor.urlaub_morgen
                    state: 'on'                       
            sequence:
              - service: input_select.select_option
                data:
                  entity_id: input_select.computer_arbeit_ausschalten  
                  option: 'Herunterfahren'     
        default:
          - service: input_select.select_option
            data:
              entity_id: input_select.computer_arbeit_ausschalten  
              option: 'Ruhezustand'
      - service: script.wohnung_radios_einschalten   
             
  zu_hause_abends:
    alias: "Zu Hause - abends"
    sequence:
      - service: light.turn_on
        entity_id: light.wohnzimmer_couch, light.wohnzimmer_strahler
      - service: switch.turn_on
        entity_id: switch.computer, switch.watchtv_wohnzimmer     
      - service: switch.turn_on
        entity_id: switch.badezimmer_radio

  zu_hause_standort:
    alias: "Zu Hause - Standort"
    sequence:
      - service: mqtt.publish
        data:
           topic: 'location/handy'
           payload: 'home'
           retain: true
      - service: shell_command.send_position
        data:
          url: !secret phonetracker_send_position_url
      - service: device_tracker.see
        data:
          dev_id: handygps
          location_name: 'home'
          gps: ["{{ state_attr('zone.home', 'latitude') }}", "{{ state_attr('zone.home', 'longitude') }}"]
        
  zu_hause_begruessung:
    alias: "Zu Hause - Begrüßung"
    sequence:
      - delay: '00:00:20'
      - service: !secret tts_service
        data:
          message: >-
            "Hallo Dennis. Willkommen zu Hause."
            
            {% if is_state('counter.behaelter_leeren', '0') %}
              "Der Staubsaugerbehälter muss geleert werden."
            {% endif %}

            {% set count_heimnetz_entities = states('sensor.heimnetz_offline') | int -%}
            
            {% if count_heimnetz_entities > 0 %}
              {{ "Die folgenden Geräte sind offline." if count_heimnetz_entities > 1 else "Das folgende Gerät ist offline."}}

              {% set heimnetzOffline = expand('group.heimnetz')
                | selectattr('state','eq','not_home') 
                | map(attribute='name')
                | list %}              

              {{ heimnetzOffline | join(', ') }}                            
            {% endif %}

            {% set min_battery_level = states('input_number.batteriestand_warnlevel') | int -%}   
            {% set handyBatteriestand = states('sensor.handy_batterie') | int %}
            {% set handyWirdAufgeladen = state_attr('sensor.handy_batterie', 'is_charging') == True %}
            
            {% if not handyWirdAufgeladen and handyBatteriestand <= min_battery_level %}
              Das Handy muss aufgeladen werden.
            {% endif %}    
                    
            {% set count_battery_entities = states('sensor.batteriestand_niedrig') | int -%}
                                 
            {% if count_battery_entities > 0 %}
              {{ "Der Batteriestand der folgenden Geräte ist niedrig." if count_battery_entities > 1 else "Der Batteriestand des folgenden Gerätes ist niedrig."}}
              
              {% set entities = expand('group.batteriestand') %}
             
              {% for x in entities if x.state|int < min_battery_level %}
                {%- if not loop.first %}, {% endif -%}
                {{- x.name -}}
              {% endfor %}       
            {% endif %}             
            
            {% set tablets = expand('group.tablets') %}
            {% set ns = namespace(found=0) -%}

            {% for x in tablets if x.state|int > 99 and x.attributes.is_charging == True %}
              {% set ns.found = ns.found + 1 -%}
            {% endfor %}

            {% if (ns.found | int) == 1 %}
              Das folgende Gerät wurde vollständig aufgeladen.
            {% elif (ns.found | int) > 1 %}
              Die folgenden Geräte wurden vollständig aufgeladen.
            {% endif %}

            {% for x in tablets if x.state|int > 99 and x.attributes.is_charging == True %}
              {%- if not loop.first %}, {% endif -%}
              {{- x.name -}}
            {% endfor %}            
                              
  zu_hause_begruessung_abends:
      alias: "Zu Hause - Begrüßung abends"
      sequence:
        - delay: '00:00:20'
        - service: !secret tts_service
          data:
            message: "Hallo Dennis. Willkommen zu Hause."
            
automation:
  - alias: "Zu Hause"
    id: "zu_hause"
    trigger:
      - id: zu_hause
        platform: state
        entity_id: binary_sensor.zu_hause
        to: 'on'
      - id: schalter_flur
        platform: event
        event_type: zha_event
        event_data:
          device_ieee: 00:15:8d:00:01:c3:08:67
          command: click
          args:
            click_type: double              
    condition:
      - condition: state
        entity_id: input_boolean.zu_hause_aktiviert
        state: 'off'         
      - condition: template
        value_template: "{{ is_state('binary_sensor.zu_hause', 'off') if trigger.id == 'schalter_flur' else True }}"
      - condition: template
        value_template: >-
          {% set now = as_timestamp(now(), None) | int %}
          {% set last = as_timestamp(state_attr("script.alles_ausschalten_nfc", "last_triggered"), None) | int %}
          {% set diff = ((now - last) / 60) | int %}

          {{ diff >= 10 }}        
    action:     
      - service: input_boolean.turn_on
        entity_id: input_boolean.zu_hause_aktiviert     
      - choose:              
        - conditions:
            - condition: state
              entity_id: input_select.zu_hause_begruessung
              state: 'Deaktiviert'       
              for: '00:01:00'
          sequence:
            - service: input_select.select_option
              entity_id: input_select.zu_hause_begruessung
              data:                  
                option: 'Handy'        
      - service: script.zu_hause_standort
      - service: alarm_control_panel.alarm_disarm
        entity_id: alarm_control_panel.alarm
      - service: switch.turn_off
        entity_id: switch.kamera_wohnzimmer    
      - service: input_select.select_option
        data:
          entity_id: input_select.computer_ausschalten  
          option: 'Herunterfahren'        
      - choose:
          - conditions:
              - condition: state
                entity_id: binary_sensor.home_office_aktiv
                state: 'off'          
              - condition: time
                after: '08:00'
                before: '20:00'
            sequence:          
              - service: script.zu_hause
          - conditions:
              - condition: state
                entity_id: binary_sensor.home_office_aktiv
                state: 'on'          
            sequence:              
              - service: script.zu_hause_home_office
          - conditions:
              - condition: time
                after: '20:00'
                before: '23:30'
            sequence:           
              - service: script.zu_hause_abends      
      - choose:              
        - conditions:
            - condition: state
              entity_id: switch.presence_simulation
              state: 'on'
          sequence:
            - service: presence_simulation.stop
                
  - alias: "Zu Hause - Tür geöffnet"
    id: "zu_hause_tuer_geoeffnet"
    trigger:
      - platform: state
        entity_id: binary_sensor.tuersensor
        to: 'on'
    condition:    
      - condition: state
        entity_id: input_select.zu_hause_begruessung
        state: 'Deaktiviert'        
      - condition: state
        entity_id: input_boolean.zu_hause_aktiviert
        state: 'off'        
    action:    
      - service: input_select.select_option            
        entity_id: input_select.zu_hause_begruessung
        data:
          option: 'Tür'
        
  - alias: "Zu Hause - Begrüßung"
    id: "zu_hause_begruessung"
    trigger:
      - platform: state
        entity_id: binary_sensor.tuersensor
        to: 'off' 
      - platform: state
        entity_id: binary_sensor.zu_hause
        to: 'on'               
    condition:  
      - "{{ not is_state('input_select.zu_hause_begruessung', 'Deaktiviert') }}"   
      - condition: or
        conditions:
          - "{{ trigger.entity_id == 'binary_sensor.zu_hause' and is_state('input_select.zu_hause_begruessung', 'Tür') }}"     
          - "{{ trigger.entity_id == 'binary_sensor.tuersensor' and is_state('input_select.zu_hause_begruessung', 'Handy') }}"      
    action:      
      - service: input_select.select_option
        entity_id: input_select.zu_hause_begruessung
        data:
          option: 'Deaktiviert'         
      - choose:
          - conditions:
              - condition: time        
                after: '23:00'   
            sequence:
              - service: script.zu_hause_begruessung_abends
        default:
          - service: script.zu_hause_begruessung

homeassistant:
  customize:
    sensor.aufenthaltsort_handy:
      friendly_name: Aufenthaltsort
      icon: mdi:google-maps
    proximity.home:
      friendly_name: Entfernung