input_number:
  wecker_verzoegerung:
    name: Verzögerung
    min: 0   
    max: 30
    step: 5
    icon: mdi:timer-sand

  wecker_vorlauf:
    name: Vorlauf
    min: 0    
    max: 30
    step: 5
    icon: mdi:timer-sand

input_boolean:
  wecker_aktiv:
    name: Wecker aktiv    
    icon: mdi:alarm-multiple

  wecker_erinnerung_morgen:
    name: Erinnerung morgen    
    
  wecker_zeit_geaendert:
    name: Zeit geändert     
    
  wecker_geraete_einschalten:
    name: Geräte einschalten
    
  aufstehen_begruessung:
    name: Aufstehen Begrüßung     
    
binary_sensor:
  - platform: template
    sensors:
      wecker_aktiv:
        friendly_name: Wecker aktiv
        icon_template: mdi:alarm-multiple
        device_class: sound
        value_template: "{{ True if is_state('input_boolean.wecker_aktiv', 'on') else False }}"

script:
  aufstehen_begruessung:
    alias: "Aufstehen - Begrüßung"
    sequence:      
      - service: !secret tts_service
        data:          
          echo: badezimmer
          message: >-
            {%- set word_for_and = 'und' %}
            {%- set up_time = as_timestamp(now()) - state_attr('input_datetime.schlafen_uhrzeit', 'timestamp') | int(0) %}

            {%- macro phrase(name, plural_name, divisor, mod=None) %}
              {%- set value = ((up_time // divisor) % (mod if mod else divisor)) | int(0) %}
              {%- set name = plural_name if value > 1 else name %}
              {{- '{} {}'.format(value, name) if value | int(0) > 0 else '' }}
            {%- endmacro %}

            {%- set values = [ 
                       phrase('Woche', 'Wochen', 60*60*24*7), 
                       phrase('Tag', 'Tage', 60*60*24, 7),
                       phrase('Stunde', 'Stunden', 60*60, 24),
                       phrase('Minute', 'Minuten', 60)
                   ] | select('!=','') | list %}

            {% set schlafenSatz = values[:-1] | join(', ') ~ ' ' ~ word_for_and ~ ' ' ~ values[-1] if values | length > 1 else values | first %}
            {% set uhrzeitSatz = as_timestamp(now()) | timestamp_custom('%H:%M') %}         
             
            {{ 'Guten Morgen. Es ist ' ~ uhrzeitSatz ~ ' Uhr. Du hast ' ~ schlafenSatz ~ ' geschlafen.' }}      
                                                                     
            {% set tageBisGeburtstag = states('sensor.geburtstag_natalie') | int(0) %}
            {% set tagGeburtstag = (as_timestamp(state_attr('sensor.geburtstag_natalie', 'date')) | timestamp_custom("%d", True)) | int(0) %}
            {% set tagHeute = (as_timestamp(now()) | timestamp_custom("%d", True)) | int(0) %}
            {% set geburtstagSatz = '' %}
            
            {% if tageBisGeburtstag == 0 %}
              {% set geburtstagSatz = 'heute' %}
            {% elif tageBisGeburtstag == 1 %}
              {% set geburtstagSatz = 'morgen' %}
            {% elif tageBisGeburtstag < 7 %}
              {% set geburtstagSatz = 'in ' ~ tageBisGeburtstag ~ ' Tagen' %}
            {% elif tageBisGeburtstag < 30 and tageBisGeburtstag % 7 == 0 %}
              {% set geburtstagSatz = ('in einer Woche' if (tageBisGeburtstag == 7) else 'in ' ~ (tageBisGeburtstag / 7 ) | int(0) ~ ' Wochen') %}
            {% elif tageBisGeburtstag >= 30 and tagGeburtstag == tagHeute %}
              {% set monatGeburtstag = (as_timestamp(state_attr('sensor.geburtstag_natalie', 'date')) | timestamp_custom("%m", True)) | int(0) %}
              {% set monatHeute = (as_timestamp(now()) | timestamp_custom("%m", True)) | int(0) %}
              {% set monateDifferenz = (monatGeburtstag - monatHeute) %}

              {% set geburtstagSatz = ('in einem Monat' if (monateDifferenz == 1) else 'in ' ~ monateDifferenz ~ ' Monaten') %}
            {% endif %}                                   
                        
            {% if geburtstagSatz %}
              {{ 'Natalie hat ' ~ geburtstagSatz ~ ' Geburtstag.' }}
            {% endif %}
                                             
            {% set bueroHeute = is_state('binary_sensor.buero_heute', 'on') %}           
            {% if bueroHeute %}
              {% set temperatur = states('sensor.parkplatz_temperatur') |int %}
              {{ 'Die Temperatur beträgt aktuell ' ~ temperatur ~ ' Grad.' }}
            {% endif %}           
            
            {% set count_mails = states('sensor.ungelesene_mails') | int(0) -%}            
            {% if count_mails > 0 %}
              {{ "Du hast " ~ ("eine" if count_mails == 1 else count_mails) ~ " ungelesene " ~ ("Mail" if count_mails == 1 else "Mails") }}
            {% endif %}
            
            {% set kalenderEdg = expand('group.kalender_edg')
                | selectattr('state','eq','on') 
                | map(attribute='name')
                | list %}              

            {% for edgHeute in kalenderEdg  %}
              Die {{ edgHeute }}-Tonne wird heute geleert.
            {% endfor %}   
            
            {% set count_flowers = states('sensor.pflanzen_giessen') | int(0) -%}            
            {% if count_flowers > 0 %}
              {% set flower_warn_level = states('input_number.pflanzen_warnlevel') | int(0) -%}    
              
              {{ "Die folgenden Pflanzen müssen gegossen werden." if count_flowers > 1 else "Die folgende Pflanze muss gegossen werden."}}

              {% for x in expand('group.pflanzen') if x.state|int(100) < flower_warn_level %}
                {%- if not loop.first %}, {% endif -%}
                {{- x.name.split(' ')[0] -}}
              {% endfor %}                       
            {% endif %}
                
            {% set count_heimnetz_entities = states('sensor.netzwerkgerate_offline') | int(0) -%}            
            {% if count_heimnetz_entities > 0 %}
              {{ "Die folgenden Geräte sind offline." if count_heimnetz_entities > 1 else "Das folgende Gerät ist offline."}}

              {{ state_attr('sensor.netzwerkgerate_offline', 'geraete') | join(', ') }}                         
            {% endif %}

            {% set count_steckdosen_offline = states('sensor.steckdosen_offline') | int(0) -%}            
            {% if count_steckdosen_offline > 0 %}
              {{ "Die folgenden Geräte sind nicht verfügbar." if count_steckdosen_offline > 1 else "Das folgende Gerät ist nicht verfügbar."}}

              {{ state_attr('sensor.steckdosen_offline', 'geraete') | join(', ') }}                         
            {% endif %}
            
            {% set min_battery_level = states('input_number.batteriestand_warnlevel') | int(0) -%}                       
            {% set count_battery_entities = states('sensor.batteriestand_niedrig') | int(0) -%}
                                 
            {% if count_battery_entities > 0 %}
              {{ "Der Batteriestand der folgenden Geräte ist niedrig." if count_battery_entities > 1 else "Der Batteriestand des folgenden Gerätes ist niedrig."}}
              
              {% set entities = expand('group.batteriestand') %}
             
              {% for x in entities if x.state|int(100) <= min_battery_level %}
                {%- if not loop.first %}, {% endif -%}
                {{- x.name.split(" ")[:-1] | join(' ') -}}
              {% endfor %}       
            {% endif %}              
            
automation:
  - alias: "Wecker - Starten"
    id: "wecker_starten"
    trigger:
      - platform: template
        value_template: >-
          {% set jetzt = as_timestamp(states('sensor.date_time').replace(',',''), None) | int(0) %}  
          {% set vorlauf = (states('input_number.wecker_vorlauf' ) | int(0)) * 60  %}
          {% set wecker = as_timestamp(states('sensor.tablet_schlafzimmer_next_alarm'), None) | int(0) %}
          
          {{ wecker == jetzt + vorlauf }}
    variables:
      radioBalkonEinschalten: >-
        {% set istSamstag = now().isoweekday() == 6 %}
        {% set istArbeitstag =  is_state('binary_sensor.arbeitstag', 'on') %}
        {% set istUrlaub = is_state('calendar.urlaub', 'on') %}
        {% set istKrankheit = is_state('calendar.arbeit_krank', 'on') %}
        
        {{ istSamstag or (istArbeitstag and (istUrlaub or istKrankheit)) }}              
    condition:
      - condition: state
        entity_id: input_boolean.wecker_aktiv
        state: 'off'        
      - condition: state
        entity_id: binary_sensor.schlafen_aktiv
        state: 'on'
    action:
      - service: input_boolean.turn_on
        entity_id: input_boolean.wecker_aktiv         
      - if: "{{ states('sensor.balkon_helligkeit_mittelwert') | int(0) < 50 }}"
        then:
          - service: light.turn_on
            data:
              entity_id: light.bett      
              effect: colorloop    
      - condition: "{{ is_state('input_boolean.wecker_geraete_einschalten', 'on') }}"
      - if: "{{ is_state('input_boolean.radio_alexa', 'on') }}"
        then:            
          - service: media_player.play_media
            data:
              entity_id: "media_player.echo_schlafzimmer"
              media_content_id: "Südtirol Eins im Schlafzimmer"
              media_content_type: "TUNEIN"      
        else:
          - service: switch.turn_on           
            entity_id: switch.schlafzimmer_radio             
          - wait_template: "{{ not is_state('media_player.radio_schlafzimmer', 'unavailable') }}"  
          - service: media_player.media_play
            entity_id: media_player.radio_schlafzimmer                        
          - delay: "00:{{ states('input_number.wecker_verzoegerung') | int }}:00" 
          - service: script.radios_einschalten
            data:
              radioBalkon: "{{ radioBalkonEinschalten }}"

  - alias: "Wecker - Zeit geändert"
    id: "wecker_zeit_geaendert"
    trigger: 
      - platform: state
        entity_id: sensor.tablet_schlafzimmer_next_alarm
    condition:
      - condition: state
        entity_id: input_boolean.wecker_aktiv
        state: 'on'        
      - condition: state
        entity_id: binary_sensor.schlafen_aktiv
        state: 'on'    
    action:
      - service: input_boolean.turn_on
        entity_id: input_boolean.wecker_zeit_geaendert              
          
  - alias: "Aufstehen"
    id: "aufstehen"
    trigger:
      - id: bewegungsmelder
        platform: state
        entity_id: binary_sensor.bewegungsmelder_kueche
        to: 'on'
      - id: bewegungsmelder
        platform: state
        entity_id: binary_sensor.bewegungsmelder_flur_vorne
        to: 'on'
      - id: bewegungsmelder
        platform: state
        entity_id: binary_sensor.bewegungsmelder_wohnzimmer
        to: 'on'
      - id: schalter_badezimmer
        platform: event
        event_type: zha_event
        event_data:
          device_ieee: 00:15:8d:00:02:e9:58:3a
          command: click
          args:
            click_type: single        
    variables:
      radioBalkonEinschalten: >-
        {% set istSamstag = now().isoweekday() == 6 %}
        {% set istArbeitstag =  is_state('binary_sensor.arbeitstag', 'on') %}
        {% set istUrlaub = is_state('calendar.urlaub', 'on') %}
        {% set istKrankheit = is_state('calendar.arbeit_krank', 'on') %}
        
        {{ istSamstag or (istArbeitstag and (istUrlaub or istKrankheit)) }}        
    condition:
      - "{{ trigger.id == 'schalter_badezimmer' or is_state('binary_sensor.allein_zu_hause', 'on') }}"
      - "{{ is_state('binary_sensor.schlafen_aktiv', 'on') }}"
      - condition: or
        conditions:
          - "{{ is_state('binary_sensor.wecker_aktiv', 'on') }}"
          - "{{ trigger.id == 'schalter_badezimmer' }}"
          - condition: and
            conditions:
              - "{{ is_state('binary_sensor.nachts', 'off') }}"
              - condition: template                   
                value_template: >-
                  {% set alarmSensor = states('sensor.tablet_schlafzimmer_next_alarm') %}
                  {% set alarmDay = as_timestamp(alarmSensor, 0) | timestamp_custom('%d', 0) %}
                  {% set now = as_timestamp(now()) | timestamp_custom('%d', 0) %}

                  {{ alarmSensor == 'unknown' or alarmDay != now }}              
    action:
      - service: input_boolean.turn_off
        entity_id: input_boolean.schlafen_aktiv, input_boolean.wecker_aktiv, input_boolean.wecker_erinnerung_morgen, input_boolean.wecker_zeit_geaendert
      - service: input_boolean.turn_on
        entity_id: input_boolean.schlafen_fernseher_einschalten    
      - service: light.turn_off
        entity_id: light.bett
      - service: alarmo.disarm
        data:
          entity_id: alarm_control_panel.alarmo       
      - service: switch.turn_on
        entity_id: switch.computer, switch.arbeitszimmer_monitore                
      - if: "{{ trigger.id != 'schalter_badezimmer' }}"
        then:             
          - wait_for_trigger:
            - platform: state
              entity_id: binary_sensor.bewegungsmelder_badezimmer
              to: 'on'                       
          - service: script.aufstehen_begruessung               
        else:          
          - service: script.aufstehen_begruessung                   
      - if: "{{ is_state('input_boolean.wecker_geraete_einschalten', 'on') }}"
        then:             
          - if: "{{ states('sensor.radios_eingeschaltet') | int(0) == 1 and is_state('switch.schlafzimmer_radio', 'on') }}"
            then:             
              - service: media_player.media_pause
                entity_id: media_player.radio_schlafzimmer             
              - wait_template: "{{ is_state('media_player.radio_schlafzimmer', 'paused') }}"            
              - service: switch.turn_off
                entity_id: switch.schlafzimmer_radio    
              - service: script.radios_einschalten       
                data:
                  radioBalkon: "{{ radioBalkonEinschalten }}"            
            else:
              - service: switch.turn_off
                entity_id: switch.schlafzimmer_radio             
              - service: script.radios_einschalten       
                data:
                  radioBalkon: "{{ radioBalkonEinschalten }}"                    
        else:          
          - service: input_boolean.turn_on
            entity_id: input_boolean.wecker_geraete_einschalten          
