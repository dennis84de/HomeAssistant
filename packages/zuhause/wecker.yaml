input_datetime:
  wecker:
    name: Wecker
    has_date: true
    has_time: true

input_number:
  alarmdelay:
    name: Verzögerung
    min: 0   
    max: 30
    step: 5
    icon: mdi:timer-sand

  alarmadvance:
    name: Vorlauf
    min: 0    
    max: 30
    step: 5
    icon: mdi:timer-sand

input_boolean:
  alarm_aktiv:
    name: Wecker aktiv
    initial: off
    icon: mdi:alarm-multiple

  wecker_erinnerung_morgen:
    name: Erinnerung morgen
    initial: off
    
  wecker_zeit_geaendert:
    name: Zeit geändert
    initial: off    

input_text:
  alarm_standard_office:
    name: Wecker Büro
    initial: '05:15'
  alarm_standard_homeoffice:
    name: Wecker Home Office 
    initial: '06:00'    
    
binary_sensor:
  - platform: template
    sensors:
      alarm_aktiv:
        friendly_name: Alarm aktiv
        icon_template: mdi:alarm-multiple
        device_class: sound
        value_template: "{{ True if is_state('input_boolean.alarm_aktiv', 'on') else False }}"

sensor:     
  - platform: template
    sensors:
      wecker_startzeit:
        friendly_name: Wecker Startzeit
        icon_template: mdi:alarm-bell
        value_template: "{{ '%02d' % (state_attr('input_datetime.wecker', 'hour') | int) ~ ':' ~ '%02d' % (state_attr('input_datetime.wecker', 'minute') | int) }}"
        unit_of_measurement: 'Uhr'
        
      wecker_startdatum:
        friendly_name: Wecker Startdatum
        icon_template: mdi:calendar-clock
        value_template: >-
          {% set alarmState = state_attr('input_datetime.wecker', 'timestamp') %}
          
          {% if alarmState <= 1 %}
            -
          {% else %}
            {% set day = state_attr('input_datetime.wecker', 'day') %}
            {% set month = state_attr('input_datetime.wecker', 'month') %}
            {% set year = state_attr('input_datetime.wecker', 'year') %}

            {% set alarmDay = "%0.02d-%0.02d-%0.02d" | format(year | int, month | int, day | int) %}
            {% set weekday = as_timestamp(alarmDay) | timestamp_custom("%w", True) | int %}

            {{ ['Montag','Dienstag','Mittwoch','Donnerstag','Freitag','Samstag','Sonntag'][weekday-1] }}, {{ as_timestamp(alarmDay) | timestamp_custom("%d.%m.%Y", True) | string }}          
          {% endif %}

automation:
  - alias: "Wecker starten"
    trigger:
      - platform: template
        value_template: >-
          {% set jetzt = as_timestamp(states('sensor.date_time').replace(',','')) | int %}         
          {% set vorlauf = (states('input_number.alarmadvance' ) | int) * 60  %}        
          {% set wecker = state_attr('input_datetime.wecker', 'timestamp') | int %}
          
          {{ jetzt + vorlauf == wecker }}
    condition:
      condition: and
      conditions:
        - condition: numeric_state
          entity_id: sensor.laufzeit_minuten
          above: 5
        - condition: state
          entity_id: input_boolean.alarm_aktiv
          state: 'off'          
    action:
      - service: input_boolean.turn_on
        entity_id: input_boolean.alarm_aktiv  
      - service: light.turn_on
        data:
          entity_id: light.bett
          effect: colorloop
      - service: switch.turn_on
        entity_id: switch.schlafzimmer_radio               
      - delay: "00:{{ states('input_number.alarmdelay') | int }}:00" 
      - service: script.wohnung_radios_einschalten

  - alias: "Weckzeit geändert - Schlafen"
    trigger:
      - platform: state
        entity_id: input_datetime.wecker
    condition:
      - condition: state
        entity_id: binary_sensor.alarm_aktiv
        state: 'on'        
      - condition: state
        entity_id: input_boolean.wecker_zeit_geaendert
        state: 'off'
      - condition: template
        value_template: "{{ ((state_attr('input_datetime.wecker', 'timestamp') - as_timestamp(now())) | int) >= 600 }}"
    action:
      - service: input_boolean.turn_on
        entity_id: input_boolean.wecker_zeit_geaendert

  - alias: "Weckzeit geändert - Erinnerung"
    trigger:
      - platform: state
        entity_id: input_boolean.wecker_zeit_geaendert
        to: 'on'
        for:
          minutes: 5
    condition:
      - condition: state
        entity_id: binary_sensor.alarm_aktiv
        state: 'on'
    action:
      - service: !secret tts_service
        data_template:
          echo: "schlafzimmer"
          message: >-
            {% set currentTime = states('sensor.time') %}
            
            {% if '00:00' <= currentTime < '05:00' %}
              {% set message = 'Gute Nacht!' %}
            {% elif '05:00' <= currentTime < '12:00' %}
              {% set message = 'Guten Morgen!.' %}
            {% elif '12:00' <= currentTime < '19:00' %}
              {% set message = 'Guten Tag!' %}
            {% else %}
              {% set message = 'Guten Abend!' %}
            {% endif %}
            
            {{ message }} Der Wecker ist ausgeschaltet. Du solltest jetzt aufstehen!
      - delay: "00:00:10"
      - service: media_player.play_media
        data:
          entity_id: media_player.echo_schlafzimmer
          media_content_type: sound
          media_content_id: amzn_sfx_scifi_alarm_04   

  - alias: "Aufstehen - Schlafen ausschalten"
    trigger:
      - platform: state
        entity_id: binary_sensor.bewegungsmelder_kueche
        to: 'on'
      - platform: state
        entity_id: binary_sensor.bewegungsmelder_flur_vorne
        to: 'on'
      - platform: state
        entity_id: binary_sensor.bewegungsmelder_wohnzimmer
        to: 'on'
    condition:
      - condition: and
        conditions:
          - condition: state
            entity_id: binary_sensor.schlafen_aktiv
            state: 'on'
          - condition: or
            conditions:
              - condition: state
                entity_id: binary_sensor.alarm_aktiv
                state: 'on'
              - condition: and
                conditions:
                  - condition: time
                    after: '06:00'
                    before: '20:00'
                  - condition: template
                    value_template: "{{ False if is_state_attr('input_datetime.wecker', 'day', now().today().day) else True }}"
    action:
      - service: input_boolean.turn_off
        entity_id: input_boolean.schlafen_aktiv, input_boolean.alarm_aktiv, input_boolean.wecker_erinnerung_morgen, input_boolean.wecker_zeit_geaendert
      - service: input_boolean.turn_on
        entity_id: input_boolean.computer_ausschalten, input_boolean.schlafen_fernseher_einschalten
      - service: light.turn_off
        entity_id: light.bett

  - alias: "Aufstehen - Geräte einschalten"
    trigger:
      - platform: state
        entity_id: binary_sensor.schlafen_aktiv
        to: 'off'
    action:
      - service: switch.turn_on
        entity_id: switch.computer        
      - service: script.wohnung_radios_einschalten       
      - choose:
          - conditions:
              - condition: state
                entity_id: calendar.arbeit_buero
                state: 'on'
              - condition: or
                conditions:
                  - condition: numeric_state
                    entity_id: input_text.corona_dortmund_gestern
                    above: input_number.corona_grenzwert       
                  - condition: numeric_state
                    entity_id: input_text.corona_mulheim_gestern
                    above: input_number.corona_grenzwert                        
            sequence:
              - service: !secret tts_service
                data_template:                  
                  message: >-
                    {% set coronaDortmundGestern = states('input_text.corona_dortmund_gestern') | float %}
                    {% set coronaMuelheimGestern = states('input_text.corona_mulheim_gestern') | float %}
                    {% set coronaGrenzwert = states('input_number.corona_grenzwert') | float %}
                    
                    {% if coronaDortmundGestern >= coronaGrenzwert and coronaMuelheimGestern >= coronaGrenzwert %}
                      Die Corona-Werte in Dortmund und Mülheim waren gestern zu hoch.
                    {% elif coronaMuelheimGestern >= coronaGrenzwert %}          
                      Der Corona-Wert in Mülheim war gestern zu hoch.
                    {% elif coronaDortmundGestern >= coronaGrenzwert  %}
                      Der Corona-Wert in Dortmund war gestern zu hoch.
                    {% else %}
                      Die Corona-Werte waren gestern unter dem Grenzwert.
                    {% endif %}