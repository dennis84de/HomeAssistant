input_number:
  wecker_verzoegerung:
    name: Verzögerung
    min: 0   
    max: 30
    step: 5
    icon: mdi:timer-sand

  wecker_vorlauf:
    name: Vorlauf
    min: 0    
    max: 30
    step: 5
    icon: mdi:timer-sand
    
input_datetime:
  alarm_standard_buero:
    name: Wecker Büro
    has_date: false
    has_time: true
    icon: mdi:timer

  alarm_standard_homeoffice:
    name: Wecker Home Office
    has_date: false
    has_time: true
    icon: mdi:timer
    
input_boolean:
  alarm_aktiv:
    name: Wecker aktiv    
    icon: mdi:alarm-multiple

  wecker_erinnerung_morgen:
    name: Erinnerung morgen    
    
  wecker_zeit_geaendert:
    name: Zeit geändert     
    
binary_sensor:
  - platform: template
    sensors:
      alarm_aktiv:
        friendly_name: Alarm aktiv
        icon_template: mdi:alarm-multiple
        device_class: sound
        value_template: "{{ True if is_state('input_boolean.alarm_aktiv', 'on') else False }}"

      wecker_richtig_gestellt:
        friendly_name: Wecker richtig gestellt
        value_template: >-
          {% set wecker_zeit = as_timestamp(states('sensor.tablet_schlafzimmer_nachster_wecker'), None) | timestamp_custom("%H:%M:%S", True) %}
          {% set wecker_standard_buero = states('input_datetime.alarm_standard_buero') %}
          {% set wecker_standard_homeoffice = states('input_datetime.alarm_standard_homeoffice') %}     

          {% set tagWecker = as_timestamp(states('sensor.tablet_schlafzimmer_nachster_wecker'), None) | timestamp_custom("%d", True) | int %}
          {% set tagHeute = as_timestamp(now(), None) | timestamp_custom("%d", True) | int %}

          {% set buero_morgen = is_state('binary_sensor.buero_morgen', 'on') %}
          {% set buero_heute = is_state('binary_sensor.buero_heute', 'on') %}

          {% if wecker_zeit == None %}
            False
          {% elif tagHeute + 1 == tagWecker %}
            {% if buero_morgen and wecker_zeit != wecker_standard_buero %}
              False
            {% elif buero_morgen == False and wecker_zeit != wecker_standard_homeoffice %}
              False
            {% else %}
              True
            {% endif %}
          {% elif tagHeute == tagWecker %}
            {% if buero_heute and wecker_zeit != wecker_standard_buero %}
              False
            {% elif buero_heute == False and wecker_zeit != wecker_standard_homeoffice %}
              False
            {% else %}
              True
            {% endif %}
          {% else %}
            True
          {% endif %}
          
sensor:
  - platform: template
    sensors:
      wecker_startzeit:
        friendly_name: Wecker Startzeit
        icon_template: mdi:alarm-bell
        unit_of_measurement: 'Uhr'
        value_template: >-
          {% set alarmSensor = states('sensor.tablet_schlafzimmer_nachster_wecker')%}

          {% if alarmSensor == 'unavailable' %}
            -
          {% else %}
            {{ as_timestamp(alarmSensor, None) | timestamp_custom("%H:%M", True) }}
          {% endif %}              
        
      wecker_startdatum:
        friendly_name: Wecker Startdatum
        icon_template: mdi:calendar-clock
        value_template: >-
          {% set alarmSensor = states('sensor.tablet_schlafzimmer_nachster_wecker')%}

          {% if alarmSensor == 'unavailable' %}
            -
          {% else %}
            {% set weekday = as_timestamp(alarmSensor, None) | timestamp_custom("%w", True) | int %}
            {{ ['Montag','Dienstag','Mittwoch','Donnerstag','Freitag','Samstag','Sonntag'][weekday-1] }}, {{ as_timestamp(alarmSensor, None) | timestamp_custom("%d.%m.%Y", True) | string }}          
          {% endif %}

automation:
  - alias: "Wecker - Starten"
    id: "wecker_starten"
    trigger:
      - platform: template
        value_template: >-
          {% set jetzt = as_timestamp(states('sensor.date_time').replace(',',''), None) | int %}  
          {% set vorlauf = (states('input_number.wecker_vorlauf' ) | int) * 60  %}
          {% set wecker = as_timestamp(states('sensor.tablet_schlafzimmer_nachster_wecker'), None) | int %}
          
          {{ wecker == jetzt + vorlauf }}
    condition:
      - condition: state
        entity_id: input_boolean.alarm_aktiv
        state: 'off'        
      - condition: state
        entity_id: binary_sensor.schlafen_aktiv
        state: 'on'
    action:
      - service: input_boolean.turn_on
        entity_id: input_boolean.alarm_aktiv  
      - service: light.turn_on
        data:
          entity_id: light.bett
          effect: colorloop
      - service: switch.turn_on
        entity_id: switch.schlafzimmer_radio               
      - wait_template: "{{ not is_state('media_player.radio_schlafzimmer', 'unavailable') }}"      
        timeout: '00:02:00'   
      - service: script.radio_playlist_wiedergeben
        data:
          mediaplayer: media_player.radio_schlafzimmer
          playlist: 'Südtirol 1'        
      - delay: "00:{{ states('input_number.wecker_verzoegerung') | int }}:00" 
      - service: script.wohnung_radios_einschalten
        data:
          homeOfficeHeute: "{{ is_state('binary_sensor.home_office_heute', 'on') }}"
          bueroHeute: "{{ is_state('binary_sensor.buero_heute', 'on') }}"

  - alias: "Wecker - Zeit geändert"
    id: "wecker_zeit_geaendert"
    trigger: 
      - platform: state
        entity_id: sensor.tablet_schlafzimmer_nachster_wecker
    condition:
      - condition: state
        entity_id: input_boolean.alarm_aktiv
        state: 'on'        
      - condition: state
        entity_id: binary_sensor.schlafen_aktiv
        state: 'on'    
    action:
      - service: input_boolean.turn_on
        entity_id: input_boolean.wecker_zeit_geaendert      
        
  - alias: "Wecker - Erinnerung"
    id: "wecker_erinnerung"
    trigger:
      - platform: state
        entity_id: input_boolean.wecker_zeit_geaendert
        to: 'on'
        for:
          minutes: 5
    condition:
      - condition: state
        entity_id: binary_sensor.alarm_aktiv
        state: 'on'
      - condition: template
        value_template: >-
          {% set wecker = as_timestamp(states('sensor.tablet_schlafzimmer_nachster_wecker'), None) / 86400 %}
          {% set now = as_timestamp(as_timestamp(now(), None) | timestamp_custom("%Y-%m-%d 00:00:00",true), None) / 86400 %}

          {{ wecker - now > 1 }}
    action:
      - service: !secret tts_service
        data:
          echo: "schlafzimmer"
          override: true
          message: >-
            {% set stunde = now().strftime("%H") | int %}
            
            {% if stunde >= 5 and stunde < 12 %}
              {% set message = 'Guten Morgen!' %}
            {% elif stunde >= 12 and stunde < 19 %}
              {% set message = 'Guten Tag!' %}        
            {% elif stunde >= 19 and stunde <= 23 %}
              {% set message = 'Guten Abend!' %}
            {% else %}
              {% set message = 'Guten Nacht!' %}
            {% endif %}
            
            {{ message }} Der Wecker ist ausgeschaltet. Du solltest jetzt aufstehen!
      - delay: "00:00:10"
      - service: media_player.play_media
        data:
          entity_id: media_player.echo_schlafzimmer
          media_content_type: sound
          media_content_id: amzn_sfx_scifi_alarm_04
          
  - alias: "Aufstehen - Schlafen ausschalten"
    id: "aufstehen_schlafen_ausschalten"
    trigger:
      - id: bwewegungsmelder
        platform: state
        entity_id: binary_sensor.bewegungsmelder_kueche
        to: 'on'
      - id: bwewegungsmelder
        platform: state
        entity_id: binary_sensor.bewegungsmelder_flur_vorne
        to: 'on'
      - id: bwewegungsmelder
        platform: state
        entity_id: binary_sensor.bewegungsmelder_wohnzimmer
        to: 'on'
      - id: schalter_badezimmer
        platform: event
        event_type: zha_event
        event_data:
          device_ieee: 00:15:8d:00:02:e9:58:3a
          command: click
          args:
            click_type: single           
    condition:
      - condition: state
        entity_id: binary_sensor.schlafen_aktiv
        state: 'on'
      - condition: or
        conditions:
          - condition: state
            entity_id: binary_sensor.alarm_aktiv
            state: 'on'
          - condition: template
            value_template: "{{ trigger.id == 'schalter_badezimmer' }}"              
          - condition: and
            conditions:
              - condition: time
                after: '06:00'
                before: '20:00'
              - condition: template                   
                value_template: >-
                  {% set alarmSensor = states('sensor.tablet_schlafzimmer_nachster_wecker') %}
                  {% set alarmDay = as_timestamp(alarmSensor, None) | timestamp_custom('%d') | int %}
                  {% set now = (as_timestamp(now(), None) | int) | timestamp_custom('%d') | int %}

                  {{ alarmSensor == 'unavailable' or alarmDay != now }}                  
              
    action:
      - service: input_boolean.turn_off
        entity_id: input_boolean.schlafen_aktiv, input_boolean.alarm_aktiv, input_boolean.wecker_erinnerung_morgen, input_boolean.wecker_zeit_geaendert
      - service: input_boolean.turn_on
        entity_id: input_boolean.schlafen_fernseher_einschalten
      - service: light.turn_off
        entity_id: light.bett 

  - alias: "Aufstehen - Geräte einschalten"
    id: "aufstehen_geraete_einschalten"
    trigger:
      - platform: state
        entity_id: binary_sensor.schlafen_aktiv
        to: 'off'
    condition:
      - condition: state
        entity_id: input_boolean.aufstehen_aktiviert
        state: 'off'        
    action:      
      - service: input_boolean.turn_on
        entity_id: input_boolean.aufstehen_aktiviert
      - service: !secret tts_service
        data:                  
          message: >-
            {%- set word_for_and = 'und' %}
            {%- set up_time = as_timestamp(now(), None) - state_attr('input_datetime.schlafen_uhrzeit', 'timestamp') | int %}

            {%- macro phrase(name, plural_name, divisor, mod=None) %}
              {%- set value = ((up_time // divisor) % (mod if mod else divisor)) | int %}
              {%- set name = plural_name if value > 1 else name %}
              {{- '{} {}'.format(value, name) if value | int > 0 else '' }}
            {%- endmacro %}

            {%- set values = [ 
                       phrase('Woche', 'Wochen', 60*60*24*7), 
                       phrase('Tag', 'Tage', 60*60*24, 7),
                       phrase('Stunde', 'Stunden', 60*60, 24),
                       phrase('Minute', 'Minuten', 60)
                   ] | select('!=','') | list %}

            {% set schlafenSatz = values[:-1] | join(', ') ~ ' ' ~ word_for_and ~ ' ' ~ values[-1] if values | length > 1 else values | first %}
            {% set uhrzeitSatz = as_timestamp(now(), None) | timestamp_custom('%H:%M') %}         
             
            {{ 'Guten Morgen. Es ist ' ~ uhrzeitSatz ~ ' Uhr. Du hast ' ~ schlafenSatz ~ ' geschlafen.' }}      
      - service: switch.turn_on
        entity_id: switch.computer
      - service: switch.turn_off
        entity_id: switch.schlafzimmer_radio        
      - choose:
          - conditions:
              - condition: state
                entity_id: switch.alle_radios
                state: 'off'
            sequence:                
              - service: script.wohnung_radios_einschalten
      - choose:
          - conditions:
              - condition: state
                entity_id: binary_sensor.buero_heute
                state: 'on'
              - condition: or
                conditions:
                  - condition: numeric_state
                    entity_id: input_text.corona_dortmund_gestern
                    above: input_number.corona_grenzwert       
                  - condition: numeric_state
                    entity_id: input_text.corona_mulheim_gestern
                    above: input_number.corona_grenzwert                        
            sequence:
              - service: !secret tts_service
                data:                  
                  message: >-
                    {% set coronaDortmundGestern = states('input_text.corona_dortmund_gestern') | float(0) %}
                    {% set coronaMuelheimGestern = states('input_text.corona_mulheim_gestern') | float(0) %}
                    {% set coronaGrenzwert = states('input_number.corona_grenzwert') | float(0) %}
                    
                    {% if coronaDortmundGestern >= coronaGrenzwert and coronaMuelheimGestern >= coronaGrenzwert %}
                      Die Corona-Werte in Dortmund und Mülheim waren gestern zu hoch.
                    {% elif coronaMuelheimGestern >= coronaGrenzwert %}          
                      Der Corona-Wert in Mülheim war gestern zu hoch.
                    {% elif coronaDortmundGestern >= coronaGrenzwert  %}
                      Der Corona-Wert in Dortmund war gestern zu hoch.
                    {% else %}
                      Die Corona-Werte waren gestern unter dem Grenzwert.
                    {% endif %}          