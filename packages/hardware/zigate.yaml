zigate:
  port: /dev/ttyUSB0
  channel: 24
  enable_led : false
  admin_panel: true

input_number:
  zigate_offline_puffer:
    name: Puffer
    min: 1
    max: 24
    step: 1
    initial: 24

input_select:
  cube_letzte_aktion:
    name: Letzte Aktion
    options:
      - 'Unbekannt'
      - 'Drehen 90°'
      - 'Drehen 180°'
      - 'Bewegung'
      - 'Schütteln'
      - 'Alarm'
      - 'Aufgewacht'
      - 'Freier Fall'
      - 'Rotieren'
      - 'Klopfen'
      
sensor:
  - platform: template
    sensors:
      cube_wohnzimmer_status:
        friendly_name: Xiaomi Cube
        entity_id:
          - input_select.cube_letzte_aktion
        value_template: >-
          {{ states("input_select.cube_letzte_aktion") }}
        icon_template: >
            mdi:cube-outline
            
      zigate_offline:
        friendly_name: Geräte offline
        entity_id:
          - sensor.time
          - sensor.laufzeit_minuten
          - input_number.zigate_offline_puffer
        icon_template: >
          {% set now = as_timestamp(now()) | int %}
          {% set puffer = states('input_number.zigate_offline_puffer') | int * 60 | int -%}
          {% set ns = namespace(found=false) -%}

          {% for entity_id in state_attr('group.zigate', 'entity_id') -%}
            {% set lastChange = as_timestamp(states(entity_id)) | int %}
            {% set difference = (now - lastChange ) / 60 | round() %}

            {% if difference > puffer %}
              {% set ns.found = true -%}
            {% endif %}
          {% endfor -%}

          {% if ns.found == True %}
            mdi:access-point-network-off
          {% else %}
            mdi:access-point-network
          {% endif %}
        value_template: >
          {% set now = as_timestamp(now()) | int %}
          {% set puffer = states('input_number.zigate_offline_puffer') | int * 60 | int -%}
          {% set ns = namespace(found=0) -%}

          {% for entity_id in state_attr('group.zigate', 'entity_id') -%}
            {% set lastChange = as_timestamp(states(entity_id)) | int %}
            {% set difference = (now - lastChange ) / 60 | round() %}

            {% if difference > puffer %}
              {% set ns.found = ns.found + 1 -%}
            {% endif %}
          {% endfor -%}

          {{ ns.found | int }}
          
automation:
  - alias: 'Cube - Letzte Aktion'
    trigger:
      - platform: state
        entity_id:
          - sensor.cube_bewegung
          - sensor.cube_drehung
    condition:
      condition: or
      conditions:
        - condition: template
          value_template: >-
            {{ True if trigger.entity_id == "sensor.cube_drehung" else False }}
        - condition: template
          value_template: >-
            {{ True if trigger.to_state.state else False }}
    action:
      - service: input_select.select_option
        data_template:
          entity_id: input_select.cube_letzte_aktion    
          option: >-
            {% if trigger.entity_id == "sensor.cube_drehung" %}
              Rotieren
            {% else %}
              {% set lastAction = states("sensor.cube_bewegung") %}

              {% if lastAction == None %}
                Unbekannt
              {% elif 'flip90' in lastAction %}
                Drehen 90°
              {% elif 'flip180' in lastAction %}
                Drehen 180°
              {% elif 'push' in lastAction %}
                Bewegung
              {% elif 'shake' in lastAction %}
                Schütteln
              {% elif 'alert' in lastAction %}
                Alarm
              {% elif 'wakeup' in lastAction %}
                Aufgewacht
              {% elif 'drop' in lastAction %}
                Freier Fall
              {% elif 'double_tap' in lastAction %}
                Klopfen
              {% else %}
                Unbekannt
              {% endif %}               
            {% endif %}
            

homeassistant:
  customize:
    binary_sensor.tuersensor:
      device_class: door
      
  customize_glob:
    binary_sensor.bewegungsmelder_*:
      device_class: motion
      
    sensor.helligkeit_*:
      device_class: illuminance
    