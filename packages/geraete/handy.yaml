input_boolean:
  nicht_stoeren:
    name: Nicht stÃ¶ren
    initial: off

sensor:
  - platform: template
    sensors:
      handy_status:
        friendly_name: Handy
        entity_id:
          - sensor.tasker_handystatus
        value_template: >
          {% if states.sensor.tasker_handystatus == None %}
            Ruhezustand
          {% else %}
            {% if is_state('sensor.tasker_handystatus', 'incoming') %}
              Eingehender Anruf
            {% elif is_state('sensor.tasker_handystatus', 'outgoing') %}
              Ausgehender Anruf
            {% elif is_state('sensor.tasker_handystatus', 'sms') %}
              Ungelesene SMS
            {% else %}
              Ruhezustand
            {% endif %}
          {% endif %}
        icon_template: >
          {% if states.sensor.tasker_handystatus == None %}
            mdi:phone
          {% else %}
            {% if is_state('sensor.tasker_handystatus', 'incoming') %}
              mdi:phone-incoming
            {% elif is_state('sensor.tasker_handystatus', 'outgoing') %}
              mdi:phone-outgoing
            {% elif is_state('sensor.tasker_handystatus', 'sms') %}
              mdi:message-alert
            {% else %}
              mdi:phone
            {% endif %}
          {% endif %}

  - platform: template
    sensors:
      handy_batterie:
        friendly_name: Handy
        entity_id:
          - sensor.tasker_handy
        value_template: >
          {% if states.sensor.tasker_handy == None %}
            0
          {% else %}
            {{ states.sensor.tasker_handy.state | float }}
          {% endif %}
        device_class: battery
        unit_of_measurement: '%'
        
      handy_zuletzt_geladen:
        friendly_name: Zuletzt geladen
        entity_id:
          - sensor.tasker_handy
        value_template: >
          {% if states.sensor.tasker_handy == None %}
            -
          {% else %}
            {% set lastCharged = state_attr('sensor.tasker_handy','last_charged') | int %}
            {% set weekday = lastCharged | timestamp_custom("%w", True) | int %}

            {{ ['Montag','Dienstag','Mittwoch','Donnerstag','Freitag','Samstag','Sonntag'][weekday-1] }}, {{ lastCharged | timestamp_custom("%d.%m.%Y", True) | string }}  
          {% endif %}
        device_class: timestamp
        
automation:
  - alias: 'Eingehender Anruf - Handy'
    trigger:
      - platform: state
        entity_id: sensor.tasker_handystatus
        to: 'incoming'
    condition:
      - condition: template
        value_template: '{{ state_attr("sensor.tasker_handystatus", "number") != None }}'        
    action:
      - service: mqtt.publish
        data_template:
          payload: '{{ state_attr(trigger.entity_id, "number") }}'          
          topic: phone/last_call
          retain: true
          
  - alias: 'Handy aktiv - Kodi pausieren'
    trigger:
      - platform: state
        entity_id: sensor.tasker_handystatus
        to: 'incoming'
      - platform: state
        entity_id: sensor.tasker_handystatus
        to: 'outgoing'
    condition:
      - condition: state
        entity_id: media_player.kodi_wohnzimmer
        state: 'playing'
      - condition: state
        entity_id: input_boolean.nicht_stoeren
        state: 'off'
    action:
      - service: input_boolean.turn_on
        entity_id: input_boolean.kodi_pausiert
      - service: media_player.media_pause
        entity_id: media_player.kodi_wohnzimmer
      - service: notify.kodi_wohnzimmer
        data:
          title: 'Handy'
          message: >-
            {% if is_state("sensor.tasker_handystatus", "outgoing") %}
              {{ states.sensor.tasker_handystatus.attributes.name }} ({{ states.sensor.tasker_handystatus.attributes.number }}) wird angerufen.
            {% elif is_state("sensor.tasker_handystatus", "incoming") %}
              Eingehender Anruf von {{ states.sensor.tasker_handystatus.attributes.name }} ({{ states.sensor.tasker_handystatus.attributes.number }}).
            {% endif %}
          data:
            displaytime: 5000
            icon: "info"

  - alias: 'Handy inaktiv - Kodi wiedergeben'
    trigger:
      - platform: state
        entity_id: sensor.tasker_handystatus
        to: 'idle'
    condition:
      - condition: state
        entity_id: media_player.kodi_wohnzimmer
        state: 'paused'
      - condition: state
        entity_id: input_boolean.kodi_pausiert
        state: 'on'
      - condition: state
        entity_id: sensor.telefon
        state: 'idle'
    action:
      - service: input_boolean.turn_off
        entity_id: input_boolean.kodi_pausiert
      - service: media_player.media_play
        entity_id: media_player.kodi_wohnzimmer
      - service: notify.kodi_wohnzimmer
        data:
          title: 'Handy'
          message: 'Anruf beendet'
          data:
            displaytime: 2000
            icon: "info"

  - alias: 'Handy aktiv - Soundbar deaktivieren'
    trigger:
      - platform: state
        entity_id: sensor.tasker_handystatus
        to: 'incoming'
      - platform: state
        entity_id: sensor.tasker_handystatus
        to: 'outgoing'
    condition:
      - condition: state
        entity_id: media_player.soundbar
        state: 'on'
      - condition: state
        entity_id: input_boolean.nicht_stoeren
        state: 'off'        
      - condition: or
        conditions:
          - condition: state
            entity_id: media_player.kodi_wohnzimmer
            state: 'off'          
          - condition: state
            entity_id: media_player.kodi_wohnzimmer
            state: 'idle'
    action:
      - service: media_player.volume_mute
        data:
          entity_id: media_player.soundbar
          is_volume_muted: true

  - alias: 'Handy inaktiv - Soundbar aktivieren'
    trigger:
      - platform: state
        entity_id: sensor.tasker_handystatus
        to: 'idle'
    condition:
      - condition: state
        entity_id: media_player.soundbar
        state: 'on'
      - condition: template
        value_template: '{{ state_attr("media_player.soundbar", "is_volume_muted") == True }}'
    action:
      - service: media_player.volume_mute
        data:
          entity_id: media_player.soundbar
          is_volume_muted: false
          
  - alias: 'Handy aktiv - Musik pausieren'
    trigger:
      - platform: state
        entity_id: sensor.tasker_handystatus
        to: 'incoming'
      - platform: state
        entity_id: sensor.tasker_handystatus
        to: 'outgoing'
    condition:
      - condition: state
        entity_id: switch.wiedergabe_aktiv
        state: 'on'
      - condition: state
        entity_id: input_boolean.nicht_stoeren
        state: 'off'
    action:
      - service: input_boolean.turn_on
        entity_id: input_boolean.musik_pausiert
      - service: media_player.volume_mute
        data:
          entity_id: media_player.kuche, media_player.badezimmer, media_player.wohnzimmer, media_player.schlafzimmer, media_player.arbeitszimmer, media_player.flur, media_player.balkon
          is_volume_muted: true

  - alias: 'Handy inaktiv - Musik wiedergeben'
    trigger:
      - platform: state
        entity_id: sensor.tasker_handystatus
        to: 'idle'
    condition:
      - condition: state
        entity_id: input_boolean.musik_pausiert
        state: 'on'
      - condition: state
        entity_id: sensor.telefon
        state: 'idle'
    action:
      - service: input_boolean.turn_off
        entity_id: input_boolean.musik_pausiert
      - service: media_player.volume_mute
        data:
          entity_id: media_player.kuche, media_player.badezimmer, media_player.wohnzimmer, media_player.schlafzimmer, media_player.arbeitszimmer, media_player.flur, media_player.balkon
          is_volume_muted: false

  - alias: "Handy - Eingehender Anruf - TTS"
    trigger:
      - platform: state
        entity_id: sensor.tasker_handystatus
        to: 'incoming'
    condition:
      - condition: state
        entity_id: input_boolean.nicht_stoeren
        state: 'off'
    action:
      service: !secret tts_service
      data_template:
        message: >-
          Ein eingehender Anruf von {% if states.sensor.tasker_handystatus.attributes.name != '-' and states.sensor.tasker_handystatus.attributes.name.startswith('+') == False %}{{ states.sensor.tasker_handystatus.attributes.name }}{% else %}einer unbekannten Nummer{% endif %}.

  - alias: "Handy - Neue SMS - TTS"
    trigger:
      - platform: state
        entity_id: sensor.tasker_handystatus
        to: 'sms'
    condition:
      - condition: state
        entity_id: input_boolean.nicht_stoeren
        state: 'off'
    action:
      service: !secret tts_service
      data_template:
#        message: >-
#          Eine neue SMS von {% if states.sensor.tasker_handystatus.attributes.name != '-' and states.sensor.tasker_handystatus.attributes.name.startswith('+') == False and states.sensor.tasker_handystatus.attributes.name.startswith('0') == False %} {{ states.sensor.tasker_handystatus.attributes.name }}{% else %}einer unbekannten Nummer{% endif %} ist eingegangen.
#        message: >-
#          Eine neue SMS{% if states.sensor.tasker_handystatus.attributes.name != '-' or states.sensor.tasker_handystatus.attributes.name.startswith('+') or states.sensor.tasker_handystatus.attributes.name.startswith('0')%} von {{ states.sensor.tasker_handystatus.attributes.name }}{% endif %} ist eingegangen.
#          {% if states.sensor.tasker_handystatus.attributes.text != '-'%}{{ states.sensor.tasker_handystatus.attributes.text }}{% endif %}
        message: >-
          Eine neue SMS ist eingegangen.

  - alias: 'Handy - Neue SMS - Kodi'
    trigger:
      - platform: state
        entity_id: sensor.tasker_handystatus
        to: 'sms'
    condition:
      - condition: state
        entity_id: media_player.kodi_wohnzimmer
        state: 'playing'
      - condition: state
        entity_id: input_boolean.nicht_stoeren
        state: 'off'
    action:
      - service: notify.kodi_wohnzimmer
        data:
          title: 'Handy'
#          message: >-
#            {% set name = states.sensor.tasker_handystatus.attributes.name | string %}
#
#            {% if name.startswith('+') or name.startswith('0') or name == '-' %}
#              Eine neue SMS ist eingegangen.
#            {% else %}
#              Eine neue SMS von {{ name }} ist eingegangen.
#            {% endif %}
          message: >-
            Eine neue SMS ist eingegangen.
          data:
            displaytime: 3000
            icon: "info"
#      - condition: template
#        value_template: >-
#          {% set text = states.sensor.tasker_handystatus.attributes.text %}
#
#          {% if text == '-' %}
#            False
#          {% else %}
#            True
#          {% endif %}
#      - delay: '00:00:03'
#      - service: notify.kodi_wohnzimmer
#        data:
#          title: 'Handy'
#          message: >-
#            {{ states.sensor.tasker_handystatus.attributes.text }}
#          data:
#            displaytime: 6000
#            icon: "info"

  - alias: "Handy - Batteriestand niedrig"
    trigger:
      - platform: state
        entity_id: sensor.tasker_handy
    condition:
      - condition: numeric_state
        entity_id: sensor.tasker_handy
        below: 16
      - condition: template
        value_template: '{{ state_attr("sensor.tasker_handy", "is_charging") == False }}'
    action:
      - service: !secret tts_service
        data_template:
          message: "Das Handy muss aufgeladen werden. Der Batteriestand betrÃ¤gt {{ states.sensor.tasker_handy.state | int }} Prozent."

  - alias: "Handy - Aufgeladen"
    trigger:
      - platform: state
        entity_id: sensor.tasker_handy
    condition:
      - condition: numeric_state
        entity_id: sensor.tasker_handy
        above: 99
      - condition: template
        value_template: '{{ state_attr("sensor.tasker_handy", "is_charging") == True }}'
    action:
      - service: !secret tts_service
        data_template:
          message: "Das Handy wurde vollstÃ¤ndig aufgeladen."

homeassistant:
  customize:
    sensor.tasker_handy:
      friendly_name: Handy Tasker
    sensor.tasker_handystatus:
      friendly_name: Handy Status
    input_boolean.nicht_stoeren:
      icon: mdi:do-not-disturb