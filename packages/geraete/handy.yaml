input_datetime:
  handy_zuletzt_geladen:
    name: Handy - Zuletzt geladen
    has_date: true
    has_time: false
    
device_tracker:
  - platform: phonetrack
    url: !secret phonetrack_url
    token: !secret phonetrack_token
    devices:
      - Handy_GPS
      
  - platform: ping
    hosts:
      handy_ping: !secret handy_host
      handy_natalie_ping: !secret handy_natalie_host
      
proximity:
  home:
    devices:      
      - device_tracker.handy_gps
      - device_tracker.handy
    tolerance: 50
        
mqtt:
  binary_sensor:
    - name: "Handy SMS"
      state_topic: "handy/sms"
      value_template: "{{ (value_json.status | int(0)) }}"   
      payload_on: 1
      payload_off: 0    
      json_attributes_topic: "handy/sms"
      json_attributes_template: "{{ value_json | tojson }}"   
       
  sensor:
    - name: "Handy"
      state_topic: "handy/status"
      value_template: "{{ value_json.status }}"   
      json_attributes_topic: "handy/status"
      json_attributes_template: "{{ value_json | tojson }}"       
      
  device_tracker:
    - name: "Handy MQTT"
      state_topic: "handy/location"     
   
template:    
  - sensor:          
      - name: "Handy Status"
        unique_id: handy_status
        state: >-
          {% if is_state('sensor.handy', 'ringing') %}
            Eingehender Anruf
          {% elif is_state('sensor.handy', 'dialing') %}
            Ausgehender Anruf
          {% elif is_state('sensor.handy', 'talking') %}
            Aktiver Anruf            
          {% else %}
            Ruhezustand
          {% endif %}        
        icon: >-
          {% if is_state('sensor.handy', 'ringing') %}
            mdi:phone-incoming
          {% elif is_state('sensor.handy', 'dialing') %}
            mdi:phone-outgoing
          {% elif is_state('sensor.handy', 'talking') %}
            mdi:message-alert
          {% else %}   
            mdi:phone
          {% endif %}            
        
      - name: "Handy Zuletzt geladen"
        unique_id: handy_zuletzt_geladen
        state: "{{ as_timestamp(states('input_datetime.handy_zuletzt_geladen')) | timestamp_custom('%d.%m.%Y', True) }}"      
        icon: mdi:clock-start        
              
automation: 
  - alias: "Handy aktiv - Wiedergabe pausieren"
    id: "handy_aktiv_wiedergabe_pausieren"
    trigger:     
      - platform: state
        entity_id: sensor.handy
        from: 'idle'
        to:                    
          - 'dialing'
          - 'ringing'          
          - 'talking'      
    condition:
      - "{{ is_state('person.dennis', 'home') }}"
      - "{{ is_state('binary_sensor.allein_zu_hause', 'on') }}"
      - "{{ is_state('binary_sensor.besuch', 'off') }}"
    action:
      - service: input_boolean.turn_on
        entity_id: input_boolean.multimedia_pausiert
      - choose:
          - conditions:
              - condition: state
                entity_id: media_player.soundbar
                state: 'on'                               
              - condition: state
                entity_id: switch.wiedergabe_aktiv
                state: 'off'                      
            sequence:
              - service: media_player.volume_mute
                data:
                  entity_id: media_player.soundbar
                  is_volume_muted: true
      - choose:
          - conditions:
              - condition: state
                entity_id: switch.wiedergabe_aktiv
                state: 'on'       
              - condition: state
                entity_id: input_boolean.tuer_musik_pausiert
                state: 'off'
              - condition: state
                entity_id: input_boolean.home_office_musik_pausiert
                state: 'off'                
            sequence:
              - service: input_boolean.turn_on
                entity_id: input_boolean.telefon_musik_pausiert
              - service: switch.turn_on
                entity_id: switch.radios_lautlos

  - alias: "Handy inaktiv - Wiedergabe starten"
    id: "handy_inaktiv_wiedergabe_starten"
    trigger:       
      - platform: state
        entity_id: sensor.handy
        from:                    
          - 'dialing'
          - 'ringing'          
          - 'talking'
        to: 'idle'
    condition:
      - "{{ is_state('person.dennis', 'home') }}"
      - "{{ is_state('sensor.telefon', 'idle') }}"
      - "{{ is_state('input_boolean.multimedia_pausiert', 'on') }}"
    action:
      - service: input_boolean.turn_off
        entity_id: input_boolean.multimedia_pausiert                                                  
      - choose:
          - conditions:
              - condition: state
                entity_id: media_player.soundbar
                state: 'on'
              - condition: state
                entity_id: media_player.soundbar
                attribute: is_volume_muted
                state: True
            sequence:       
              - service: media_player.volume_mute
                data:
                  entity_id: media_player.soundbar
                  is_volume_muted: false    
      - choose:
          - conditions:
              - condition: state
                entity_id: input_boolean.telefon_musik_pausiert
                state: 'on'
              - condition: state
                entity_id: sensor.telefon
                state: 'idle'
            sequence:       
              - service: input_boolean.turn_off
                entity_id: input_boolean.telefon_musik_pausiert
              - service: switch.turn_off
                entity_id: switch.radios_lautlos
    
  - alias: "Handy aktiv - Benachrichtigung"
    id: "handy_aktiv_benachrichtigung"
    trigger:
      - platform: state
        entity_id: sensor.handy
        to: 'ringing'                 
    condition:
      - "{{ is_state('binary_sensor.nicht_stoeren', 'off') }}" 
    action:
      - service: !secret tts_service
        data:
          message: >-                   
            {% if state_attr('sensor.handy', 'caller') != '0' 
              and state_attr('sensor.handy', 'caller') != '-'    
              and is_state('binary_sensor.besuch', 'off')
              and not is_state_attr('sensor.handy', 'caller', None) 
              and not state_attr('sensor.handy', 'caller').startswith('+')
            %}
              {% set messageString = state_attr('sensor.handy', 'caller') %}
            {% else %}
              {% set messageString = 'einer unbekannten Rufnummer' %}            
            {% endif %}

            Ein eingehender Anruf von {{ messageString }}.         

  - alias: "Handy aktiv - Anruf verpasst"
    id: "handy_aktiv_anruf_verpasst"
    trigger:
      - platform: state
        entity_id: sensor.handy
        from: 'ringing'
        to: 'idle'
    condition:
      - condition: state
        entity_id: person.dennis
        state: 'home'
    action:
      - service: persistent_notification.create
        data:
          title: "Anruf verpasst"
          notification_id: anruf_verpasst
          message: "Ein Anruf auf dem Handy wurde verpasst."

  - alias: "Handy - Neue SMS"
    id: "handy_neue_sms"
    trigger:
      - platform: state
        entity_id: binary_sensor.handy_sms
        to: 'on'
    condition:
      - "{{ is_state('binary_sensor.nicht_stoeren', 'off') }}"
    action:
      - choose:
          - conditions:
              - "{{ is_state('binary_sensor.besuch', 'on') }}"
            sequence:
              - service: !secret tts_service
                data:
                  message: "Eine neue SMS ist eingegangen."
        default:
          - service: !secret tts_service
            data:
              message: >-
                Eine neue SMS von {% if state_attr('binary_sensor.handy_sms', 'sender') != '-' and state_attr('binary_sensor.handy_sms', 'sender').startswith('+') == False and state_attr('binary_sensor.handy_sms', 'sender').startswith('0') == False %}"{{ state_attr('binary_sensor.handy_sms', 'sender') }}"{% else %}einer unbekannten Nummer{% endif %} ist eingegangen.
                {% if state_attr('binary_sensor.handy_sms', 'text') != null %} {{ state_attr('binary_sensor.handy_sms', 'text') }} {% endif %}
      - service: persistent_notification.create        
        data:
          title: >-
            {% if state_attr('binary_sensor.handy_sms', 'sender') != '-' and state_attr('binary_sensor.handy_sms', 'sender').startswith('+') == False and state_attr('binary_sensor.handy_sms', 'sender').startswith('0') == False %} {{ state_attr('binary_sensor.handy_sms', 'sender') }} {% else %}Unbekannte Nummer{% endif %}
          message: >-
            {% if state_attr('binary_sensor.handy_sms', 'text') != null %} {{ state_attr('binary_sensor.handy_sms', 'text') }} {% endif %}
          notification_id: neue_sms                       

  - alias: "Handy - SMS gelesen"
    id: "handy_sms_gelesen"  
    trigger: 
      - id: sms_gelesen
        platform: state
        entity_id: binary_sensor.handy_sms
        to: 'off'
      - id: benachrichtigung
        platform: event
        event_type: call_service
        event_data:
          domain: persistent_notification
          service: dismiss
    condition:
      - "{{ True if trigger.id == 'sms_gelesen' else trigger.event.data.service_data.notification_id == 'neue_sms' }}"
    action:
      - choose:
          - conditions:
            - "{{ trigger.id == 'sms_gelesen' }}"
            sequence:
              - service: persistent_notification.dismiss  
                data:              
                  notification_id: neue_sms
        default:
          - service: mqtt.publish
            data:
               topic: 'handy/sms'
               payload: '{"status":0}'
               retain: true

  - alias: "Handy - Batteriestand niedrig"
    id: "handy_batteriestand_niedrig"
    trigger:
      - platform: state
        entity_id: sensor.handy_battery_level
    condition:
      - "{{ trigger.to_state.state is defined }}"
      - "{{ trigger.to_state.state not in ('unknown', 'unavailable') }}"      
      - "{{ trigger.to_state.state | int(0) < trigger.from_state.state | int(0) }}"
      - "{{ (trigger.to_state.state | int(0)) <= states('input_number.batteriestand_warnlevel') | int(0) }}"
      - "{{ is_state('person.dennis', 'home') }}"      
    action:
      - service: !secret tts_service
        data:
          message: "Das Handy muss aufgeladen werden. Der Batteriestand beträgt {{ (trigger.to_state.state | int(0)) }} Prozent."

  - alias: "Handy - Aufgeladen"
    id: "handy_aufgeladen"
    trigger:
      - platform: state
        entity_id: sensor.handy_battery_level 
    condition:
      - "{{ (trigger.to_state.state | int(100)) > 99 }}"
      - "{{ trigger.to_state.state | int(0) > trigger.from_state.state | int(0) }}"
    action:
      - service: input_datetime.set_datetime
        target:
          entity_id: input_datetime.handy_zuletzt_geladen
        data:
          timestamp: "{{ now().timestamp() }}"   
      - choose:
          - conditions:
              - "{{ is_state('person.dennis', 'home') }}"
              - "{{ is_state('binary_sensor.schlafen_aktiv', 'off') }}"
            sequence:       
              - service: !secret tts_service
                data:
                  message: "Das Handy wurde vollständig aufgeladen."