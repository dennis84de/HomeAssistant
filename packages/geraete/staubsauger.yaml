input_boolean:
  staubsauger_automatische_reinigung:
    name: Automatische Reinigung
    icon: mdi:flash-auto
  staubsauger_automatische_reinigung_gestartet:
    name: Automatische Reinigung gestartet    
  staubsauger_alarm_ausgeschaltet:
    name: Alarm ausgeschaltet      
    
input_select:
  staubsauger_reinigen:
    name: Reinigen
    options:
      - Auswählen
      - Filter
      - Bürste
      - Seitenbürste
      - Sensor      

counter:
  staubsauger_behaelter_leeren:
    name: Behälter leeren
    icon: mdi:delete-empty
    initial: 3
    step: 1
      
template:    
  - binary_sensor:          
      - name: "Staubsauger Reinigung heute"
        unique_id: staubsauger_reinigung_heute
        state: >-
          {% if not state_attr("automation.staubsaugen_beendet", "last_triggered") %}
            False
          {% else %}
            {% set istArbeitstag = is_state('binary_sensor.arbeitstag', 'on') %}
            {% set istSamstag = now().isoweekday() | int == 6 %}        
                        
            {% if is_state('calendar.urlaub', 'off') %}
              {% set keinUrlaub = True %}
            {% else %}
              {% set urlaubStart = (as_timestamp(state_attr('calendar.urlaub', 'start_time'), None) | timestamp_custom('%d', True, 0)) | int(0) %}
              {% set urlaubEnde = (as_timestamp(state_attr('calendar.urlaub', 'end_time'), None) | timestamp_custom('%d', True, 0)) | int(0) %}
              
              {% set keinUrlaub = urlaubStart == urlaubEnde %}              
            {% endif %}
                                
            {% set heute = as_timestamp(now().replace(hour=0, minute=0, second=0)) %}
            {% set letzteReinigung = state_attr("automation.staubsaugen_beendet", "last_triggered") %}           
            {% set abstandTage = now().strftime('%j')|int - letzteReinigung.strftime('%j')|int(0) if letzteReinigung else 3 %}

            {{ True if keinUrlaub and (istArbeitstag or istSamstag) and abstandTage > 2 else False }}          
          {% endif %}        
        icon: mdi:calendar
                
      - name: "Bewegungsmelder inaktiv - Staubsauger"
        unique_id: bewegungsmelder_inaktiv_staubsauger
        device_class: occupancy        
        state: "{{ True if is_state('vacuum.staubsauger', 'cleaning') or is_state('vacuum.staubsauger', 'returning') else False }}"      
        icon: mdi:calendar    
        
  - sensor:
      - name: "Staubsauger Dauer Letzte Reinigung"
        unique_id: staubsauger_dauer_letzte_reinigung       
        state: "{{ (states('sensor.staubsauger_last_clean_duration') | int(0) / 60) | int(0) }}"      
        icon: mdi:clock-outline    
        
      - name: "Staubsauger Battery Level"
        unique_id: bewegungsmelder_inaktiv_staubsauger
        device_class: battery        
        state: "{{ state_attr('vacuum.staubsauger', 'battery_level') | int(0) }}"
        
automation:
  - alias: "Staubsaugen - Gestartet"
    id: "staubsaugen_gestartet"
    trigger:
      - platform: state
        entity_id: sensor.personen_zu_hause
        to: '0'
        for:
          minutes: 5
      - platform: time
        at: '7:00:00'        
    condition:
      - "{{ is_state('sensor.personen_zu_hause', '0') }}"
      - "{{ is_state('binary_sensor.nachts', 'off') }}"
      - "{{ is_state('vacuum.staubsauger', 'docked') }}"      
      - "{{ is_state('input_boolean.staubsauger_automatische_reinigung', 'on') }}"
      - "{{ is_state('binary_sensor.staubsauger_reinigung_heute', 'on') }}"
      - "{{ is_state('calendar.urlaub', 'off') }}"
    action:
      - service: input_boolean.turn_on
        entity_id: input_boolean.staubsauger_automatische_reinigung_gestartet          
      - service: vacuum.start
        entity_id: vacuum.staubsauger
      - if: "{{ is_state('alarm_control_panel.alarmo', 'armed_away') }}"
        then:
          - service: input_boolean.turn_on
            entity_id: input_boolean.staubsauger_alarm_ausgeschaltet
          - service: alarmo.disarm
            data:
              entity_id: alarm_control_panel.alarmo        
      - if: "{{ not is_state('person.dennis', 'home') }}"
        then:
          - service: notify.telegram
            data:                  
              message: 'Das Saugen der Wohnung wurde gestartet.'

  - alias: "Staubsaugen - Beendet"
    id: "staubsaugen_beendet"
    trigger:
      - platform: state
        entity_id: vacuum.staubsauger
        from: 'returning'
        to: 'docked'    
    condition:
      - condition: state
        entity_id: input_boolean.staubsauger_automatische_reinigung_gestartet
        state: 'on'      
      - condition: template
        value_template: >-
          {% set letzter_start = as_timestamp(state_attr("automation.staubsaugen_gestartet", "last_triggered"), None) | timestamp_custom("%s", True) | int(0)  %}
          {% set now = now().strftime("%s") | int(0) %}
          {% set abstand_stunden = ((now - letzter_start) / 3600) | int(0) %}

          {{ True if abstand_stunden <= 2 else False }}         
    action:
      - service: counter.decrement
        entity_id: counter.staubsauger_behaelter_leeren        
      - service: input_boolean.turn_off
        entity_id: input_boolean.staubsauger_automatische_reinigung_gestartet    
      - if: "{{ is_state('input_boolean.staubsauger_alarm_ausgeschaltet', 'on') }}"
        then:
          - service: input_boolean.turn_off
            entity_id: input_boolean.staubsauger_alarm_ausgeschaltet
          - service: alarmo.arm
            data:
              entity_id: alarm_control_panel.alarmo             
      - if: "{{ not is_state('person.dennis', 'home') }}"
        then:
          - service: notify.telegram
            data:                  
              message: 'Die Wohnung wurde vollständig gesaugt.'            
      - if: "{{ states('counter.staubsauger_behaelter_leeren') | int(0) < 1 }}"   
        then:
          - service: persistent_notification.create
            data:
              title: "Staubsauger"
              message: "Der Staubsaugerbehälter muss geleert werden."
              notification_id: staubsauger_leeren
          - service: vacuum.send_command
            data:
              entity_id: vacuum.staubsauger
              command: app_goto_target
              params: [33463,24839] 
          
  - alias: "Staubsaugen - Fehler"
    id: "staubsaugen_fehler"
    trigger:
      - platform: state
        entity_id: vacuum.staubsauger
        from: 'cleaning'
        to: 'error'
    condition:
      - condition: state
        entity_id: person.dennis
        state: 'not_home'        
    action:
      - service: notify.telegram
        data:
          title: 'Fehler beim Staubsaugen'
          message: 'Während des Staubsaugens ist ein Fehler aufgetreten.'        
      - service: alarmo.arm
        data:
          entity_id: alarm_control_panel.alarmo                
        
  - alias: "Staubsaugen - Behälter geleert"
    id: "staubsaugen_behaelter_geleert"
    trigger:
      - platform: event
        event_type: call_service
        event_data:
          domain: persistent_notification
          service: dismiss      
    condition:
      - condition: template
        value_template: '{{ trigger.event.data.service_data.notification_id == "staubsauger_leeren" }}'
    action:
      - service: counter.reset
        entity_id: counter.staubsauger_behaelter_leeren
      - service: vacuum.return_to_base
        entity_id: vacuum.staubsauger        
        
  - alias: "Staubsaugen - Reinigen"
    id: "staubsaugen_reinigen"
    trigger:
      - platform: state
        entity_id: input_select.staubsauger_reinigen
    condition:
      - "{{ trigger.to_state.state != 'Auswählen' }}"
    action:          
      - service: vacuum.send_command
        target:
          entity_id: vacuum.staubsauger
        data:
          command: reset_consumable
          params: >-
            {% if trigger.to_state.state == 'Filter' %}
              ['filter_work_time']
            {% elif trigger.to_state.state == 'Bürste' %}
              ['main_brush_work_time']
            {% elif trigger.to_state.state == 'Seitenbürste' %}
              ['side_brush_work_time']
            {% else %}
              ['sensor_dirty_time']
            {% endif %}
      - delay: '00:00:02'            
      - service: input_select.select_option
        data:
          entity_id: input_select.staubsauger_reinigen
          option: Auswählen