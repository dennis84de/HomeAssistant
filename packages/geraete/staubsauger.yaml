input_boolean:
  staubsauger_automatische_reinigung:
    name: Automatische Reinigung
    icon: mdi:flash-auto
  staubsauger_automatische_reinigung_gestartet:
    name: Automatische Reinigung gestartet    
    
binary_sensor:
  - platform: template
    sensors:
      reinigung_heute:
        friendly_name: Reinigung heute        
        icon_template: mdi:calendar
        value_template: >-
          {% set arbeitstag = is_state('binary_sensor.arbeitstag', 'on') %}
          {% set samstag = (now().isoweekday() | int) == 6 %}          
          {% set keinUrlaub = is_state('calendar.urlaub', 'off') %}
          {% set heute = as_timestamp(now()) | timestamp_custom("%Y-%m-%d 00:00:00", True) %}
          {% set letzteReinigung = as_timestamp(state_attr("automation.staubsaugen_beendet", "last_triggered")) | timestamp_custom("%Y-%m-%d 00:00:00", True) %}
          
          {% if letzteReinigung %}
            {% set abstandTage = ((as_timestamp(heute) - as_timestamp(letzteReinigung)) / 60 / 60 / 24) | int %}
          {% else %}
            {% set abstandTage = 3 %}
          {% endif %}
          
          {{ True if keinUrlaub and (arbeitstag or samstag) and abstandTage > 2 else False }}

counter:
  behaelter_leeren:
    name: Behälter leeren
    icon: mdi:delete-empty
    initial: 3
    step: 1

sensor:
  - platform: template
    sensors:
      letzte_reinigung:
        friendly_name: Letzte Reinigung
        icon_template: mdi:clock-end
        value_template: >-
          {% set lastClean = state_attr("automation.staubsaugen_beendet", "last_triggered") %}
          
          {% if lastClean == None %}
            -
          {% else %}            
            {% set weekday = as_timestamp(lastClean) | timestamp_custom("%w", True) | int %}

            {{ ['Montag','Dienstag','Mittwoch','Donnerstag','Freitag','Samstag','Sonntag'][weekday-1] }}, {{ as_timestamp(lastClean) | timestamp_custom("%d.%m.%Y", True) | string }}              
          {% endif %}
          
      reinigung_filter:
        friendly_name: Reinigung Filter
        unit_of_measurement: 'Stunden'
        icon_template: mdi:air-filter
        value_template: >-
          {% if state_attr("vacuum.roborock_vacuum", "filter_left") == None %}
            -
          {% else %}
            {{ state_attr("vacuum.roborock_vacuum", "filter_left") }}
          {% endif %}

      reinigung_buerste:
        friendly_name: Reinigung Bürste
        unit_of_measurement: 'Stunden'
        icon_template: mdi:broom
        value_template: >-
          {% if state_attr("vacuum.roborock_vacuum", "main_brush_left") == None %}
            -
          {% else %}
            {{ state_attr("vacuum.roborock_vacuum", "main_brush_left") }}
          {% endif %}

      reinigung_seitenbuerste:
        friendly_name: Reinigung Seitenbürste
        unit_of_measurement: 'Stunden'
        icon_template: mdi:broom
        value_template: >-
          {% if state_attr("vacuum.roborock_vacuum", "side_brush_left") == None %}
            -
          {% else %}
            {{ state_attr("vacuum.roborock_vacuum", "side_brush_left") }}
          {% endif %}

      reinigung_sensor:
        friendly_name: Reinigung Sensor
        unit_of_measurement: 'Stunden'
        icon_template: mdi:trash-can
        value_template: >-
          {% if state_attr("vacuum.roborock_vacuum", "sensor_dirty_left") == None %}
            -
          {% else %}
            {{ state_attr("vacuum.roborock_vacuum", "sensor_dirty_left") }}
          {% endif %}                  
          
      xiaomi_vacuum_batterie:
        friendly_name: Batterie
        device_class: battery
        value_template: >
          {% if is_state('vacuum.roborock_vacuum', 'unknown') %}
            0
          {% else %}
            {{ state_attr("vacuum.roborock_vacuum","battery_level") | float }}
          {% endif %}
        unit_of_measurement: '%'

automation:
  - alias: "Staubsaugen - Gestartet"
    id: "staubsaugen_gestartet"
    trigger:
      - platform: state
        entity_id: binary_sensor.zu_hause
        to: 'off'
        for:
          minutes: 5
      - platform: time
        at: '7:00:00'        
    condition:
      - condition: time
        after: '06:00'
        before: '22:00'
      - condition: state
        entity_id: vacuum.roborock_vacuum
        state: 'docked'
      - condition: state
        entity_id: binary_sensor.zu_hause
        state: 'off'
      - condition: state
        entity_id: input_boolean.staubsauger_automatische_reinigung
        state: 'on'        
      - condition: state
        entity_id: binary_sensor.reinigung_heute
        state: 'on'
      - condition: state
        entity_id:  calendar.urlaub
        state: 'off'
    action:
      - service: vacuum.start
        entity_id: vacuum.roborock_vacuum
      - service: input_boolean.turn_on
        entity_id: input_boolean.staubsauger_automatische_reinigung_gestartet
      - service: notify.telegram
        data:          
          message: 'Das Saugen der Wohnung wurde gestartet.'

  - alias: "Staubsaugen - Beendet"
    id: "staubsaugen_beendet"
    trigger:
      - platform: state
        entity_id: vacuum.roborock_vacuum
        from: 'returning'
        to: 'docked'    
    condition:
      - condition: state
        entity_id: input_boolean.staubsauger_automatische_reinigung_gestartet
        state: 'on'      
      - condition: template
        value_template: >-
          {% set letzter_start = as_timestamp(state_attr("automation.staubsaugen_gestartet", "last_triggered")) | timestamp_custom("%s", True) | int  %}
          {% set now = now().strftime("%s") | int %}
          {% set abstand_stunden = ((now - letzter_start | int) / 3600) | int %}

          {{ True if abstand_stunden <= 2 else False }}         
    action:
      - service: counter.decrement
        entity_id: counter.behaelter_leeren        
      - service: input_boolean.turn_off
        entity_id: input_boolean.staubsauger_automatische_reinigung_gestartet        
      - choose:
          - conditions:
              - condition: state
                entity_id: binary_sensor.zu_hause
                state: 'off'      
            sequence:
              - service: notify.telegram
                data:                  
                  message: 'Die Wohnung wurde vollständig gesaugt.'
      - choose:
          - conditions:
              - condition: numeric_state
                entity_id: counter.behaelter_leeren
                below: 1
            sequence:
              - service: persistent_notification.create
                data:
                  title: "Staubsauger"
                  message: "Der Staubsaugerbehälter muss geleert werden."
                  notification_id: staubsauger_leeren
              - service: vacuum.send_command
                data:
                  entity_id: vacuum.roborock_vacuum
                  command: app_goto_target
                  params: [33463,24839]     
          
  - alias: "Staubsaugen - Fehler"
    id: "staubsaugen_fehler"
    trigger:
      - platform: state
        entity_id: vacuum.roborock_vacuum
        to: 'error'
    condition:
      - condition: state
        entity_id: binary_sensor.zu_hause
        state: 'off'        
    action:
      - service: notify.telegram
        data:
          title: 'Fehler beim Staubsaugen'
          message: 'Während des Staubsaugens ist ein Fehler aufgetreten.'             
        
  - alias: "Staubsaugen - Behälter geleert"
    id: "staubsaugen_behaelter_geleert"
    trigger:
      - platform: event
        event_type: call_service
        event_data:
          domain: persistent_notification
          service: dismiss      
    condition:
      - condition: template
        value_template: '{{ trigger.event.data.service_data.notification_id == "staubsauger_leeren" }}'
    action:
      - service: counter.reset
        entity_id: counter.behaelter_leeren
      - service: vacuum.return_to_base
        entity_id: vacuum.roborock_vacuum        