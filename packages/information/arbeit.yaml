sensor:
  - platform: google_travel_time
    api_key: !secret googlemaps_apikey
    name: Fahrzeit zur Arbeit
    origin: !secret googlemaps_home
    destination: !secret googlemaps_work

  - platform: google_travel_time
    api_key: !secret googlemaps_apikey
    name: Fahrzeit nach Hause
    origin: !secret googlemaps_work
    destination: !secret googlemaps_home

  - platform: here_travel_time
    name: Fahrzeit Arbeit
    app_id: !secret here_app_id
    app_code: !secret here_app_code
    origin_latitude: !secret home_latitude
    origin_longitude: !secret home_longitude
    destination_latitude: !secret work_latitude
    destination_longitude: !secret work_longitude
    traffic_mode: true

  - platform: here_travel_time
    name: Fahrzeit Hause
    app_id: !secret here_app_id
    app_code: !secret here_app_code
    origin_latitude: !secret work_latitude
    origin_longitude: !secret work_longitude
    destination_latitude: !secret home_latitude
    destination_longitude: !secret home_longitude
    traffic_mode: true

  - platform: template
    sensors:
      abfahrzeit:
        friendly_name: Abfahrzeit
        icon_template: mdi:clock-start
        unit_of_measurement: 'Uhr'
        entity_id:
          - input_select.arbeit_stunden
          - input_select.arbeit_minuten
          - input_select.arbeit_puffer
          - sensor.fahrzeit_zur_arbeit
          - binary_sensor.schlechtes_wetter
        value_template: >-
          {% set minuten_arbeit = (states.input_select.arbeit_stunden.state | int * 60) + (states.input_select.arbeit_minuten.state | int) | int %}
          {% set verzoegerung_wetter = (10 if states.binary_sensor.schlechtes_wetter.state == 'on' else 0) %}
          {% set minuten_minus_fahrzeit = (minuten_arbeit - states.sensor.fahrzeit_zur_arbeit.state | int) - (states.input_select.arbeit_puffer.state | int) - (verzoegerung_wetter | int) | int %}
          {% set stunde_abfahrt = (minuten_minus_fahrzeit / 60) | int %}
          {% set minuten_abfahrt = (minuten_minus_fahrzeit - stunde_abfahrt * 60) | int %}
          {% set abfahrt = "%0.02d:%0.02d" | format(stunde_abfahrt, minuten_abfahrt ) %}

          {{ abfahrt }}

input_select:
  arbeit_stunden:
    name: Stunde
    options:
      - 5
      - 6
      - 7
      - 18
      - 19
      - 20
    initial: 6
    icon: mdi:av-timer

  arbeit_minuten:
    name: Minute
    options:
      - 0
      - 10
      - 20
      - 30
      - 40
      - 50
    initial: 50
    icon: mdi:timer

  arbeit_puffer:
    name: Puffer
    options:
      - 0
      - 10
      - 20
      - 30
    initial: 10
    icon: mdi:timelapse

automation:
  - alias: 'Benachrichtigung Arbeit'
    trigger:
      - platform: template
        value_template: '{{ states.sensor.time.state == states.sensor.abfahrzeit.state }}'
    condition:
      - condition: state
        entity_id: binary_sensor.arbeitstag
        state: 'on'
      - condition: state
        entity_id: calendar.urlaub
        state: 'off'
    action:
      - service: !secret tts_service
        data_template:
          message: >-
            "Es ist Zeit zur Arbeit zu fahren. Die aktuelle Fahrzeit betr√§gt {{ states.sensor.fahrzeit_zur_arbeit.state }} Minuten.{% if is_state('binary_sensor.schlechtes_wetter', 'on') %} Aktuell ist mit {{ states.sensor.wetterlage.state }} zu rechnen.{% endif %}"

#  - alias: "Fahrzeit Arbeit"
#    trigger:
#      - platform: time_pattern
#        minutes: '/2'
#    condition:
#      - condition: time
#        after: '08:00:00'
#        before: '11:00:00'
#      - condition: time
#        weekday:
#          - mon
#          - tue
#          - wed
#          - thu
#          - fri
#    action:
#      - service: homeassistant.update_entity
#        entity_id: sensor.morning_commute

homeassistant:
  customize:
    sensor.fahrzeit_zur_arbeit:
      icon: mdi:car-estate
    sensor.fahrzeit_nach_hause:
      icon: mdi:car-sports