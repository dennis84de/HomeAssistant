input_select:
  arbeit_puffer:
    name: Puffer
    options:
      - "10"
      - "20"
      - "30"
    icon: mdi:timelapse         

input_datetime:
  arbeit_beginn:
    name: Arbeit Beginn
    has_date: false
    has_time: true
    icon: mdi:timer

input_number:   
  arbeit_dauer:
    name: Arbeit Dauer
    min: 0
    max: 12
    step: 1
        
sensor:
  - platform: here_travel_time
    name: Fahrzeit zur Arbeit
    api_key: !secret here_api_key
    origin_latitude: !secret home_latitude
    origin_longitude: !secret home_longitude
    destination_latitude: !secret work_latitude
    destination_longitude: !secret work_longitude
    traffic_mode: true

  - platform: here_travel_time
    name: Fahrzeit nach Hause
    api_key: !secret here_api_key
    origin_latitude: !secret work_latitude
    origin_longitude: !secret work_longitude    
    destination_latitude: !secret home_latitude
    destination_longitude: !secret home_longitude
    traffic_mode: true

  - platform: template
    sensors:
      abfahrzeit:
        friendly_name: Abfahrzeit
        icon_template: mdi:clock-start
        unit_of_measurement: 'Uhr'
        value_template: >-
          {% set fahrzeitMinuten = states('sensor.fahrzeit_zur_arbeit_duration_in_traffic') | int(0) %}
          {% set beginnMinuten = (state_attr('input_datetime.arbeit_beginn', 'timestamp') / 60) | int(0) %}
          {% set pufferMinuten = states('input_select.arbeit_puffer') | int(0) %}
          {% set verzoegerungWetter = (10 if is_state('binary_sensor.schlechtes_wetter', 'on') else 0) %}

          {% set abfahrzeitMinuten = beginnMinuten - fahrzeitMinuten - pufferMinuten - verzoegerungWetter %}
          {% set stundeAbfahrt = (abfahrzeitMinuten / 60) | int(0) %}
          {% set minuteAbfahrt = (abfahrzeitMinuten - stundeAbfahrt * 60) | int(0) %}
          {% set uhrzeitAbfahrt = "%0.02d:%0.02d" | format(stundeAbfahrt, minuteAbfahrt ) %}

          {{ uhrzeitAbfahrt }}
          
      naechstes_buero:
        friendly_name: Nächstes Büro
        value_template: >
          {% if state_attr('calendar.arbeit_buero', 'start_time') %}
            {% set weekday = as_timestamp(state_attr('calendar.arbeit_buero', 'start_time'), None) | timestamp_custom("%w", True) | int(0) %}

            {{ ['Montag','Dienstag','Mittwoch','Donnerstag','Freitag','Samstag','Sonntag'][weekday-1] }}, {{ as_timestamp(state_attr('calendar.arbeit_buero', 'start_time'), None) | timestamp_custom("%d.%m.%Y", True) | string }}
          {% else %}
            -
          {% endif %}
        icon_template: mdi:briefcase          
        
binary_sensor:
  - platform: workday
    name: Arbeitstag
    country: DE
    province: NW
    
  - platform: workday
    name: Arbeitstag morgen
    country: DE
    province: NW
    days_offset: 1    
    
  - platform: template
    sensors:
      buero_heute:
        friendly_name: 'Büro heute'
        value_template: >-
          {% set NextOffice = state_attr('calendar.arbeit_buero', 'start_time') %}
          
          {% set istBuero = false if NextOffice == None else (NextOffice | as_datetime).strftime('%j')|int - now().strftime('%j')|int == 0 %}         
          {% set istHomeOffice = is_state('input_boolean.home_office', 'on') %}
          {% set istArbeitstag = is_state('binary_sensor.arbeitstag', 'on') %}
          {% set keinUrlaub = is_state('calendar.urlaub', 'off') %}
          {% set nichtKrank = is_state('calendar.arbeit_krank', 'off') %}

          {{ True if (istBuero and istArbeitstag and keinUrlaub and nichtKrank) else False }}
          
      buero_morgen:
        friendly_name: 'Büro morgen'
        value_template: >-
          {% set NextOffice = state_attr('calendar.arbeit_buero', 'start_time') %}
          
          {{ false if NextOffice == None else (NextOffice | as_datetime).strftime('%j')|int - now().strftime('%j')|int == 1 }}
          
automation:             
  - alias: 'Benachrichtigung Arbeit'
    id: "benachrichtigung_arbeit"
    trigger:
      - platform: template
        value_template: '{{ states("sensor.time") == states("sensor.abfahrzeit") }}'
    condition:
      - condition: template
        value_template: >-        
          {% set istBuero = is_state('binary_sensor.buero_heute', 'on') %}          
          {% set istArbeitstag = is_state('binary_sensor.arbeitstag', 'on') %}
          {% set keinUrlaub = is_state('calendar.urlaub', 'off') %}
          {% set nichtKrank = is_state('calendar.arbeit_krank', 'off') %}

          {{ True if (istBuero and istArbeitstag and keinUrlaub and nichtKrank) else False }}        
    action:
      - service: !secret tts_service
        data:
          message: >-
            "Es ist Zeit zur Arbeit zu fahren. Die aktuelle Fahrzeit beträgt {{ states('sensor.fahrzeit_zur_arbeit_duration_in_traffic') }} Minuten.{% if is_state('binary_sensor.schlechtes_wetter', 'on') %} Aktuell ist mit {{ states('sensor.wetterlage') }} zu rechnen.{% endif %}"
     

  - alias: "Fahrzeit nach Hause"
    id: "fahrzeit_nach_hause"
    trigger:
      platform: event
      event_type: telegram_command
      event_data:
        command: '/fahrzeit'
    action:
      - service: notify.telegram
        data:
          title: "Fahrzeit nach Hause"
          message: >-
            Die Fahrzeit von der Arbeit nach Hause beträgt aktuell {{ states('sensor.fahrzeit_nach_hause_duration_in_traffic') }} Minuten.
            
            
            Die folgende Route wird empfohlen:
            {{ states('sensor.fahrzeit_nach_hause_route') }}
          
homeassistant:
  customize:
    sensor.fahrzeit_zur_arbeit_duration_in_traffic:
      icon: mdi:car-estate
    sensor.fahrzeit_nach_hause_duration_in_traffic:
      icon: mdi:car-sports
