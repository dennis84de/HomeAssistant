input_select:
  arbeit_puffer:
    name: Puffer
    options:
      - "10"
      - "20"
      - "30"
    icon: mdi:timelapse         

input_datetime:
  arbeit_beginn:
    name: Arbeit Beginn
    has_date: false
    has_time: true
    icon: mdi:timer

input_number:
  arbeit_beginn_wecker:
    name: Arbeit Beginn Wecker
    min: 0   
    max: 180
    step: 5
    icon: mdi:timer-sand
    
sensor:
  - platform: here_travel_time
    name: Fahrzeit zur Arbeit
    api_key: !secret here_api_key
    origin_latitude: !secret home_latitude
    origin_longitude: !secret home_longitude
    destination_latitude: !secret work_latitude
    destination_longitude: !secret work_longitude
    traffic_mode: true

  - platform: here_travel_time
    name: Fahrzeit nach Hause
    api_key: !secret here_api_key
    origin_latitude: !secret work_latitude
    origin_longitude: !secret work_longitude    
    destination_latitude: !secret home_latitude
    destination_longitude: !secret home_longitude
    traffic_mode: true

  - platform: template
    sensors:
      abfahrzeit:
        friendly_name: Abfahrzeit
        icon_template: mdi:clock-start
        unit_of_measurement: 'Uhr'
        value_template: >-
          {% set fahrzeitMinuten = states('sensor.fahrzeit_zur_arbeit') | int %}
          {% set beginnMinuten = (state_attr('input_datetime.arbeit_beginn', 'timestamp') / 60) | int %}
          {% set pufferMinuten = states('input_select.arbeit_puffer') | int %}
          {% set verzoegerungWetter = (10 if is_state('binary_sensor.schlechtes_wetter', 'on') else 0) %}

          {% set abfahrzeitMinuten = beginnMinuten - fahrzeitMinuten - pufferMinuten - verzoegerungWetter %}
          {% set stundeAbfahrt = (abfahrzeitMinuten / 60) | int %}
          {% set minuteAbfahrt = (abfahrzeitMinuten - stundeAbfahrt * 60) | int %}
          {% set uhrzeitAbfahrt = "%0.02d:%0.02d" | format(stundeAbfahrt, minuteAbfahrt ) %}

          {{ uhrzeitAbfahrt }}

binary_sensor:
  - platform: workday
    name: Arbeitstag
    country: DE
    province: NW
    
  - platform: workday
    name: Arbeitstag morgen
    country: DE
    province: NW
    days_offset: 1    
    
  - platform: template
    sensors:
      buero_heute:
        friendly_name: 'Büro heute'
        value_template: >-
          {% set istBuero = is_state('calendar.arbeit_buero', 'on') %}         
          {% set istHomeOffice = is_state('input_boolean.home_office', 'on') %}
          {% set istArbeitstag = is_state('binary_sensor.arbeitstag', 'on') %}
          {% set keinUrlaub = is_state('calendar.urlaub', 'off') %}
          {% set nichtKrank = is_state('calendar.arbeit_krank', 'off') %}

          {{ True if (istBuero and istArbeitstag and keinUrlaub and nichtKrank) else False }}
          
      buero_morgen:
        friendly_name: 'Büro morgen'
        value_template: >-
          {% set NextOffice = state_attr('calendar.arbeit_buero', 'start_time') %}
          
          {% if NextOffice == None %}
            False
          {% else %}
            {% set NextOfficeTime = strptime(state_attr('calendar.arbeit_buero', 'start_time'),'%Y-%m-%d %H:%M:%S') %}

            {{ NextOfficeTime.strftime('%j')|int - now().strftime('%j')|int == 1 }}          
          {% endif %}
          
      infos_buero_anzeigen:
        friendly_name: 'Infos anzeigen'        
        value_template: >-
          {% set buero_heute = is_state('binary_sensor.buero_heute', 'on') %}
          {% set buero_morgen = is_state('binary_sensor.buero_morgen', 'on') %}
          {% set arbeitstag = is_state('binary_sensor.arbeitstag', 'on') %}
          {% set keinUrlaub = is_state('calendar.urlaub', 'off') %}
          
          {{ keinUrlaub and arbeitstag and (buero_heute or buero_morgen) }}

automation:             
  - alias: 'Benachrichtigung Arbeit'
    id: "benachrichtigung_arbeit"
    trigger:
      - platform: template
        value_template: '{{ states("sensor.time") == states("sensor.abfahrzeit") }}'
    condition:
      - condition: template
        value_template: >-        
          {% set istBuero = is_state('binary_sensor.buero_heute', 'on') %}          
          {% set istArbeitstag = is_state('binary_sensor.arbeitstag', 'on') %}
          {% set keinUrlaub = is_state('calendar.urlaub', 'off') %}
          {% set nichtKrank = is_state('calendar.arbeit_krank', 'off') %}

          {{ True if (istBuero and istArbeitstag and keinUrlaub and nichtKrank) else False }}        
    action:
      - service: !secret tts_service
        data:
          message: >-
            "Es ist Zeit zur Arbeit zu fahren. Die aktuelle Fahrzeit beträgt {{ states('sensor.fahrzeit_zur_arbeit') }} Minuten.{% if is_state('binary_sensor.schlechtes_wetter', 'on') %} Aktuell ist mit {{ states('sensor.wetterlage') }} zu rechnen.{% endif %}"

  - alias: 'Arbeitsbeginn geändert'
    id: "arbeitsbeginn_geaendert"
    trigger:
      - platform: state
        entity_id: input_datetime.arbeit_beginn
      - platform: state
        entity_id: input_number.arbeit_beginn_wecker        
    condition:
      - condition: or
        conditions:
          - condition: state
            entity_id: binary_sensor.buero_heute
            state: 'on'
          - condition: state
            entity_id: binary_sensor.buero_morgen
            state: 'on'
    action:
      - service: input_datetime.set_datetime
        target:
          entity_id: input_datetime.alarm_standard_buero
        data:
          time: >-
            {% set arbeitBeginnInMinuten = (state_attr('input_datetime.arbeit_beginn', 'timestamp') / 60 ) | int %}
            {% set vorlaufInMinuten = states('input_number.arbeit_beginn_wecker') | int %}
            {% set weckerInMinuten = (arbeitBeginnInMinuten -  vorlaufInMinuten) | int %}

            {% set weckerStunden = (weckerInMinuten / 60) |int %}
            {% set weckerMinuten = (weckerInMinuten - (weckerStunden * 60)) | int %}
            {% set weckerUhrzeit = "%0.02d:%0.02d" | format(weckerStunden, weckerMinuten ) %}

            {{ weckerUhrzeit }}          

  - alias: "Fahrzeit nach Hause"
    id: "fahrzeit_nach_hause"
    trigger:
      platform: event
      event_type: telegram_command
      event_data:
        command: '/fahrzeit'
    action:
      - service: notify.telegram
        data:
          title: "Fahrzeit nach Hause"
          message: >-
            Die Fahrzeit von der Arbeit nach Hause beträgt aktuell {{ states('sensor.fahrzeit_nach_hause') }} Minuten.
            
            
            Die folgende Route wird empfohlen:
            {{ state_attr('sensor.fahrzeit_nach_hause', 'route') }}
          
homeassistant:
  customize:
    sensor.fahrzeit_zur_arbeit:
      icon: mdi:car-estate
    sensor.fahrzeit_nach_hause:
      icon: mdi:car-sports
