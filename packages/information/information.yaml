zodiac:
  
template:
  - trigger:
    - platform: time
      at: "00:00:00"
    - platform: homeassistant
      event: start
    - platform: event
      event_type: event_template_reloaded      
    sensor:
      - unique_id: zeitumstellung
        name: "Zeitumstellung"
        device_class: timestamp
        state: >
          {%- macro hms(t) %}
          {%- set dststr = t.dst() | string if t.dst() is not none else "00:00:00" %}
          {%- set h, m, s = dststr.split(':') | map('int') %}
          {{- h * 60 * 60 + m * 60 + s }}   
          {%- endmacro %}

          {%- macro is_dst(t) %}
          {{- hms(t) | int != 0 }}
          {%- endmacro %}

          {%- macro finddst(t, kwarg, rng) %}
          {%- set ns = namespace(previous=is_dst(t), found=none) %}
          {%- for i in range(rng) %}
            {%- set ts = t + timedelta(**{kwarg:i}) %}
            {%- if ns.previous != is_dst(ts) and ns.found is none %}
              {%- set ns.found = i %}
            {%- endif %}
          {%- endfor %}
            {{- ns.found }}
          {%- endmacro %}

          {%- set t = now().replace(hour=0, minute=0, second=0, microsecond=0) %}
          {%- set d = finddst(t, 'days', 366) | int - 1 %}
          {%- set h = finddst(t + timedelta(days=d), 'hours', 25) | int - 1 %}
          {%- set m = finddst(t + timedelta(days=d, hours=h), 'minutes', 61) | int %}
          
          {{ (t + timedelta(days=d, hours=h, minutes=m)).isoformat() }}

  - sensor:
    - unique_id: zeitumstellung_tage
      name: "Zeitumstellung Tage"
      unit_of_measurement: Tage
      state: >
        {% set next = states('sensor.zeitumstellung') | as_datetime %}
        {% set today = now().replace(hour=0, minute=0, second=0, microsecond=0) %}
        
        {{ (next - today).days if next is not none else 0 }}
      availability: >
        {{ states('sensor.zeitumstellung') not in ['unknown', 'unavailable'] }}      

    - unique_id: zeitumstellung_richtung
      name: "Zeitumstellung Richtung"
      state: >
        {%- macro hms(t) %}
        {%- set dststr = t.dst() | string if t.dst() is not none else "00:00:00" %}
        {%- set h, m, s = dststr.split(':') | map('int') %}
        {{- h * 60 * 60 + m * 60 + s }}   
        {%- endmacro %}

        {%- macro phrase(seconds, name, divisor, mod=None) %}
          {%- set value = ((seconds | abs // divisor) % (mod if mod else divisor)) | int %}
          {%- set end = 'n' if value > 1 else '' %}
          {{- '{} {}{}'.format(value, name, end) if value > 0 else '' }}
        {%- endmacro %}

        {%- macro total(seconds) %}
        {%- set values = [ 
          phrase(seconds, 'Stunde', 60*60, 60*60*24),
          phrase(seconds, 'Minute', 60, 60),
          ] | select('!=','') | list %}
        {{- values[:-1] | join(', ') ~ ' and ' ~ values[-1] if values | length > 1 else values | first | default}}
        {%- endmacro %}

        {%- macro finddelta(t, kwarg, rng) %}
        {%- set ns = namespace(previous=hms(t), found=none) %}
        {%- for i in range(rng) %}
          {%- set ts = t + timedelta(**{kwarg:i}) %}
          {%- if ns.previous != hms(ts) and ns.found is none %}
            {%- set before = hms(ts - timedelta(days=1)) | int %}
            {%- set after = hms(ts) | int %}
            {%- set ns.found =  after - before %}
          {%- endif %}
        {%- endfor %}
        {{ ns.found }}
        {%- endmacro %}

        {%- set t = now().replace(hour=0, minute=0, second=0, microsecond=0) %}
        {%- set delta = finddelta(t, 'days', 365) | int %}
        {% if delta > 0 %}
          {{ total(delta | abs) }} vor
        {% else %}
          {{ total(delta | abs) }} zurück
        {% endif %}      
  
sensor:
  - platform: imap
    server: !secret email_server
    port: 993
    name: Ungelesene Mails
    username: !secret email_username
    password: !secret email_password

  - platform: time_date
    display_options:
      - 'time'
      - 'date'
      - 'date_time'
      
  - platform: next_holiday
    sources: 
      - country: "DE"
        state: "NW"
    
automation:
  - alias: "Neue E-Mail"
    id: "neue_email"
    trigger:
      - platform: state
        entity_id: sensor.ungelesene_mails
    condition: 
      - "{{ is_state('person.dennis', 'home') }}"
      - "{{ is_state('binary_sensor.schlafen_aktiv', 'off') }}"
      - "{{ (trigger.to_state.state | int(0)) > (trigger.from_state.state | int(0)) }}"  
    action:
      - service: !secret tts_service
        data:
          message: >-
            {% set mailCount = (trigger.to_state.state | int(0)) - (trigger.from_state.state | int(0)) %}

            {% if mailCount == 1 %}
              Eine neue E-Mail ist eingegangen.
            {% else %}
              Es sind {{ mailCount }} neue E-Mails eingegangen.
            {% endif %}      
      - choose:
          - conditions:
              - condition: state
                entity_id: media_player.kodi_wohnzimmer
                state: 'playing'
            sequence:
              - service: notify.kodi_wohnzimmer
                data:
                  title: 'E-Mail'
                  message: >-
                    {% set mailCount = states('sensor.ungelesene_mails') | default(0) | int(0) %}

                    {% if mailCount == 1 %}
                      Eine neue E-Mail ist eingegangen.
                    {% else %}
                      Es sind {{ mailCount }} neue E-Mails eingegangen.
                    {% endif %}
                  data:
                    displaytime: 5000
                    icon: "info"
            
panel_iframe:
  infoscreen:
    title: Infoscreen
    icon: mdi:information
    url: http://192.168.2.100/infoscreen/

homeassistant:
  customize_glob:
    sensor.*_perception:
      icon: mdi:home-thermometer-outline     
      
  customize:      
    binary_sensor.arbeitstag:
      icon: mdi:account-hard-hat      
    sensor.time:
      friendly_name: Uhrzeit      
    sensor.next_holiday:
      friendly_name: Nächster Feiertag
    sensor.satelliten:
      unit_of_measurement: Satelliten
    sensor.katastrophenalarm:
      unit_of_measurement: Warnungen
    sensor.watchman_missing_entities:
      unit_of_measurement: Entität(en)
    sensor.watchman_missing_services:
      unit_of_measurement: Dienst(e)