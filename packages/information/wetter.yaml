input_boolean:
  wetter_warnungen_einschalten:
    name: Wetterwarnungen
    icon: mdi:weather-lightning-rainy

input_number:
  helligkeit_grenzwert:
    name: Helligkeit Grenzwert
    min: 100
    max: 1000
    step: 50 

binary_sensor:
  - platform: template
    sensors:
      schlechtes_wetter:
        friendly_name: "Schlechtes Wetter"
        icon_template: mdi:weather-snowy-rainy
        value_template: "{{ not is_state('sensor.wetterlage', 'Klar') }}"

      sonne_tagsueber:
        friendly_name: "Sonne tagsüber"
        value_template: "{{ states('sensor.balkon_helligkeit_mittelwert') | float(0) > states('input_number.helligkeit_grenzwert') | float(500) }}"
          
      sommerzeit:
        friendly_name: "Sommerzeit"     
        icon_template: "mdi:weather-sunny"          
        value_template: "{{ now().timetuple().tm_isdst > 0 }}"  
    
sensor:
  - platform: average
    name: 'Balkon Helligkeit Mittelwert'
    duration:
      minutes: 30
    entities:
      - sensor.balkon_helligkeit
      
  - platform: rest
    name: regenradar
    scan_interval: 300
    timeout: 60
    json_attributes:
      - raintext
      - rainin30min
      - rainin60min
      - rainin120min
    resource: !secret regenradar_url
    value_template: "{{ value_json.raintext if value_json is defined else '-' }}"
    
  - platform: template
    sensors:
      wetterlage:
        friendly_name: 'Wetterlage'
        icon_template: mdi:weather-windy-variant
        value_template: >
          {% if is_state('sensor.wetter_dortmund_wetterzustand', 'snow') %}
            Schnee
          {% elif ((states('sensor.wetter_dortmund_temperatur') | int(0) < 4) and (states('sensor.wetter_dortmund_taupunkt') | int(0) < 6)
            and (states('sensor.wetter_dortmund_windgeschwindigkeit') | int(0) < 12) and (states('sensor.wetter_dortmund_bewolkungsgrad') | int(0) < 20)
            and (states('sensor.wetter_dortmund_luftfeuchtigkeit') | int(0) > 50)) %}
            Frost
          {% else %} 
            Klar
          {% endif %}

      tageszeit:
        friendly_name: Tageszeit
        value_template: >-
          {% if (as_timestamp(state_attr('sun.sun', 'next_dusk'), None)) - (as_timestamp(state_attr('sun.sun', 'next_setting'), None)) < 0 %}
            Abenddämmerung
          {% elif (as_timestamp(state_attr('sun.sun', 'next_rising'), None)) - (as_timestamp(state_attr('sun.sun', 'next_dawn'), None)) < 0 %}
            Morgendämmerung
          {% elif (state_attr('sun.sun', 'elevation')) < - 4 %}
            Nacht
          {% else %}
            Tag
          {% endif %}
        entity_picture_template: >-
          {% if (as_timestamp(state_attr('sun.sun', 'next_dusk'), None)) - (as_timestamp(state_attr('sun.sun', 'next_setting'), None)) < 0 %}
            /local/sonne/Dawn.png
          {% elif (as_timestamp(state_attr('sun.sun', 'next_rising'), None)) - (as_timestamp(state_attr('sun.sun', 'next_dawn'), None)) < 0 %}
            /local/sonne/Dusk.png         
          {% elif (state_attr('sun.sun', 'elevation')) < - 4 %}
            /local/sonne/Night.png
          {% else %}
            /local/sonne/Day.png
          {% endif %}

      sonnenaufgang:
        friendly_name: 'Nächster Sonnenaufgang'
        value_template: "{{ as_timestamp(state_attr('sun.sun', 'next_rising'), None) | timestamp_custom('%d.%m.%Y %H:%M') }}"
        icon_template: mdi:weather-sunset-up

      sonnenuntergang:
        friendly_name: 'Nächster Sonnenuntergang'
        value_template: "{{ as_timestamp(state_attr('sun.sun', 'next_setting'), None) | timestamp_custom('%d.%m.%Y %H:%M') }}"
        icon_template: mdi:weather-sunset-down

      mondphase:
        friendly_name: Mondphase
        value_template: >-
          {% set phase = states('sensor.moon') %}
          {% set mapper = {'new_moon':'Neumond',
                           'waxing_crescent':'Zunehmender Sichelmond',
                           'first_quarter':'Zunehmender Halbmond',
                           'waxing_gibbous':'Zunehmender Dreiviertelmond',
                           'full_moon':'Vollmond',
                           'waning_gibbous':'Abnehmender Dreiviertelmond',
                           'last_quarter':'Abnehmender Halbmond'} %}
                           
          {{mapper.get(phase,'Abnehmender Sichelmond')}}

        entity_picture_template: >-
          {% set state = states('sensor.moon') %}
                    
          /local/mond/{{state}}.jpg

      windrichtung:
        friendly_name: 'Windrichtung'
        icon_template: mdi:compass
        value_template: >-
          {% set winbearing = (states('sensor.wetter_dortmund_windrichtung') | float(0) / 45) | int(0) | round + 1 %}
          {% set winddir = ['Nord', 'Nordost','Ost','Südost','Süd','Südwest','West','Nordwest']%}
          
          {{ winddir[winbearing]}}
        entity_picture_template: >-
          {% set winbearing = (states('sensor.wetter_dortmund_windrichtung') | float(0) / 45) | int(0) | round + 1 %}
          {% set winddir = ['0', '45','90','135','180','225','270','315'] %}
          
          {{ "/local/wind/" ~ winddir[winbearing] ~ ".png" }}

      wetterwarnungen_aktiv:
        friendly_name: "Wetterwarnungen"      
        icon_template: mdi:weather-partly-lightning
        value_template: >-
          {% set ns = namespace(found=0) %}          
          {% set current_count = state_attr("sensor.wetterwarnungen_current_warning_level", "warning_count") %}
          {% set advance_count = state_attr("sensor.wetterwarnungen_advance_warning_level", "warning_count") %}
          
          {% if current_count != None and advance_count != None and (current_count > 0 or advance_count > 0) %}
            {% for i in range(current_count) %}
              {% set startTime = as_timestamp(state_attr("sensor.wetterwarnungen_current_warning_level", "warning_" ~ loop.index ~ "_start"), None) %}
              {% set endTime = as_timestamp(state_attr("sensor.wetterwarnungen_current_warning_level", "warning_" ~ loop.index ~ "_end"), None) %}
            
              {% if startTime < as_timestamp(now()) < endTime %}
                {% set ns.found = ns.found + 1 -%}
              {%endif%}
            {% endfor %}

            {% for i in range(advance_count) %}
              {% set startTime = as_timestamp(state_attr("sensor.wetterwarnungen_advance_warning_level", "warning_" ~ loop.index ~ "_start"), None) %}
              {% set endTime = as_timestamp(state_attr("sensor.wetterwarnungen_advance_warning_level", "warning_" ~ loop.index ~ "_end"), None) %}
              
              {% if startTime < as_timestamp(now()) < endTime %}
                {% set ns.found = ns.found + 1 -%}
              {%endif%}
            {% endfor %}              
          {% endif %}                
          
          {{ ns.found }}   
          
automation:
  - alias: "Balkontür schließen"
    id: "balkontuer_schliessen"
    trigger:
      - platform: template
        value_template: "{{ states('sensor.balkon_temperatur') | float(0) > states('sensor.wohnzimmer_temperatur') | float(0) + 2 }}"
      - platform: state
        entity_id: binary_sensor.balkontuer
        to: 'on'
        for:
          minutes: 10
    condition:       
      - "{{ is_state('binary_sensor.allein_zu_hause', 'on') }}"
      - "{{ states('sensor.wohnzimmer_temperatur') | float(0) > 0 }}"
      - "{{ states('sensor.balkon_temperatur') | float(0) > 23 }}"      
      - "{{ states('sensor.balkon_temperatur') | float(0) > states('sensor.wohnzimmer_temperatur') | float(0) + 2 }}"
      - condition: or
        conditions:
          - "{{ is_state('binary_sensor.balkontuer', 'on') }}"
          - "{{ is_state('binary_sensor.fenster_wohnzimmer', 'on') }}"
    action:
      - service: !secret tts_service
        data:
          message: >-
            {% set temperaturBalkon = states('sensor.balkon_temperatur') | float(0) %}
            {% set temperaturWohnzimmer = states('sensor.wohnzimmer_temperatur') | float(0) %}

            {% set difference = (temperaturBalkon - temperaturWohnzimmer) | round(default=0) %}

            Die Balkontür sollte geschlossen werden. Auf dem Balkon ist es {{ temperaturBalkon | round(default=0) }} Grad warm und damit {{ difference }} Grad wärmer als im Wohnzimmer.

  - alias: 'Wetterwarnungen'
    id: "wetterwarnungen"
    trigger:
      - platform: state  
        entity_id: sensor.wetterwarnungen_aktiv
    condition:
      - "{{ is_state('binary_sensor.schlafen_aktiv', 'off') }}" 
      - "{{ is_state('input_boolean.wetter_warnungen_einschalten', 'on') }}"       
      - "{{ not is_state('person.dennis', 'home') or is_state('calendar.borussia_dortmund', 'off') }}"
      - "{{ trigger.to_state.state > trigger.from_state.state }}" 
    action:
      - choose:
          - conditions:
              - condition: state
                entity_id: person.dennis
                state: 'not_home'
            sequence:             
              - service: notify.telegram
                data:
                  title: "Wetterwarnung"
                  message: >-
                    {% set current_count = state_attr("sensor.wetterwarnungen_current_warning_level", "warning_count") %}
                    {% set advance_count = state_attr("sensor.wetterwarnungen_advance_warning_level", "warning_count") %}

                    {% if (current_count == None or advance_count == None) or (current_count == 0 and advance_count == 0) %}
                      Aktuell liegt keine Wetterwarnung vor.
                    {% else %}
                      {% for i in range(current_count) %}
                        {%- set headline = state_attr("sensor.wetterwarnungen_current_warning_level", "warning_" ~ loop.index ~ "_headline") %}
                        {%- set description = state_attr("sensor.wetterwarnungen_current_warning_level", "warning_" ~ loop.index ~ "_description") %}
                        {%- set startTime = as_timestamp(state_attr("sensor.wetterwarnungen_current_warning_level", "warning_" ~ loop.index ~ "_start"), None) %}
                        {%- set endTime = as_timestamp(state_attr("sensor.wetterwarnungen_current_warning_level", "warning_" ~ loop.index ~ "_end"), None) %}
            
                        {%- if (startTime < as_timestamp(now()) < endTime) and headline != None -%}
                          {{ headline  ~ '. ' ~ description if description != None else '' }}    
                        {%- endif %}    
                      {% endfor %}   
                      
                      {% for i in range(advance_count) %}
                        {%- set headline = state_attr("sensor.wetterwarnungen_advance_warning_level", "warning_" ~ loop.index ~ "_headline") %}
                        {%- set description = state_attr("sensor.wetterwarnungen_advance_warning_level", "warning_" ~ loop.index ~ "_description") %}
                        {%- set startTime = as_timestamp(state_attr("sensor.wetterwarnungen_advance_warning_level", "warning_" ~ loop.index ~ "_start"), None) %}
                        {%- set endTime = as_timestamp(state_attr("sensor.wetterwarnungen_advance_warning_level", "warning_" ~ loop.index ~ "_end"), None) %}
            
                        {%- if (startTime < as_timestamp(now()) < endTime) and headline != None -%}
                          {{ headline  ~ '. ' ~ description if description != None else '' }}    
                        {%- endif %}                        
                      {% endfor %}  
                    {% endif %}

        default:      
          - service: !secret tts_service
            data:
              message: >-
                {% set current_count = state_attr("sensor.wetterwarnungen_current_warning_level", "warning_count") %}
                {% set advance_count = state_attr("sensor.wetterwarnungen_advance_warning_level", "warning_count") %}

                {% if current_count == None or advance_count == None or (current_count == 0 and advance_count == 0) %}
                  Aktuell liegt keine Wetterwarnung vor.
                {% else %}
                  Achtung!
                  {% for i in range(current_count) %}
                    {% set headline = state_attr("sensor.wetterwarnungen_current_warning_level", "warning_" ~ loop.index ~ "_headline") %}
                    {% set description = state_attr("sensor.wetterwarnungen_current_warning_level", "warning_" ~ loop.index ~ "_description") | regex_replace(find=' \([^)]*\)', replace='', ignorecase=False) %}
                    {% set startTime = as_timestamp(state_attr("sensor.wetterwarnungen_current_warning_level", "warning_" ~ loop.index ~ "_start"), None) %}
                    {% set endTime = as_timestamp(state_attr("sensor.wetterwarnungen_current_warning_level", "warning_" ~ loop.index ~ "_end"), None) %}
                        
                    {% if startTime < as_timestamp(now()) < endTime %}
                      {% if headline != None %} {{ headline }}. {% endif %} {% if description != None %} {{ description }} {% endif %}
                    {%endif%}                                                
                  {% endfor %}

                  {% for i in range(advance_count) %}
                    {% set headline = state_attr("sensor.wetterwarnungen_advance_warning_level", "warning_" ~ loop.index ~ "_headline") %}
                    {% set description = state_attr("sensor.wetterwarnungen_advance_warning_level", "warning_" ~ loop.index ~ "_description") | regex_replace(find=' \([^)]*\)', replace='', ignorecase=False) %}
                    {% set startTime = as_timestamp(state_attr("sensor.wetterwarnungen_advance_warning_level", "warning_" ~ loop.index ~ "_start"), None) %}
                    {% set endTime = as_timestamp(state_attr("sensor.wetterwarnungen_advance_warning_level", "warning_" ~ loop.index ~ "_end"), None) %}
                        
                    {% if startTime < as_timestamp(now()) < endTime %}
                      {% if headline != None %} {{ headline }}. {% endif %} {% if description != None %} {{ description }} {% endif %}
                    {%endif%}                      
                  {% endfor %}              
                {% endif %}      
            
homeassistant:
  customize:
    sensor.regenradar:
      friendly_name: Regenradar
      icon: mdi:weather-pouring