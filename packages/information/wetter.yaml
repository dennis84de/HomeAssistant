sun:

camera:
  - platform: generic
    still_image_url: http://api.sat24.com/mostrecent/DE/visual5hdcomplete
    name: Wetter

  - platform: generic
    still_image_url: http://www.grueninger.com/webcam/current.jpg
    name: Dortmund

gdacs:
  radius: 100

input_boolean:
  wetter_warnungen_einschalten:
    name: Wetterwarnungen
    icon: mdi:weather-lightning-rainy

input_number:
  helligkeit_grenzwert:
    name: Helligkeit Grenzwert
    min: 100
    max: 1000
    step: 50 
    
template:
  - trigger:
      - platform: state
        entity_id: sensor.regenradar
      - platform: homeassistant
        event: start
      - platform: event
        event_type: event_template_reloaded             
    sensor:
      - name: 'Regen Text'        
        unique_id: 'regenradar_text'
        icon: 'mdi:weather-pouring'
        state: "{{ state_attr('sensor.regenradar', 'raintext') }}"
    binary_sensor:
      - name: 'Regen in 30 min'        
        unique_id: 'regenradar_30m'
        icon: "{{ 'mdi:weather-pouring' if is_state_attr('sensor.regenradar', 'rainin30min', 1) else 'mdi:weather-partly-cloudy' }}"
        state: "{{ is_state_attr('sensor.regenradar', 'rainin30min', 1) }}"
      - name: 'Regen in 60 min'      
        unique_id: 'regenradar_60m'
        icon: "{{ 'mdi:weather-pouring' if is_state_attr('sensor.regenradar', 'rainin60min', 1) else 'mdi:weather-partly-cloudy' }}"
        state: "{{ is_state_attr('sensor.regenradar', 'rainin60min', 1)  }}"
      - name: 'Regen in 120 min'        
        unique_id: 'regenradar_120m'
        icon: "{{ 'mdi:weather-pouring' if is_state_attr('sensor.regenradar', 'rainin120min', 1) else 'mdi:weather-partly-cloudy' }}"
        state: "{{ is_state_attr('sensor.regenradar', 'rainin120min', 1)  }}"  
    
binary_sensor:
  - platform: car_wash
    name: Auto waschen
    days: 5
    weather: weather.dwd_weather_dortmund

  - platform: snowtire
    name: Autoreifen    
    weather: weather.dwd_weather_dortmund
    
  - platform: iss

  - platform: template
    sensors:
      schlechtes_wetter:
        friendly_name: "Schlechtes Wetter"
        icon_template: mdi:weather-snowy-rainy
        value_template: "{{ not is_state('sensor.wetterlage', 'Klar') }}"

      sonne_tagsueber:
        friendly_name: "Sonne tagsüber"
        value_template: >-
          {% if is_state('sensor.balkon_helligkeit', None) or is_state('sensor.balkon_helligkeit', 'unknown') or is_state('sensor.balkon_helligkeit', '0') %}
            {{ states('sensor.helligkeit_wetter') | float(0) > 15 }}
          {% else %}
            {{ states('sensor.balkon_helligkeit_durchschnitt') | float(0) > states('input_number.helligkeit_grenzwert') | float(500) }}
          {% endif %}
          
      sommerzeit:
        friendly_name: "Sommerzeit"     
        icon_template: "mdi:weather-sunny"          
        value_template: "{{ now().timetuple().tm_isdst > 0 }}"  
                           
sensor:
  - platform: moon
      
  - platform: darksky
    api_key: !secret darksky_key
    name: Darksky
    language: de
    forecast:
      - 0
      - 1
      - 2
      - 3
      - 4
      - 5
    scan_interval:
      minutes: 5
    monitored_conditions:
      - icon
      - summary
      - nearest_storm_distance
      - nearest_storm_bearing
      - humidity
      - temperature
      - temperature_high
      - temperature_low
      - apparent_temperature
      - apparent_temperature_high
      - apparent_temperature_low
      - wind_speed
      - wind_bearing
      - precip_type
      - precip_probability
      - precip_accumulation
      - precip_intensity
      - precip_intensity_max
      - uv_index
      - daily_summary
      - pressure
      - visibility
      - cloud_cover
      - ozone
      - hourly_summary
      - dew_point

  - platform: mold_indicator
    name: Schimmelindikator
    indoor_temp_sensor: sensor.mold_wohnzimmer_temperatur
    indoor_humidity_sensor: sensor.mold_wohnzimmer_luftfeuchtigkeit
    outdoor_temp_sensor: sensor.mold_balkon_temperatur
    calibration_factor: 1.16

  - platform: average
    name: 'Balkon Helligkeit Durchschnitt'
    duration:
      minutes: 30
    entities:
      - sensor.balkon_helligkeit
          
  - platform: dwd_weather_warnings
    region_name: Stadt Dortmund
    name: Wetterwarnungen
    
  - platform: opensky
    name: Flugzeuge
    radius: 10
      
  - platform: rest
    name: Strommix
    resource: !secret strommix_url
    unit_of_measurement: '%'
    scan_interval: 3600
    value_template: '{{ value_json[0].eevalue }}'

  - platform: rest
    name: regenradar
    scan_interval: 300
    json_attributes:
      - raintext
      - rainin30min
      - rainin60min
      - rainin120min
    resource: !secret regenradar_url
    value_template: "{{ value_json.raintext }}"
    
  - platform: template
    sensors:
      mold_wohnzimmer_temperatur:
        value_template: >-
          {% if is_state('sensor.wohnzimmer_temperatur', 'unavailable') %}
            {{ 0.00 | float(0) }}
          {% else %}
            {{ states('sensor.wohnzimmer_temperatur') | float(0) }}
          {% endif %}
        unit_of_measurement: '°C'
      mold_wohnzimmer_luftfeuchtigkeit:
        value_template: >-
          {% if is_state('sensor.wohnzimmer_luftfeuchtigkeit', 'unavailable') %}
            {{ 0.00 | float(0) }}
          {% else %}
            {{ states('sensor.wohnzimmer_luftfeuchtigkeit') | float(0) }}
          {% endif %}        
        unit_of_measurement: '%'
      mold_balkon_temperatur:
        value_template: >-        
          {% if is_state('sensor.bewegungsmelder_balkon_temperatur', 'unavailable') %}
            {{ 0.00 | float(0) }}
          {% else %}
            {{ states('sensor.bewegungsmelder_balkon_temperatur') | float(0) }}
          {% endif %}          
        unit_of_measurement: '°C'

      wetterlage:
        friendly_name: 'Wetterlage'
        icon_template: mdi:weather-windy-variant
        value_template: >
          {% if is_state('sensor.darksky_precip' , 'snow') %} Schnee
          {% elif ((states('sensor.darksky_overnight_low_temperature') | int(0) < 4) and (states('sensor.darksky_dew_point') | int(0) < 6)
            and (states('sensor.darksky_wind_speed') | int(0) < 12) and (states('sensor.darksky_cloud_coverage') | int(0) < 20)
            and (states('sensor.darksky_humidity') | int(0) > 50)) %} Frost
          {% elif (states('sensor.darksky_precip_intensity') | int(0) > 7) %} Regen
          {% else %} Klar {% endif %}

      helligkeit_wetter:
        friendly_name: 'Helligkeit'
        icon_template: mdi:theme-light-dark
        value_template: >-
          {%- set irradiance = states('sensor.sun_irradiance_dortmund') | float(0) %} 
                   
          {%- set irradiance_pct = irradiance / 10 %}
          {%- set elevation = state_attr('sun.sun','elevation') | float(0) %}
          {%- set cloud_coverage = states('sensor.darksky_cloud_coverage') | float(0) %}
          {%- set adjusted_clouds = cloud_coverage -  irradiance_pct %}
          {%- set cloud_factor = (1 - (0.75 * ( adjusted_clouds / 100) ** 3 )) %}
          {%- set min_elevation = -6 %}
          {%- set max_elevation = 45 %}
          {%- set adjusted_elevation = elevation - min_elevation %}
          {%- set adjusted_elevation = [adjusted_elevation,0] | max %}
          {%- set adjusted_elevation = [adjusted_elevation,max_elevation - min_elevation] | min %}
          {%- set adjusted_elevation = adjusted_elevation / (max_elevation - min_elevation) %}
          {%- set adjusted_elevation = adjusted_elevation %}
          {%- set adjusted_elevation = adjusted_elevation * 100 %}
          {%- set brightness = adjusted_elevation * cloud_factor %}

          {{ brightness | round }}
        unit_of_measurement: '%'
        device_class: 'illuminance'

      tageszeit:
        friendly_name: Tageszeit
        value_template: >-
          {% if (as_timestamp(state_attr('sun.sun', 'next_dusk'), None)) - (as_timestamp(state_attr('sun.sun', 'next_setting'), None)) < 0 %}
            Abenddämmerung
          {% elif (as_timestamp(state_attr('sun.sun', 'next_rising'), None)) - (as_timestamp(state_attr('sun.sun', 'next_dawn'), None)) < 0 %}
            Morgendämmerung
          {% elif (state_attr('sun.sun', 'elevation')) < - 4 %}
            Nacht
          {% else %}
            Tag
          {% endif %}
        entity_picture_template: >-
          {% if (as_timestamp(state_attr('sun.sun', 'next_dusk'), None)) - (as_timestamp(state_attr('sun.sun', 'next_setting'), None)) < 0 %}
            /local/sonne/Dawn.png
          {% elif (as_timestamp(state_attr('sun.sun', 'next_rising'), None)) - (as_timestamp(state_attr('sun.sun', 'next_dawn'), None)) < 0 %}
            /local/sonne/Dusk.png         
          {% elif (state_attr('sun.sun', 'elevation')) < - 4 %}
            /local/sonne/Night.png
          {% else %}
            /local/sonne/Day.png
          {% endif %}

      sonnenaufgang:
        friendly_name: 'Nächster Sonnenaufgang'
        value_template: "{{ as_timestamp(state_attr('sun.sun', 'next_rising'), None) | timestamp_custom('%d.%m.%Y %H:%M') }}"
        icon_template: mdi:weather-sunset-up

      sonnenuntergang:
        friendly_name: 'Nächster Sonnenuntergang'
        value_template: "{{ as_timestamp(state_attr('sun.sun', 'next_setting'), None) | timestamp_custom('%d.%m.%Y %H:%M') }}"
        icon_template: mdi:weather-sunset-down

      mondphasen:
        friendly_name: Mondphase
        value_template: >-
          {% if is_state('sensor.moon', 'new_moon') %}
            Neumond
          {% elif is_state('sensor.moon', 'waxing_crescent') %}
            Zunehmender Sichelmond
          {% elif is_state('sensor.moon', 'first_quarter') %}
            Zunehmender Halbmond
          {% elif is_state('sensor.moon', 'waxing_gibbous') %}
            Zunehmender Dreiviertelmond
          {% elif is_state('sensor.moon', 'full_moon') %}
            Vollmond
          {% elif is_state('sensor.moon', 'waning_gibbous') %}
            Abnehmender Dreiviertelmond
          {% elif is_state('sensor.moon', 'last_quarter') %}
            Abnehmender Halbmond
          {% elif is_state('sensor.moon', 'waning_crescent') %}
            Abnehmender Sichelmond
          {% endif %}
        entity_picture_template: >-
          {% if is_state('sensor.moon', 'new_moon') %}
            /local/mond/NewMoon.jpg
          {% elif is_state('sensor.moon', 'waxing_crescent') %}
            /local/mond/WaxingCrescent.jpg
          {% elif is_state('sensor.moon', 'first_quarter') %}
            /local/mond/FirstQuarter.jpg
          {% elif is_state('sensor.moon', 'waxing_gibbous') %}
            /local/mond/WaxingGibbous.jpg
          {% elif is_state('sensor.moon', 'full_moon') %}
            /local/mond/FullMoon.jpg
          {% elif is_state('sensor.moon', 'waning_gibbous') %}
            /local/mond/WaningGibbous.jpg
          {% elif is_state('sensor.moon', 'last_quarter') %}
            /local/mond/LastQuarter.jpg
          {% elif is_state('sensor.moon', 'waning_crescent') %}
            /local/mond/WaningCrescent.jpg
          {% endif %}

      uv_index_current:
        friendly_name: 'UV Index'
        unit_of_measurement: 'UV'
        value_template: '{{ states("sensor.current_uv_index") | float(0) | round(2, 0) }}'
        icon_template: '{{ state_attr("sensor.current_uv_index","icon") }}'

      uv_index_max:
        friendly_name: 'Maximaler UV Index'
        unit_of_measurement: 'UV'
        value_template: '{{ states("sensor.max_uv_index") | float(0) | round(2, 0) }}'
        icon_template: '{{ state_attr("sensor.max_uv_index","icon") }}'

      zeit_sonne:
        friendly_name: 'Zeit in der Sonne'
        value_template: >-
          {% if is_state('sensor.skin_type_3_safe_exposure_time', 'unknown') %}
            0
          {% else %}
            {{ states('sensor.skin_type_3_safe_exposure_time') | int(0) }}
          {% endif %}
        icon_template: '{{ state_attr("sensor.skin_type_3_safe_exposure_time","icon") }}'        
        unit_of_measurement: 'Minuten'

      windrichtung:
        friendly_name: 'Windrichtung'
        icon_template: mdi:compass
        value_template: >-
          {% set winbearing = (states('sensor.darksky_wind_bearing') | float(0) / 45) | int(0) | round + 1 %}
          {% set winddir = ['Nord', 'NO','Ost','SO','Süd','SW','West','NW']%}
          
          {{ winddir[winbearing]}}
        entity_picture_template: >-
          {% set winbearing = (states('sensor.darksky_wind_bearing') | float(0) / 45) | int(0) | round + 1 %}
          {% set winddir = ['0', '45','90','135','180','225','270','315'] %}
          
          {{ "/local/wind/" ~ winddir[winbearing] ~ ".png" }}

      wetterwarnungen_aktiv:
        friendly_name: "Wetterwarnungen"      
        icon_template: mdi:weather-partly-lightning
        value_template: >-
          {% set ns = namespace(found=0) %}          
          {% set current_count = state_attr("sensor.wetterwarnungen_current_warning_level", "warning_count") %}
          {% set advance_count = state_attr("sensor.wetterwarnungen_advance_warning_level", "warning_count") %}
          
          {% if current_count != None and advance_count != None and (current_count > 0 or advance_count > 0) %}
            {% for i in range(current_count) %}
              {% set startTime = as_timestamp(state_attr("sensor.wetterwarnungen_current_warning_level", "warning_" ~ loop.index ~ "_start"), None) %}
              {% set endTime = as_timestamp(state_attr("sensor.wetterwarnungen_current_warning_level", "warning_" ~ loop.index ~ "_end"), None) %}
            
              {% if startTime < as_timestamp(now()) < endTime %}
                {% set ns.found = ns.found + 1 -%}
              {%endif%}
            {% endfor %}

            {% for i in range(advance_count) %}
              {% set startTime = as_timestamp(state_attr("sensor.wetterwarnungen_advance_warning_level", "warning_" ~ loop.index ~ "_start"), None) %}
              {% set endTime = as_timestamp(state_attr("sensor.wetterwarnungen_advance_warning_level", "warning_" ~ loop.index ~ "_end"), None) %}
              
              {% if startTime < as_timestamp(now()) < endTime %}
                {% set ns.found = ns.found + 1 -%}
              {%endif%}
            {% endfor %}              
          {% endif %}                
          
          {{ ns.found }}   
          
automation:
  - alias: "Balkontür schließen"
    id: "balkontuer_schliessen"
    trigger:
      - platform: template
        value_template: "{{ states('sensor.bewegungsmelder_balkon_temperatur') | float(0) > states('sensor.wohnzimmer_temperatur') | float(0) + 2 }}"
    condition:       
      - condition: or
        conditions:
          - condition: state
            entity_id: binary_sensor.balkontuer
            state: 'on'
          - condition: state
            entity_id: binary_sensor.fenster_wohnzimmer
            state: 'on'
      - "{{ (states('sensor.wohnzimmer_temperatur') | float(0)) > 0 }}"
      - "{{ (states('sensor.bewegungsmelder_balkon_temperatur') | float(0)) > 23 }}"  
    action:
      - service: !secret tts_service
        data:
          message: >-
            {% set temperaturBalkon = states('sensor.bewegungsmelder_balkon_temperatur') | float(0) %}
            {% set temperaturWohnzimmer = states('sensor.wohnzimmer_temperatur') | float(0) %}

            {% set difference = (temperaturBalkon - temperaturWohnzimmer) | round(default=0) %}

            Die Balkontür sollte geschlossen werden. Auf dem Balkon ist es {{ temperaturBalkon | round(default=0) }} Grad warm und damit {{ difference }} Grad wärmer als im Wohnzimmer.

  - alias: 'Wetterwarnungen'
    id: "wetterwarnungen"
    trigger:
      - platform: state  
        entity_id: sensor.wetterwarnungen_aktiv
    condition:
      - "{{ is_state('binary_sensor.schlafen_aktiv', 'off') }}" 
      - "{{ is_state('input_boolean.wetter_warnungen_einschalten', 'on') }}" 
      - "{{ is_state('input_boolean.besuch', 'off') }}"   
      - "{{ trigger.to_state.state > trigger.from_state.state }}" 
    action:
      - choose:
          - conditions:
              - condition: state
                entity_id: person.dennis
                state: 'not_home'
            sequence:             
              - service: notify.telegram
                data:
                  title: "Wetterwarnung"
                  message: >-
                    {% set current_count = state_attr("sensor.wetterwarnungen_current_warning_level", "warning_count") %}
                    {% set advance_count = state_attr("sensor.wetterwarnungen_advance_warning_level", "warning_count") %}

                    {% if (current_count == None or advance_count == None) or (current_count == 0 and advance_count == 0) %}
                      Aktuell liegt keine Wetterwarnung vor.
                    {% else %}
                      {%- for i in range(current_count) -%}
                        {% set headline = state_attr("sensor.wetterwarnungen_current_warning_level", "warning_" ~ loop.index ~ "_headline") %}
                        {% set description = state_attr("sensor.wetterwarnungen_current_warning_level", "warning_" ~ loop.index ~ "_description") %}
                        {% set startTime = as_timestamp(state_attr("sensor.wetterwarnungen_current_warning_level", "warning_" ~ loop.index ~ "_start"), None) %}
                        {% set endTime = as_timestamp(state_attr("sensor.wetterwarnungen_current_warning_level", "warning_" ~ loop.index ~ "_end"), None) %}
            
                        {% if startTime < as_timestamp(now()) < endTime %}
                          {%- if headline != None -%} {{ headline }}. {% endif -%} {%- if description != None -%} {{ description }} {% endif -%}
                        {%endif%}           
                      {%- endfor -%}

                      {%- for i in range(advance_count) -%}
                        {% set headline = state_attr("sensor.wetterwarnungen_advance_warning_level", "warning_" ~ loop.index ~ "_headline") %}
                        {% set description = state_attr("sensor.wetterwarnungen_advance_warning_level", "warning_" ~ loop.index ~ "_description") %}
                        {% set startTime = as_timestamp(state_attr("sensor.wetterwarnungen_advance_warning_level", "warning_" ~ loop.index ~ "_start"), None) %}
                        {% set endTime = as_timestamp(state_attr("sensor.wetterwarnungen_advance_warning_level", "warning_" ~ loop.index ~ "_end"), None) %}
            
                        {% if startTime < as_timestamp(now()) < endTime %}
                          {%- if headline != None -%} {{ headline }}. {% endif -%} {%- if description != None -%} {{ description }} {% endif -%}
                        {%endif%}                        
                      {%- endfor -%}              
                    {% endif %}
              - service: telegram_bot.send_photo
                data:
                  caption: 'Kamera'
                  url: 'http://192.168.2.75:8123/api/camera_proxy/camera.dortmund?token={{ state_attr("camera.dortmund", "access_token") }}'

        default:      
          - service: !secret tts_service
            data:
              message: >-
                {% set current_count = state_attr("sensor.wetterwarnungen_current_warning_level", "warning_count") %}
                {% set advance_count = state_attr("sensor.wetterwarnungen_advance_warning_level", "warning_count") %}

                {% if current_count == None or advance_count == None or (current_count == 0 and advance_count == 0) %}
                  Aktuell liegt keine Wetterwarnung vor.
                {% else %}
                  Achtung!
                  {% for i in range(current_count) %}
                    {% set headline = state_attr("sensor.wetterwarnungen_current_warning_level", "warning_" ~ loop.index ~ "_headline") %}
                    {% set description = state_attr("sensor.wetterwarnungen_current_warning_level", "warning_" ~ loop.index ~ "_description") | regex_replace(find=' \([^)]*\)', replace='', ignorecase=False) %}
                    {% set startTime = as_timestamp(state_attr("sensor.wetterwarnungen_current_warning_level", "warning_" ~ loop.index ~ "_start"), None) %}
                    {% set endTime = as_timestamp(state_attr("sensor.wetterwarnungen_current_warning_level", "warning_" ~ loop.index ~ "_end"), None) %}
                        
                    {% if startTime < as_timestamp(now()) < endTime %}
                      {% if headline != None %} {{ headline }}. {% endif %} {% if description != None %} {{ description }} {% endif %}
                    {%endif%}                                                
                  {% endfor %}

                  {% for i in range(advance_count) %}
                    {% set headline = state_attr("sensor.wetterwarnungen_advance_warning_level", "warning_" ~ loop.index ~ "_headline") %}
                    {% set description = state_attr("sensor.wetterwarnungen_advance_warning_level", "warning_" ~ loop.index ~ "_description") | regex_replace(find=' \([^)]*\)', replace='', ignorecase=False) %}
                    {% set startTime = as_timestamp(state_attr("sensor.wetterwarnungen_advance_warning_level", "warning_" ~ loop.index ~ "_start"), None) %}
                    {% set endTime = as_timestamp(state_attr("sensor.wetterwarnungen_advance_warning_level", "warning_" ~ loop.index ~ "_end"), None) %}
                        
                    {% if startTime < as_timestamp(now()) < endTime %}
                      {% if headline != None %} {{ headline }}. {% endif %} {% if description != None %} {{ description }} {% endif %}
                    {%endif%}                      
                  {% endfor %}              
                {% endif %}
            
  - alias: "Wetterwarnung Regen"
    id: "wetterwarnung_regen"
    trigger:
      - platform: state
        id: '30'
        entity_id: binary_sensor.regen_in_30_min
        to: 'on'
      - platform: state
        id: '60'
        entity_id: binary_sensor.regen_in_60_min
        to: 'on'  
      - platform: state
        id: '120'
        entity_id: binary_sensor.regen_in_120_min  
        to: 'on'    
    condition:       
      - "{{ is_state('binary_sensor.schlafen_aktiv', 'off') }}" 
      - "{{ is_state('input_boolean.wetter_warnungen_einschalten', 'on') }}" 
      - "{{ is_state('person.dennis', 'home') }}" 
      - "{{ is_state('input_boolean.besuch', 'off') }}"
    action:
      - service: !secret tts_service
        data:
          message: >-
            {% if trigger.id == '120' %}
              {{ 'Achtung! In den nächsten 2 Stunden ist mit Regen zu rechnen.' }}
            {% elif trigger.id == '60' %}
              {{ 'Achtung! In der nächsten Stunde ist mit Regen zu rechnen.' }}              
            {% else %}
              {{ 'Achtung! In den nächsten' ~ trigger.id ~ 'Minuten ist mit Regen zu rechnen.' }}
            {% endif %}            
            
homeassistant:
  customize:
    sensor.darksky_precip_type:
      friendly_name: Heutige Niederschlagsart      
    sensor.darksky_precip_probability:
      friendly_name: Heutige Regenwahrscheinlichkeit
    sensor.darksky_precip_intensity:
      friendly_name: Heutige Regenmenge
    sensor.darksky_temperature:
      friendly_name: Temperatur
    sensor.darksky_apparent_temperature:
      friendly_name: Gefühlte Temperatur
    sensor.darksky_wind_speed:
      friendly_name: Windgeschwindigkeit
    sensor.darksky_wind_bearing:      
      friendly_name: Windrichtung
    sensor.darksky_cloud_coverage:
      friendly_name: Wolkendecke
    sensor.darksky_humidity:
      friendly_name: Luftfeuchtigkeit
    sensor.darksky_pressure:
      friendly_name: Luftdruck
    sensor.darksky_ozone:
      friendly_name: Ozon
    sensor.darksky_hourly_summary:
      friendly_name: Zusammenfassung
    sensor.darksky_daytime_high_temperature_d0:
      friendly_name: Heutige Höchsttemperatur      
    sensor.darksky_overnight_low_temperature_d0:
      friendly_name: Heutige Tiefsttemperatur      
    sensor.darksky_dew_point:
      friendly_name: Taupunkt      
    sensor.darksky_nearest_storm_distance:
      friendly_name: Nächster Sturm
    sensor.darksky_summary:
      friendly_name: Aktuelles Wetter
      
    sensor.schimmelindikator:
      icon: mdi:biohazard

    binary_sensor.iss:
      icon: mdi:earth

    sensor.strommix:
      icon: mdi:solar-power