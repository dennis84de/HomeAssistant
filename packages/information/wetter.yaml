sun:

camera:
  - platform: generic
    still_image_url: http://api.sat24.com/mostrecent/DE/visual5hdcomplete
    name: Wetter

  - platform: generic
    still_image_url: http://www.grueninger.com/webcam/current.jpg
    name: Dortmund

gdacs:
  radius: 100

input_boolean:
  wetter_warnungen_einschalten:
    name: Wetterwarnungen
    icon: mdi:weather-lightning-rainy

binary_sensor:
  - platform: car_wash
    name: Auto waschen
    days: 5
    weather: weather.dwd_weather_dortmund

  - platform: snowtire
    name: Autoreifen    
    weather: weather.dwd_weather_dortmund
    
  - platform: iss

  - platform: template
    sensors:
      schlechtes_wetter:
        friendly_name: "Schlechtes Wetter"
        icon_template: mdi:weather-snowy-rainy
        value_template: >-
          {{ is_state('sensor.wetterlage', 'Klar') == False }}

      sonne_tagsueber:
        friendly_name: "Sonne tagsüber"
        value_template: >-
          {% if is_state('sensor.helligkeit_balkon', None) or is_state('sensor.helligkeit_balkon', 'unknown') or is_state('sensor.helligkeit_balkon', '0') %}
            {{ states('sensor.helligkeit_wetter') | float > 15 }}
          {% else %}
            {{ states('sensor.helligkeit_balkon_durchschnitt') | float > 22000 }}
          {% endif %}
          
      sommerzeit:
        friendly_name: "Sommerzeit"     
        icon_template: "mdi:weather-sunny"          
        value_template: "{{ now().timetuple().tm_isdst > 0 }}"  
                           
sensor:
  - platform: moon
      
  - platform: darksky
    api_key: !secret darksky_key
    name: Darksky
    language: de
    forecast:
      - 0
      - 1
      - 2
      - 3
      - 4
      - 5
    scan_interval:
      minutes: 5
    monitored_conditions:
      - icon
      - summary
      - nearest_storm_distance
      - nearest_storm_bearing
      - humidity
      - temperature
      - temperature_high
      - temperature_low
      - apparent_temperature
      - apparent_temperature_high
      - apparent_temperature_low
      - wind_speed
      - wind_bearing
      - precip_type
      - precip_probability
      - precip_accumulation
      - precip_intensity
      - precip_intensity_max
      - uv_index
      - daily_summary
      - pressure
      - visibility
      - cloud_cover
      - ozone
      - hourly_summary
      - dew_point

  - platform: co2signal
    token: !secret co2signal_key
    scan_interval: 900

  - platform: mold_indicator
    name: Schimmelindikator
    indoor_temp_sensor: sensor.mold_wohnzimmer_temperatur
    indoor_humidity_sensor: sensor.mold_wohnzimmer_luftfeuchtigkeit
    outdoor_temp_sensor: sensor.mold_balkon_temperatur
    calibration_factor: 1.16

  - platform: average
    name: 'Helligkeit Balkon Durchschnitt'
    duration:
      minutes: 30
    entities:
      - sensor.helligkeit_balkon      
          
  - platform: dwd_weather_warnings
    region_name: Stadt Dortmund
    name: Wetterwarnungen
    
  - platform: opensky
    name: Flugzeuge
    radius: 10
      
  - platform: rest
    name: Strommix
    resource: !secret strommix_url
    unit_of_measurement: '%'
    scan_interval: 3600
    value_template: '{{ value_json[0].eevalue }}'

  - platform: rest
    scan_interval: 3600
    name: "DWD Pollen"
    resource: https://opendata.dwd.de/climate_environment/health/alerts/s31fg.json
    json_attributes_path: "$..content[?(@.partregion_id==41)].Pollen"
    json_attributes:
      - Erle
      - Beifuss
      - Ambrosia
      - Birke
      - Esche
      - Hasel
      - Graeser
      - Roggen
    value_template: "{{ value_json.last_update }}"

  - platform: template
    sensors:
      mold_wohnzimmer_temperatur:
        value_template: >-
          {% if is_state('sensor.wohnzimmer_temperatur', 'unavailable') %}
            {{ 0.00 | float }}
          {% else %}
            {{ states('sensor.wohnzimmer_temperatur') | float }}
          {% endif %}
        unit_of_measurement: '°C'
      mold_wohnzimmer_luftfeuchtigkeit:
        value_template: >-
          {% if is_state('sensor.wohnzimmer_luftfeuchtigkeit', 'unavailable') %}
            {{ 0.00 | float }}
          {% else %}
            {{ states('sensor.wohnzimmer_luftfeuchtigkeit') | float }}
          {% endif %}        
        unit_of_measurement: '%'
      mold_balkon_temperatur:
        value_template: >-        
          {% if is_state('sensor.balkon_temperatur', 'unavailable') %}
            {{ 0.00 | float }}
          {% else %}
            {{ states('sensor.balkon_temperatur') | float }}
          {% endif %}          
        unit_of_measurement: '°C'
        
      wetter_text:
        friendly_name: 'Wetter'
        value_template:  >
          {% if is_state("sensor.darksky_icon","clear-day") %} Klar
          {% elif is_state("sensor.darksky_icon","clear-night") %} Klar
          {% elif is_state("sensor.darksky_icon","rain") %} Regen
          {% elif is_state("sensor.darksky_icon","snow") %} Schnee
          {% elif is_state("sensor.darksky_icon","fog") %} Nebel
          {% elif is_state("sensor.darksky_icon","sleet") %} Schneeregen
          {% elif is_state("sensor.darksky_icon","wind") %} Wind
          {% elif is_state("sensor.darksky_icon","cloudy") %} Wolkig
          {% elif is_state("sensor.darksky_icon","partly-cloudy-day") %} Teilweise wolkig
          {% elif is_state("sensor.darksky_icon","partly-cloudy-night") %} Teilweise wolkig
          {% elif is_state("sensor.darksky_icon","hail") %} Hagel
          {% elif is_state("sensor.darksky_icon","lightning") %} Gewitter
          {% elif is_state("sensor.darksky_icon","thunderstorm") %} Sturm
          {% endif %}

      wetterlage:
        friendly_name: 'Wetterlage'
        icon_template: mdi:weather-windy-variant
        value_template: >
          {% if is_state('sensor.darksky_precip' , 'snow') %} Schnee
          {% elif ((states('sensor.darksky_overnight_low_temperature') | int < 4) and (states('sensor.darksky_dew_point') | int < 6)
            and (states('sensor.darksky_wind_speed') | int < 12) and (states('sensor.darksky_cloud_coverage') | int < 20)
            and (states('sensor.darksky_humidity') | int > 50)) %} Frost
          {% elif (states('sensor.darksky_precip_intensity') | int > 7) %} Regen
          {% else %} Klar {% endif %}

      helligkeit_wetter:
        friendly_name: 'Helligkeit Wetter'
        value_template: >-
          {%- set irradiance = states('sensor.buienradar_irradiance') | float %} 
          {%- set irradiance_pct = irradiance / 10 %}
          {%- set elevation = state_attr('sun.sun','elevation') | float %}
          {%- set cloud_coverage = states('sensor.darksky_cloud_coverage') | float %}
          {%- set adjusted_clouds = cloud_coverage -  irradiance_pct %}
          {%- set cloud_factor = (1 - (0.75 * ( adjusted_clouds / 100) ** 3 )) %}
          {%- set min_elevation = -6 %}
          {%- set max_elevation = 45 %}
          {%- set adjusted_elevation = elevation - min_elevation %}
          {%- set adjusted_elevation = [adjusted_elevation,0] | max %}
          {%- set adjusted_elevation = [adjusted_elevation,max_elevation - min_elevation] | min %}
          {%- set adjusted_elevation = adjusted_elevation / (max_elevation - min_elevation) %}
          {%- set adjusted_elevation = adjusted_elevation %}
          {%- set adjusted_elevation = adjusted_elevation * 100 %}
          {%- set brightness = adjusted_elevation * cloud_factor %}

          {{ brightness | round }}
        unit_of_measurement: '%'
        device_class: 'illuminance'

      dwd_pollen_graeser:
        icon_template: "mdi:tree-outline"
        friendly_name: "Gräser"
        value_template: >-
          {% set dwd_state = state_attr('sensor.dwd_pollen', 'Gräser')['today'] %}
          {% if dwd_state == "3" %}6{% elif dwd_state == "2-3"%}5{% elif dwd_state == "2"%}4{% elif dwd_state == "1-2"%}3{% elif dwd_state == "1"%}2{% elif dwd_state == "0-1"%}1{% else %}0{% endif %}
        attribute_templates:
          today: >-
            {% set dwd_state = state_attr('sensor.dwd_pollen', 'Gräser')['today'] %}
            {% if dwd_state == "3" %}6{% elif dwd_state == "2-3"%}5{% elif dwd_state == "2"%}4{% elif dwd_state == "1-2"%}3{% elif dwd_state == "1"%}2{% elif dwd_state == "0-1"%}1{% else %}0{% endif %}
          tomorrow: >-
            {% set dwd_state = state_attr('sensor.dwd_pollen', 'Gräser')['tomorrow'] %}
            {% if dwd_state == "3" %}6{% elif dwd_state == "2-3"%}5{% elif dwd_state == "2"%}4{% elif dwd_state == "1-2"%}3{% elif dwd_state == "1"%}2{% elif dwd_state == "0-1"%}1{% else %}0{% endif %}

      dwd_pollen_birke:
        icon_template: "mdi:tree-outline"
        friendly_name: "Birke"
        value_template: >-
          {% set dwd_state = state_attr('sensor.dwd_pollen', 'Birke')['today'] %}
          {% if dwd_state == "3" %}6{% elif dwd_state == "2-3"%}5{% elif dwd_state == "2"%}4{% elif dwd_state == "1-2"%}3{% elif dwd_state == "1"%}2{% elif dwd_state == "0-1"%}1{% else %}0{% endif %}
        attribute_templates:
          today: >-
            {% set dwd_state = state_attr('sensor.dwd_pollen', 'Birke')['today'] %}
            {% if dwd_state == "3" %}6{% elif dwd_state == "2-3"%}5{% elif dwd_state == "2"%}4{% elif dwd_state == "1-2"%}3{% elif dwd_state == "1"%}2{% elif dwd_state == "0-1"%}1{% else %}0{% endif %}
          tomorrow: >-
            {% set dwd_state = state_attr('sensor.dwd_pollen', 'Birke')['tomorrow'] %}
            {% if dwd_state == "3" %}6{% elif dwd_state == "2-3"%}5{% elif dwd_state == "2"%}4{% elif dwd_state == "1-2"%}3{% elif dwd_state == "1"%}2{% elif dwd_state == "0-1"%}1{% else %}0{% endif %}

      dwd_pollen_roggen:
        icon_template: "mdi:tree-outline"
        friendly_name: "Roggen"
        value_template: >-
          {% set dwd_state = state_attr('sensor.dwd_pollen', 'Roggen')['today'] %}
          {% if dwd_state == "3" %}6{% elif dwd_state == "2-3"%}5{% elif dwd_state == "2"%}4{% elif dwd_state == "1-2"%}3{% elif dwd_state == "1"%}2{% elif dwd_state == "0-1"%}1{% else %}0{% endif %}
        attribute_templates:
          today: >-
            {% set dwd_state = state_attr('sensor.dwd_pollen', 'Roggen')['today'] %}
            {% if dwd_state == "3" %}6{% elif dwd_state == "2-3"%}5{% elif dwd_state == "2"%}4{% elif dwd_state == "1-2"%}3{% elif dwd_state == "1"%}2{% elif dwd_state == "0-1"%}1{% else %}0{% endif %}
          tomorrow: >-
            {% set dwd_state = state_attr('sensor.dwd_pollen', 'Roggen')['tomorrow'] %}
            {% if dwd_state == "3" %}6{% elif dwd_state == "2-3"%}5{% elif dwd_state == "2"%}4{% elif dwd_state == "1-2"%}3{% elif dwd_state == "1"%}2{% elif dwd_state == "0-1"%}1{% else %}0{% endif %}

      tageszeit:
        friendly_name: Tageszeit
        value_template: >-
          {% if (as_timestamp(state_attr('sun.sun', 'next_dusk'))) - (as_timestamp(state_attr('sun.sun', 'next_setting'))) < 0 %}
            Abenddämmerung
          {% elif (as_timestamp(state_attr('sun.sun', 'next_rising'))) - (as_timestamp(state_attr('sun.sun', 'next_dawn'))) < 0 %}
            Morgendämmerung
          {% elif (state_attr('sun.sun', 'elevation')) < - 4 %}
            Nacht
          {% else %}
            Tag
          {% endif %}
        entity_picture_template: >-
          {% if (as_timestamp(state_attr('sun.sun', 'next_dusk'))) - (as_timestamp(state_attr('sun.sun', 'next_setting'))) < 0 %}
            /local/sonne/Dawn.png
          {% elif (as_timestamp(state_attr('sun.sun', 'next_rising'))) - (as_timestamp(state_attr('sun.sun', 'next_dawn'))) < 0 %}
            /local/sonne/Dusk.png         
          {% elif (state_attr('sun.sun', 'elevation')) < - 4 %}
            /local/sonne/Night.png
          {% else %}
            /local/sonne/Day.png
          {% endif %}

      sonnenaufgang:
        friendly_name: 'Nächster Sonnenaufgang'
        value_template: "{{ as_timestamp(state_attr('sun.sun', 'next_rising')) | timestamp_custom('%d.%m.%Y %H:%M') }}"
        icon_template: mdi:weather-sunset-up

      sonnenuntergang:
        friendly_name: 'Nächster Sonnenuntergang'
        value_template: "{{ as_timestamp(state_attr('sun.sun', 'next_setting')) | timestamp_custom('%d.%m.%Y %H:%M') }}"
        icon_template: mdi:weather-sunset-down

      mondphasen:
        friendly_name: Mondphase
        value_template: >-
          {% if is_state('sensor.moon', 'new_moon') %}
            Neumond
          {% elif is_state('sensor.moon', 'waxing_crescent') %}
            Zunehmender Sichelmond
          {% elif is_state('sensor.moon', 'first_quarter') %}
            Zunehmender Halbmond
          {% elif is_state('sensor.moon', 'waxing_gibbous') %}
            Zunehmender Dreiviertelmond
          {% elif is_state('sensor.moon', 'full_moon') %}
            Vollmond
          {% elif is_state('sensor.moon', 'waning_gibbous') %}
            Abnehmender Dreiviertelmond
          {% elif is_state('sensor.moon', 'last_quarter') %}
            Abnehmender Halbmond
          {% elif is_state('sensor.moon', 'waning_crescent') %}
            Abnehmender Sichelmond
          {% endif %}
        entity_picture_template: >-
          {% if is_state('sensor.moon', 'new_moon') %}
            /local/mond/NewMoon.jpg
          {% elif is_state('sensor.moon', 'waxing_crescent') %}
            /local/mond/WaxingCrescent.jpg
          {% elif is_state('sensor.moon', 'first_quarter') %}
            /local/mond/FirstQuarter.jpg
          {% elif is_state('sensor.moon', 'waxing_gibbous') %}
            /local/mond/WaxingGibbous.jpg
          {% elif is_state('sensor.moon', 'full_moon') %}
            /local/mond/FullMoon.jpg
          {% elif is_state('sensor.moon', 'waning_gibbous') %}
            /local/mond/WaningGibbous.jpg
          {% elif is_state('sensor.moon', 'last_quarter') %}
            /local/mond/LastQuarter.jpg
          {% elif is_state('sensor.moon', 'waning_crescent') %}
            /local/mond/WaningCrescent.jpg
          {% endif %}

      uv_index_current:
        friendly_name: 'UV Index'
        unit_of_measurement: 'UV'
        value_template: '{{ states("sensor.current_uv_index") | float | round(2) }}'
        icon_template: '{{ state_attr("sensor.current_uv_index","icon") }}'

      uv_index_max:
        friendly_name: 'Maximaler UV Index'
        unit_of_measurement: 'UV'
        value_template: '{{ states("sensor.max_uv_index") | float | round(2) }}'
        icon_template: '{{ state_attr("sensor.max_uv_index","icon") }}'

      zeit_sonne:
        friendly_name: 'Zeit in der Sonne'
        value_template: >-
          {% if is_state('sensor.skin_type_3_safe_exposure_time', 'unknown') %}
            0
          {% else %}
            {{ states('sensor.skin_type_3_safe_exposure_time') | int }}
          {% endif %}
        icon_template: '{{ state_attr("sensor.skin_type_3_safe_exposure_time","icon") }}'        
        unit_of_measurement: 'Minuten'

      windrichtung:
        friendly_name: 'Windrichtung'
        icon_template: mdi:compass
        value_template: >-
          {% set winbearing = (states('sensor.darksky_wind_bearing') | float / 45) | int | round + 1 %}
          {% set winddir = ['Nord', 'NO','Ost','SO','Süd','SW','West','NW']%}
          
          {{ winddir[winbearing]}}
        entity_picture_template: >-
          {% set winbearing = (states('sensor.darksky_wind_bearing') | float / 45) | int | round + 1 %}
          {% set winddir = ['0', '45','90','135','180','225','270','315'] %}
          
          {{ "/local/wind/" ~ winddir[winbearing] ~ ".png" }}
          
      zeitumstellung:
        friendly_name: "Zeitumstellung"       
        device_class: timestamp
        icon_template: "{{ 'mdi:rotate-left' if now().month > 3 else 'mdi:rotate-right' }}"       
        value_template: >
          {%- set ns = namespace(previous = 2, spring=none, fall=none) %}
          {%- set today = strptime(states('sensor.date'), '%Y-%m-%d').astimezone().replace(hour=ns.previous) %}
          {%- for i in range(365) %}
            {%- set day = (today + timedelta(days=i)).astimezone() %}
            {%- if ns.previous - day.hour == -1 %}
              {%- set ns.spring = today + timedelta(days=i) | timestamp_local %}
            {%- elif ns.previous - day.hour == 1 %}
              {%- set ns.fall = today + timedelta(days=i) | timestamp_local %}
            {%- endif %}
            {%- set ns.previous = day.hour %}
          {%- endfor %}
          
          {{ [ns.spring, ns.fall] | min }}
        attribute_templates:
          is_dst_active: >
            {{ now().timetuple().tm_isdst > 0 }}
          dst_change_tomorrow: >
            {% set dt = now() + timedelta(days=1) %}
            {{ now().astimezone().tzinfo != dt.astimezone().tzinfo }}          
          next: >
            {%- set ns = namespace(previous = 2, spring=none, fall=none) %}
            {%- set today = strptime(states('sensor.date'), '%Y-%m-%d').astimezone().replace(hour=ns.previous) %}
            {%- for i in range(365) %}
              {%- set day = (today + timedelta(days=i)).astimezone() %}
              {%- if ns.previous - day.hour == -1 %}
                {%- set ns.spring = today + timedelta(days=i) %}
              {%- elif ns.previous - day.hour == 1 %}
                {%- set ns.fall = today + timedelta(days=i) %}
              {%- endif %}
              {%- set ns.previous = day.hour %}
            {%- endfor %}
            {%- set next = [ns.spring, ns.fall] | min %}
            {%- set phrase = '1 Stunde vorstellen' if next == ns.spring else '1 Stunde zurückstellen' %}
            {"Frühling": "{{ns.spring}}", "Herbst": "{{ns.fall}}", "Nächste Umstellung": "{{next}}", "Tage":{{(next-today).days}}, "Uhr": "{{phrase}}"}

      wetterwarnungen_aktiv:
        friendly_name: "Wetterwarnungen"      
        icon_template: mdi:weather-partly-lightning
        value_template: >-
          {% set ns = namespace(found=0) %}          
          {% set current_count = state_attr("sensor.wetterwarnungen_current_warning_level", "warning_count") %}
          {% set advance_count = state_attr("sensor.wetterwarnungen_advance_warning_level", "warning_count") %}
          
          {% if current_count != None and advance_count != None and (current_count > 0 or advance_count > 0) %}
            {% for i in range(current_count) %}
              {% set startTime = as_timestamp(state_attr("sensor.wetterwarnungen_current_warning_level", "warning_" ~ loop.index ~ "_start")) %}
              {% set endTime = as_timestamp(state_attr("sensor.wetterwarnungen_current_warning_level", "warning_" ~ loop.index ~ "_end")) %}
            
              {% if startTime < as_timestamp(now()) < endTime %}
                {% set ns.found = ns.found + 1 -%}
              {%endif%}
            {% endfor %}

            {% for i in range(advance_count) %}
              {% set startTime = as_timestamp(state_attr("sensor.wetterwarnungen_advance_warning_level", "warning_" ~ loop.index ~ "_start")) %}
              {% set endTime = as_timestamp(state_attr("sensor.wetterwarnungen_advance_warning_level", "warning_" ~ loop.index ~ "_end")) %}
              
              {% if startTime < as_timestamp(now()) < endTime %}
                {% set ns.found = ns.found + 1 -%}
              {%endif%}
            {% endfor %}              
          {% endif %}                
          
          {{ ns.found }}   
          
automation:
  - alias: "Balkontür schließen"
    id: "balkontuer_schliessen"
    trigger:
      platform: template
      value_template: >-
        {{ states('sensor.balkon_temperatur') | float > states('sensor.wohnzimmer_temperatur') | float + 2 }}
    condition:       
      - condition: or
        conditions:
          - condition: state
            entity_id: binary_sensor.balkontuer
            state: 'on'
          - condition: state
            entity_id: binary_sensor.fenster_wohnzimmer
            state: 'on'
      - "{{ (states('sensor.laufzeit_minuten') | float) > 0 }}"
      - "{{ (states('sensor.wohnzimmer_temperatur') | float) > 0 }}"
      - "{{ (states('sensor.balkon_temperatur') | float) > 23 }}"  
    action:
      - service: !secret tts_service
        data_template:
          message: >-
            {% set temperaturBalkon = states('sensor.balkon_temperatur') | float %}
            {% set temperaturWohnzimmer = states('sensor.wohnzimmer_temperatur') | float %}

            {% set difference = (temperaturBalkon - temperaturWohnzimmer) | round() %}

            Die Balkontür sollte geschlossen werden. Auf dem Balkon ist es {{ temperaturBalkon | round() }} Grad warm und damit {{ difference }} Grad wärmer als im Wohnzimmer.

  - alias: 'Wetterwarnungen'
    id: "wetterwarnungen"
    trigger:
      - platform: state  
        entity_id: sensor.wetterwarnungen_aktiv
    condition:
      - "{{ is_state('binary_sensor.schlafen_aktiv', 'off') }}" 
      - "{{ is_state('input_boolean.wetter_warnungen_einschalten', 'on') }}" 
      - "{{ trigger.to_state.state > trigger.from_state.state }}" 
    action:
      - choose:
          - conditions:
              - condition: state
                entity_id: binary_sensor.zu_hause
                state: 'off'
            sequence:             
              - service: notify.telegram
                data:
                  title: "Wetterwarnung"
                  message: >-
                    {% set current_count = state_attr("sensor.wetterwarnungen_current_warning_level", "warning_count") %}
                    {% set advance_count = state_attr("sensor.wetterwarnungen_advance_warning_level", "warning_count") %}

                    {% if (current_count == None or advance_count == None) or (current_count == 0 and advance_count == 0) %}
                      Aktuell liegt keine Wetterwarnung vor.
                    {% else %}
                      {%- for i in range(current_count) -%}
                        {% set headline = state_attr("sensor.wetterwarnungen_current_warning_level", "warning_" ~ loop.index ~ "_headline") %}
                        {% set description = state_attr("sensor.wetterwarnungen_current_warning_level", "warning_" ~ loop.index ~ "_description") %}
                        {% set startTime = as_timestamp(state_attr("sensor.wetterwarnungen_current_warning_level", "warning_" ~ loop.index ~ "_start")) %}
                        {% set endTime = as_timestamp(state_attr("sensor.wetterwarnungen_current_warning_level", "warning_" ~ loop.index ~ "_end")) %}
            
                        {% if startTime < as_timestamp(now()) < endTime %}
                          {%- if headline != None -%} {{ headline }}. {% endif -%} {%- if description != None -%} {{ description }} {% endif -%}
                        {%endif%}           
                      {%- endfor -%}

                      {%- for i in range(advance_count) -%}
                        {% set headline = state_attr("sensor.wetterwarnungen_advance_warning_level", "warning_" ~ loop.index ~ "_headline") %}
                        {% set description = state_attr("sensor.wetterwarnungen_advance_warning_level", "warning_" ~ loop.index ~ "_description") %}
                        {% set startTime = as_timestamp(state_attr("sensor.wetterwarnungen_currewetterwarnungen_advance_warning_levelnt_warning_level", "warning_" ~ loop.index ~ "_start")) %}
                        {% set endTime = as_timestamp(state_attr("sensor.wetterwarnungen_advance_warning_level", "warning_" ~ loop.index ~ "_end")) %}
            
                        {% if startTime < as_timestamp(now()) < endTime %}
                          {%- if headline != None -%} {{ headline }}. {% endif -%} {%- if description != None -%} {{ description }} {% endif -%}
                        {%endif%}                        
                      {%- endfor -%}              
                    {% endif %}
              - service: telegram_bot.send_photo
                data:
                  caption: 'Kamera'
                  url: 'http://192.168.2.75:8123/api/camera_proxy/camera.dortmund?token={{ state_attr("camera.dortmund", "access_token") }}'

        default:      
          - service: !secret tts_service
            data_template:
              message: >-
                {% set current_count = state_attr("sensor.wetterwarnungen_current_warning_level", "warning_count") %}
                {% set advance_count = state_attr("sensor.wetterwarnungen_advance_warning_level", "warning_count") %}

                {% if current_count == None or advance_count == None or (current_count == 0 and advance_count == 0) %}
                  Aktuell liegt keine Wetterwarnung vor.
                {% else %}
                  Achtung!
                  {% for i in range(current_count) %}
                    {% set headline = state_attr("sensor.wetterwarnungen_current_warning_level", "warning_" ~ loop.index ~ "_headline") %}
                    {% set description = state_attr("sensor.wetterwarnungen_current_warning_level", "warning_" ~ loop.index ~ "_description") | regex_replace(find=' \([^)]*\)', replace='', ignorecase=False) %}
                    {% set startTime = as_timestamp(state_attr("sensor.wetterwarnungen_current_warning_level", "warning_" ~ loop.index ~ "_start")) %}
                    {% set endTime = as_timestamp(state_attr("sensor.wetterwarnungen_current_warning_level", "warning_" ~ loop.index ~ "_end")) %}
                        
                    {% if startTime < as_timestamp(now()) < endTime %}
                      {% if headline != None %} {{ headline }}. {% endif %} {% if description != None %} {{ description }} {% endif %}
                    {%endif%}                                                
                  {% endfor %}

                  {% for i in range(advance_count) %}
                    {% set headline = state_attr("sensor.wetterwarnungen_advance_warning_level", "warning_" ~ loop.index ~ "_headline") %}
                    {% set description = state_attr("sensor.wetterwarnungen_advance_warning_level", "warning_" ~ loop.index ~ "_description") | regex_replace(find=' \([^)]*\)', replace='', ignorecase=False) %}
                    {% set startTime = as_timestamp(state_attr("sensor.wetterwarnungen_advance_warning_level", "warning_" ~ loop.index ~ "_start")) %}
                    {% set endTime = as_timestamp(state_attr("sensor.wetterwarnungen_advance_warning_level", "warning_" ~ loop.index ~ "_end")) %}
                        
                    {% if startTime < as_timestamp(now()) < endTime %}
                      {% if headline != None %} {{ headline }}. {% endif %} {% if description != None %} {{ description }} {% endif %}
                    {%endif%}                      
                  {% endfor %}              
                {% endif %}
            
homeassistant:
  customize:
    sun.sun:
      friendly_name: Sonnenstand
    sensor.moon:
      friendly_name: Mondstand

    sensor.pws_weather:
      friendly_name: Aktuelles Wetter

    sensor.darksky_precip_type:
      friendly_name: Heutige Niederschlagsart      
    sensor.darksky_precip_probability:
      friendly_name: Heutige Regenwahrscheinlichkeit
    sensor.darksky_precip_intensity:
      friendly_name: Heutige Regenmenge
    sensor.darksky_temperature:
      friendly_name: Temperatur
    sensor.darksky_apparent_temperature:
      friendly_name: Gefühlte Temperatur
    sensor.darksky_wind_speed:
      friendly_name: Windgeschwindigkeit
    sensor.darksky_wind_bearing:      
      friendly_name: Windrichtung
    sensor.darksky_cloud_coverage:
      friendly_name: Wolkendecke
    sensor.darksky_humidity:
      friendly_name: Luftfeuchtigkeit
    sensor.darksky_pressure:
      friendly_name: Luftdruck
    sensor.darksky_ozone:
      friendly_name: Ozon
    sensor.darksky_hourly_summary:
      friendly_name: Zusammenfassung
    sensor.darksky_daytime_high_temperature_d0:
      friendly_name: Heutige Höchsttemperatur      
    sensor.darksky_overnight_low_temperature_d0:
      friendly_name: Heutige Tiefsttemperatur      
    sensor.darksky_dew_point:
      friendly_name: Taupunkt      
    sensor.darksky_nearest_storm_distance:
      friendly_name: Nächster Sturm
    sensor.darksky_summary:
      friendly_name: Aktuelles Wetter

    sensor.wetterwarnungen_current_warning_level:
      friendly_name: Wetterwarnungen
      icon: mdi:weather-hurricane    

    sensor.schimmelindikator:
      icon: mdi:biohazard

    sensor.luftqualitat_pm10:
      icon: mdi:weather-windy
    sensor.luftqualitat_pm25:
      icon: mdi:weather-windy-variant

    binary_sensor.iss:
      icon: mdi:earth

    binary_sensor.protection_window:
      friendly_name: Sonnenschutz

    sensor.helligkeit_wetter:
      name: Helligkeit
      icon: mdi:theme-light-dark

    sensor.strommix:
      icon: mdi:solar-power

    sensor.co2_intensity_51_49_7_36:
      friendly_name: CO2 Belastung

  customize_glob:
    sensor.*_absolutehumidity:
      friendly_name: Luftfeuchtigkeit absolut
    sensor.*_dewpoint:
      friendly_name: Taupunkt
    sensor.*_heatindex:
      friendly_name: Wärme Index
    sensor.*_perception:
      friendly_name: Wahrnehmung
      icon: mdi:weather-cloudy    