input_number:
  alarmhour:
    name: Stunde
    min: 1
    max: 23
    step: 1
    icon: mdi:av-timer

  alarmminutes:
    name: Minute
    min: 0
    max: 59
    step: 1
    icon: mdi:timer

  alarmdelay:
    name: Verzögerung
    min: 10
    max: 30
    step: 5
    icon: mdi:timer-sand

  alarmadvance:
    name: Vorlauf
    min: 0
    step: 5
    max: 30
    icon: mdi:timer-sand

input_boolean:
  alarm_aktiv:
    name: Wecker aktiv
    initial: off
    icon: mdi:alarm-multiple

binary_sensor:
  - platform: template
    sensors:
      tablet_wecker_ueberspringen:
        friendly_name: Wecker überspringen
        icon_template: mdi:alarm-off
        device_class: power
        entity_id:
          - sensor.tablet_weckzeit
        value_template: >-
          {% if states('sensor.tablet_weckzeit') == None or states('sensor.tablet_weckzeit') == 'unknown'  or states('sensor.tablet_weckzeit') == '-' %}
            False
          {% elif "skip" in state_attr('sensor.tablet_weckzeit', 'raw') %}
            True
          {% else %}
            False
          {% endif %}

      alarm_aktiv:
        friendly_name: Alarm aktiv
        icon_template: mdi:alarm-multiple
        device_class: sound
        entity_id:
          - input_boolean.alarm_aktiv
        value_template: >-
          {{ True if is_state('input_boolean.alarm_aktiv', 'on') else False }}

sensor:
  - platform: mqtt
    name: "Tablet Weckzeit"
    unit_of_measurement: "Uhr"
    icon: mdi:tablet
    state_topic: "tablet/schlafzimmer/wecker"
    value_template: >-
      {% if value_json == None or value_json == undefined or value_json.weckzeit == None or value_json.weckzeit == '-' %}
        -
      {% else %}
        {{ value_json.weckzeit }}
      {% endif %}
    json_attributes_topic: "tablet/schlafzimmer/wecker"
    json_attributes_template: >-
      {% if value_json == None or value_json == undefined or value_json.weckzeit == '%taskertime' %}
        {% set value_json = [] %}        
      {% endif %}     
      
      {{ value_json | tojson }}
      
  - platform: template
    sensors:
      wecker_startzeit:
        friendly_name: Wecker Startzeit
        icon_template: mdi:alarm-bell
        entity_id:
          - input_number.alarmhour
          - input_number.alarmminutes
        value_template: '{{ "%0.02d:%0.02d" | format(states("input_number.alarmhour") | int, states("input_number.alarmminutes") | int) }}'
        unit_of_measurement: 'Uhr'
        
      wecker_startdatum:
        friendly_name: Wecker Startdatum
        icon_template: mdi:calendar-clock
        entity_id:
          - sensor.tablet_weckzeit
        value_template: >-
          {% set day = state_attr('sensor.tablet_weckzeit', 'day') %}
          {% set month = state_attr('sensor.tablet_weckzeit', 'month') %}
          {% set year = state_attr('sensor.tablet_weckzeit', 'year') %}

          {% set alarmDay = "%0.02d-%0.02d-%0.02d" | format(year | int, month | int, day | int) %}
          {% set weekday = as_timestamp(alarmDay) | timestamp_custom("%w", True) | int %}

          {{ ['Montag','Dienstag','Mittwoch','Donnerstag','Freitag','Samstag','Sonntag'][weekday-1] }}, {{ as_timestamp(alarmDay) | timestamp_custom("%d.%m.%Y", True) | string }}

automation:
  - alias: "Weckzeit stellen"
    trigger:
      - platform: state
        entity_id: sensor.tablet_weckzeit
      - platform: state
        entity_id: input_number.alarmadvance
      - platform: state
        entity_id: binary_sensor.alarm_aktiv        
    condition:
      condition: and
      conditions:
        - condition: state
          entity_id: binary_sensor.alarm_aktiv
          state: 'off'
    action:
      - service: script.weckzeit_einstellen

  - alias: "Wecker starten"
    trigger:
      - platform: template
        value_template: >-
          {{ states('sensor.time') == states('sensor.wecker_startzeit') }}
    condition:
      condition: and
      conditions:
        - condition: numeric_state
          entity_id: sensor.laufzeit_minuten
          above: 5
        - condition: template
          value_template: >
            {% if is_state('sensor.tablet_weckzeit', None) or state_attr('sensor.tablet_weckzeit', 'day') == None %}
              False
            {% elif state_attr('sensor.tablet_weckzeit', 'day') != now().today().day %}
              False
            {% elif is_state('binary_sensor.tablet_wecker_ueberspringen', 'on') %}
              False
            {% else %}
              True
            {% endif %}
    action:
      - service: script.wecker_einschalten

  - alias: "Aufstehen - Schlafen ausschalten"
    trigger:
      - platform: state
        entity_id: binary_sensor.bewegungsmelder_kueche
        to: 'on'
      - platform: state
        entity_id: binary_sensor.bewegungsmelder_flur_vorne
        to: 'on'
      - platform: state
        entity_id: binary_sensor.bewegungsmelder_wohnzimmer
        to: 'on'
    condition:
      - condition: and
        conditions:
          - condition: state
            entity_id: binary_sensor.schlafen_aktiv
            state: 'on'
          - condition: or
            conditions:
              - condition: state
                entity_id: binary_sensor.alarm_aktiv
                state: 'on'
              - condition: and
                conditions:
                  - condition: time
                    after: '06:00'
                    before: '20:00'
                  - condition: template
                    value_template: >                   
                      {% if is_state('sensor.tablet_weckzeit', None) or state_attr('sensor.tablet_weckzeit', 'day') == None %}
                        True
                      {% elif state_attr('sensor.tablet_weckzeit', 'day') != now().today().day %}
                        True
                      {% elif is_state('binary_sensor.tablet_wecker_ueberspringen', 'on') %}
                        True
                      {% else %}
                        False
                      {% endif %}
    action:
      - service: input_boolean.turn_off
        entity_id: input_boolean.schlafen_aktiv, input_boolean.alarm_aktiv
      - service: light.turn_off
        entity_id: light.bett

  - alias: "Aufstehen - Geräte einschalten"
    trigger:
      - platform: state
        entity_id: input_boolean.schlafen_aktiv
        to: 'off'
    condition:
      - condition: template
        value_template: >-
          {% set weckerGestartet = as_timestamp(state_attr("automation.wecker_starten", "last_triggered")) | timestamp_custom("%s", True) | int  %}
          {% set weckerVerzoegerung = states('input_number.alarmdelay') | int %}
          {% set now = now().strftime("%s") | int %}
          {% set abstandMinuten = ((now - weckerGestartet | timestamp_custom("%s") | int)) / 60 | int %}         
          
          {{ True if abstandMinuten < weckerVerzoegerung else False }}
    action:
      - service: script.wohnung_radios_einschalten
      - service: switch.turn_on
        entity_id: switch.computer

  - alias: "Aufstehen - Kein Wecker gestellt"
    trigger:
      - platform: state
        entity_id: input_boolean.schlafen_aktiv
        to: 'off'
    condition:
      - condition: template
        value_template: >-
          {% set nowDate = now().strftime("%Y-%m-%d") %}
          {% set lastTriggeredDate = as_timestamp(state_attr("automation.wecker_starten", "last_triggered")) | timestamp_custom("%Y-%m-%d", True) %}
          
          {% if is_state('sensor.tablet_weckzeit', None) or is_state_attr('sensor.tablet_weckzeit', 'day', None) %}
            True
          {% elif is_state('binary_sensor.tablet_wecker_ueberspringen', 'on') %}          
            True
          {% elif nowDate != lastTriggeredDate %}
            True
          {% else %}
            False
          {% endif %}
    action:
      - service: script.wohnung_radios_einschalten
      - service: switch.turn_on
        entity_id: switch.computer, switch.watchtv_wohnzimmer

script:
  weckzeit_einstellen:
    alias: "Weckzeit einstellen"
    sequence:
      - service: input_number.set_value
        data_template:
          entity_id: input_number.alarmhour
          value: >
            {% set tabletStunde = state_attr('sensor.tablet_weckzeit', 'hour') %}
            {% set tabletMinuten = state_attr('sensor.tablet_weckzeit', 'minute') %}
            
            {% if tabletStunde == None or tabletMinuten == None or states('sensor.tablet_weckzeit') == None or states('sensor.tablet_weckzeit') == '-' %}
              {{ states('input_number.alarmhour') | int }}
            {% else %}
              {% set newHour = tabletStunde | int %}
              {% set newMinute = tabletMinuten | int - states('input_number.alarmadvance') | int %}             
            
              {% if newMinute | int < 0 %}
                {% set newHour = newHour - 1 | int %}
              {% endif %}

              {{ newHour }}
            {% endif %}
      - service: input_number.set_value
        data_template:
          entity_id: input_number.alarmminutes
          value: >
            {% set tabletStunde = state_attr('sensor.tablet_weckzeit', 'hour') %}
            {% set tabletMinuten = state_attr('sensor.tablet_weckzeit', 'minute') %}
          
            {% if tabletStunde == None or tabletMinuten == None or states('sensor.tablet_weckzeit') == None or states('sensor.tablet_weckzeit') == '-' %}
              {{ states('input_number.alarmminutes') | int }}              
            {% else %}              
              {% set newMinute = tabletMinuten | int - states('input_number.alarmadvance') | int %}

              {% if newMinute < 0 %}
                {% set newMinute = 60 + newMinute | int %}
              {% endif %}

              {{ newMinute }}
            {% endif %}

  wecker_einschalten:
    alias: "Wecker einschalten"
    sequence:
      - service: input_boolean.turn_on
        entity_id: input_boolean.alarm_aktiv
      - service: light.turn_on
        data:
          entity_id: light.bett
          effect: colorloop
      - service: switch.turn_on
        entity_id: switch.schlafzimmer_radio               
      - delay: 00:{{ states('input_number.alarmdelay') | int }}:00
      - service: switch.turn_on
        entity_id: switch.computer      
      - service: script.wohnung_radios_einschalten

homeassistant:
  customize:
    sensor.tablet_weckzeit:
      friendly_name: Wecker Tablet