device_tracker:
  - platform: phonetrack
    url: !secret phonetrack_url
    token: !secret phonetrack_token
    devices:
      - HandyGPS

  - platform: mqtt
    devices:
      handymqtt: 'location/handy'
    
person:
  - name: Dennis
    id: dennis
    device_trackers:
      - device_tracker.handy
      - device_tracker.handymqtt

input_boolean:
  zu_hause_begruessung:
    name: "Begrüßung"
  besuch:
    name: "Besuch"
    icon: mdi:account-multiple
    
proximity:
  home:
    devices:
      - device_tracker.handy
      - device_tracker.handygps
    tolerance: 50

shell_command:
  send_position: "curl -X POST '{{ url }}?lat={{ state_attr('device_tracker.netzwerkdj', 'latitude') }}&lon={{ state_attr('device_tracker.netzwerkdj', 'longitude') }}&timestamp={{ as_timestamp(now()) | int }}'"

sensor:
  - platform: places
    name: Aufenthaltsort Handy
    devicetracker_id: device_tracker.handygps
    options: street_street_number,city
    api_key: !secret openstreetmap_email
    map_provider: google

binary_sensor:
  - platform: template
    sensors:
      zu_hause:
        friendly_name: "zu Hause"
        device_class: presence
        value_template: >-
          {% if is_state('person.dennis', 'home') or is_state('device_tracker.handy', 'home') or is_state('device_tracker.handymqtt', 'home') %}
            true
          {% else %}
            false
          {% endif %}
          
      besuch:
        friendly_name: "Besuch"
        device_class: presence        
        value_template: >-
          {% if is_state('input_boolean.besuch', 'on') %}
            true
          {% else %}
            false
          {% endif %}          

automation:
  - alias: 'Unterwegs - Geräte eingeschaltet'
    trigger:
      - platform: state
        entity_id: binary_sensor.zu_hause
        to: 'off'
        for:
          minutes: 60
    condition:
      - condition: template
        value_template: >-
          {% set ns = namespace(found=0) -%}
          {% set computerEingeschaltet = is_state('switch.computer', 'on') %}
          {% set computerEingeschaltetLassen = is_state('input_boolean.computer_ausschalten', 'on') %}

          {% for entity_id in state_attr('group.alles_ausschalten', 'entity_id') -%}
            {% set parts = entity_id.split('.') -%}
            {% if (states(entity_id) == 'on') -%}
              {% set ns.found = ns.found + 1 -%}
            {% endif -%}
          {% endfor -%}
          
          {% if ns.found > 1 %}
            True
          {% elif ns.found == 0 or (ns.found == 1 and computerEingeschaltet == True and computerEingeschaltetLassen == True) %}
            False
          {% else %}
            True
          {% endif %}  
          
    action:
      - service: notify.telegram
        data_template:
          title: "Es sind noch Geräte eingeschaltet"
          message: >-
            {%- set comma = joiner(",") -%}
            {%- set deviceFound = false -%}

            {% for entity_id in state_attr('group.alles_ausschalten', 'entity_id') -%}              
              {%- if states(entity_id) == 'on' -%}
                {%- set deviceFound = true -%}
                {{ comma() }} {{ state_attr(entity_id, 'friendly_name') }}
              {%- endif -%}
            {%- endfor -%}

            {%- if deviceFound == true -%}
              Alle Geräte sind ausgeschaltet.
            {%- endif -%}
          data:
            inline_keyboard:
              - 'Alles Ausschalten:/alles_ausschalten'

  - alias: "Unterwegs - Lichtsimulation starten"
    trigger:
      - platform: time_pattern
        minutes: '/10'
    condition:
      - condition: state
        entity_id: binary_sensor.zu_hause
        state: 'off'
      - condition: state
        entity_id: calendar.urlaub
        state: 'on'
      - condition: sun
        after: sunset
        after_offset: '-00:30:00'
      - condition: time
        before: '22:30:00'
    action:
      - delay: "00:{{ '{:02}'.format(range(0, 30) | random | int) }}:00"
      - service: homeassistant.toggle
        data_template:
          entity_id: "{{ state_attr('group.licht_unterwegs','entity_id') | random }}"

  - alias: "Unterwegs - Lichtsimulation beenden"
    trigger:
      - platform: time
        at: '22:30:00'
    condition:
      - condition: state
        entity_id: binary_sensor.zu_hause
        state: 'off'
      - condition: state
        entity_id: calendar.urlaub
        state: 'on'        
    action:
      - delay: '00:{{ range(15,59) | random | int }}:00'
      - service: homeassistant.turn_off
        entity_id: group.licht_unterwegs

  - alias: "Zu Hause - Standort aktualisieren"
    trigger:
      - platform: state
        entity_id: device_tracker.handy
        to: 'home'
      - platform: state
        entity_id: device_tracker.handymqtt
        to: 'home'        
    action:
      - service: mqtt.publish
        data:
           topic: 'location/handy'
           payload: 'home'
           retain: true
      - service: shell_command.send_position
        data:
          url: !secret phonetracker_send_position_url
      - service: device_tracker.see
        data_template:
          dev_id: handygps
          location_name: 'home'
          gps: ["{{ state_attr('zone.zu_hause', 'latitude') }}", "{{ state_attr('zone.zu_hause', 'longitude') }}"]

  - alias: "Zu Hause - Manuell geschaltet"
    trigger:
      - platform: state
        entity_id: binary_sensor.schalter_flur
        to: 'off'
    condition:
      - condition: state
        entity_id: device_tracker.handymqtt
        state: 'not_home'
    action:
      - service: mqtt.publish
        data:
           topic: 'location/handy'
           payload: 'home'
           retain: true
      - service: shell_command.send_position
        data:
          url: !secret phonetracker_send_position_url
      - service: device_tracker.see
        data_template:
          dev_id: handygps
          location_name: 'home'
          gps: ["{{ state_attr('zone.zu_hause', 'latitude') }}", "{{ state_attr('zone.zu_hause', 'longitude') }}"]

  - alias: "Zu Hause - Geräte einschalten"
    trigger:
      - platform: state
        entity_id: binary_sensor.zu_hause
        to: 'on'
    condition:
      - condition: time
        after: '08:00'
        before: '20:00'
      - condition: numeric_state
        entity_id: sensor.laufzeit_minuten
        above: 5
    action:
      - service: script.zu_hause

  - alias: "Zu Hause - Geräte einschalten abends"
    trigger:
      - platform: state
        entity_id: binary_sensor.zu_hause
        to: 'on'
    condition:
      - condition: time
        after: '20:00'
        before: '23:30'
      - condition: numeric_state
        entity_id: sensor.laufzeit_minuten
        above: 5
    action:
      - service: script.zu_hause_abends

  - alias: "Zu Hause - Begrüßung aktivieren"
    trigger:
      - platform: state
        entity_id: binary_sensor.tuersensor
        to: 'on'
      - platform: state
        entity_id: binary_sensor.zu_hause
        to: 'on'
    condition: 
      - condition: time        
        before: '23:00'   
      - condition: numeric_state
        entity_id: sensor.laufzeit_minuten
        above: 5
      - condition: or
        conditions:
          - condition: state
            entity_id: binary_sensor.zu_hause
            state: 'off'
          - condition: state
            entity_id: binary_sensor.tuersensor
            state: 'off'
            for: '00:05:00'
    action:
      - service: input_boolean.turn_on
        entity_id: input_boolean.zu_hause_begruessung        
        
  - alias: "Zu Hause - Begrüßung starten"
    trigger:
      - platform: state
        entity_id: binary_sensor.tuersensor
        to: 'off' 
    condition:
      - condition: state
        entity_id: input_boolean.zu_hause_begruessung
        state: 'on'       
    action:
      - delay: '00:00:30'
      - service: !secret tts_service
        data_template:
          message: >-
            "Hallo Dennis. Willkommen zu Hause."
            
            {% if is_state('counter.behaelter_leeren', '0') %}
              "Der Staubsaugerbehälter muss geleert werden."
            {% endif %}

            {% set count_heimnetz_entities = states('sensor.heimnetz_offline') | int -%}
            {% set count_zigate_entities = states('sensor.zigate_offline') | int -%}
            {% set count_complete = count_heimnetz_entities + count_zigate_entities | int -%}
            
            {% if count_complete > 0 %}
              {% if count_complete > 1 %}
                {{ "Die folgenden Geräte sind offline. " }}
              {% else %}
                {{ "Das folgende Gerät ist offline. " }}
              {% endif %}            
            
              {% if count_heimnetz_entities > 0 %}
                {%- for entity_id in state_attr('group.heimnetz', 'entity_id') -%}
                  {% set parts = entity_id.split('.') -%}

                  {% if states(entity_id) == 'not_home' %}
                    {{ states[parts[0]][parts[1]].name }},
                  {% endif %}
                {%- endfor %}
              {% endif %}
                            
              {% set now = as_timestamp(now()) | int %}
              {% set puffer = states('input_number.zigate_offline_puffer') | int * 60 | int -%}

              {% if count_zigate_entities > 0 %}
                {%- for entity_id in state_attr('group.zigate', 'entity_id') -%}
                  {%- set lastChange = as_timestamp(states(entity_id)) | int -%}
                  {%- set difference = (now - lastChange ) / 60 | round() -%}
                  {%- set parts = entity_id.split('.') -%}
                  {%- if difference > puffer -%}
                    {{ states[parts[0]][parts[1]].name }},
                  {%- endif -%}
                {%- endfor -%}            
              {% endif %}                 
            {% endif %}
           
            {% set min_battery_level = states('input_number.batteriestand_warnlevel') | int -%}
            {% set count_battery_entities = states('sensor.batteriestand_niedrig') | int -%}

            {%if count_battery_entities > 0 %}
              {% if count_battery_entities > 1 %}
                {{ "Der Batteriestand der folgenden Geräte ist niedrig. " }}
              {% else %}
                {{ "Der Batteriestand des folgenden Gerätes ist niedrig. " }}
              {% endif %}

              {%- for entity_id in state_attr('group.batteriestand', 'entity_id') -%}
                {%- set parts = entity_id.split('.') -%}
                {%- if (states(entity_id) | replace("%","") | int) <= min_battery_level -%}
                  {{ states[parts[0]][parts[1]].name }},
                {%- endif -%}
              {%- endfor -%}              
            {% endif %}
      - service: input_boolean.turn_off
        entity_id: input_boolean.zu_hause_begruessung                           
            
script:
  zu_hause:
    alias: "Zu Hause"
    sequence:
      - service: alarm_control_panel.alarm_disarm
        entity_id: alarm_control_panel.alarm
      - service: input_boolean.turn_on
        entity_id: input_boolean.zu_hause_begruessung
      - service: script.wohnung_radios_einschalten
      - service: switch.turn_on
        entity_id: switch.computer, switch.watchtv_wohnzimmer      
      - condition: state
        entity_id: binary_sensor.sonne_tagsueber
        state: 'off'
      - service: light.turn_on
        entity_id: light.couch, light.strahler

  zu_hause_abends:
    alias: "Zu Hause - abends"
    sequence:
      - service: alarm_control_panel.alarm_disarm
        entity_id: alarm_control_panel.alarm
      - service: input_boolean.turn_on
        entity_id: input_boolean.zu_hause_begruessung
      - service: light.turn_on
        entity_id: light.couch, light.strahler
      - service: switch.turn_on
        entity_id: switch.computer, switch.watchtv_wohnzimmer
      - service: switch.turn_on
        entity_id: switch.badezimmer_radio
      - wait_template: >-
          {% if is_state('media_player.badezimmer', 'playing') %}
            True
          {% else %}
            False
          {% endif %}      
        timeout: '00:02:00'
      - service: media_player.media_pause
        entity_id: media_player.badezimmer

homeassistant:
  customize:
    sensor.aufenthaltsort_handy:
      friendly_name: Aufenthaltsort
      icon: mdi:google-maps
    proximity.home:
      friendly_name: Entfernung